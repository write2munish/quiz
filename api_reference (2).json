{
  "openapi": "3.0.1",
  "info": {
    "title": "Visa Direct Account and Wallet",
    "description": "",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://sandbox.api.visa.com",
      "description": "Sandbox server"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "Managed Liquidity FX ",
      "description": "Managed Liquidity FX "
    },
    {
      "name": "Payouts Originator Receive API - Legacy",
      "description": "Payouts Originator Receive API - Legacy"
    },
    {
      "name": "Payouts Originator Send API - Legacy",
      "description": "Payouts Originator Send API - Legacy"
    },
    {
      "name": "Visa Direct Account and Wallet Additional Services",
      "description": "Visa Direct Account and Wallet Additional Services"
    },
    {
      "name": "Visa Direct Account and Wallet Receive API",
      "description": "Visa Direct Account and Wallet Receive API"
    },
    {
      "name": "Visa Direct Account and Wallet Send API",
      "description": "Visa Direct Account and Wallet Send API"
    }
  ],
  "paths": {
    "/visapayouts/v3/payouts": {
      "get": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Query Payout",
        "description": "Query Payout",
        "operationId": "QueryPayout",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PayoutIdentifier"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionIdType-1"
            }
          },
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueryResponseAccount-1"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-1"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-1"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-1"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse-1"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse-1"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse-1"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Send Payout",
        "description": "This API allows an originator to send Visa a payout request to push funds with relevant sender, recipient, and recipient's bank account  or recipient's wallet information. The ISO field names provided are provided by Visa for guidance only. Clients are advised to check the ISO field mappings themselves.",
        "operationId": "SendPayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPayoutRequest-1"
              },
              "examples": {
                "VDA Payment Received Scenario": {
                  "summary": "VDA Payment Received Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "smith",
                      "firstName": "Jessica",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970093",
                        "currencyCode": "GBP"
                      },
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "675456",
                        "addressLine1": "123 Main St",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "addressLine1": "addressline1"
                      },
                      "name": "Ben",
                      "type": "C",
                      "senderAccountNumber": "senderAccountNumber"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": 1002,
                      "businessApplicationId": "FD",
                      "statementNarrative": "advancepayment",
                      "transactionAmount": 1.5,
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "clientReferenceId": "888852397088",
                      "senderSourceOfFunds": "01"
                    }
                  }
                },
                "VDW Transaction Timeout Scenario": {
                  "summary": "VDW Transaction Timeout Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Do",
                      "firstName": "John",
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513102",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "AIRTEL_MONEY"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "122342",
                      "lastName": "Sender",
                      "firstName": "Ben",
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "postalCode": "111222",
                        "addressLine1": "addressline5",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": 1003,
                      "businessApplicationId": "FD",
                      "transactionAmount": 1000,
                      "transactionCurrencyCode": "USD",
                      "endToEndId": "123456",
                      "clientReferenceId": "829149656561"
                    }
                  }
                },
                "VDA Transaction Timeout Scenario": {
                  "summary": "VDA Transaction Timeout Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "smith",
                      "firstName": "Jessica",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970095",
                        "currencyCode": "GBP"
                      },
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "675456",
                        "addressLine1": "123 Main St",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "addressLine1": "addressline1"
                      },
                      "name": "Ben",
                      "type": "C",
                      "senderAccountNumber": "senderAccountNumber"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": 1002,
                      "businessApplicationId": "FD",
                      "statementNarrative": "advancepayment",
                      "transactionAmount": 1.5,
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "clientReferenceId": "140466879604",
                      "senderSourceOfFunds": "01"
                    }
                  }
                },
                "VDW Payment Received Scenario": {
                  "summary": "VDW Payment Received Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Do",
                      "firstName": "John",
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513100",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "AIRTEL_MONEY"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "122342",
                      "lastName": "Sender",
                      "firstName": "Ben",
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "postalCode": "111222",
                        "addressLine1": "addressline5",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": 1003,
                      "businessApplicationId": "FD",
                      "transactionAmount": 1000,
                      "transactionCurrencyCode": "USD",
                      "endToEndId": "123456",
                      "clientReferenceId": "987399801024"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payout response body",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AccountPayoutResponse-1"
                    }
                  ]
                },
                "examples": {
                  "VDA Payment Received Scenario": {
                    "summary": "VDA Payment Received Scenario",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2022-11-16T10:36:07.000Z",
                        "settlementCurrencyCode": "GBP",
                        "payoutId": "5de56088-fdfc-31f2-83fa-fe6c3f66389b",
                        "clientReferenceId": "888852397088",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 1,
                        "expectedPostingDate": "2022-11-16",
                        "destinationCurrencyCode": "GBP",
                        "transactionAmount": 1.5,
                        "transactionCurrencyCode": "GBP",
                        "settlementAmount": 1557,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 1557
                      }
                    }
                  },
                  "VDW Transaction Timeout Scenario": {
                    "summary": "VDW Transaction Timeout Scenario",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1003,
                        "clientReferenceId": "829149656561",
                        "status": "PENDING"
                      }
                    }
                  },
                  "VDA Transaction Timeout Scenario": {
                    "summary": "VDA Transaction Timeout Scenario",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "clientReferenceId": "140466879604",
                        "status": "PENDING"
                      }
                    }
                  },
                  "VDW Payment Received Scenario": {
                    "summary": "VDW Payment Received Scenario",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2023-05-03T11:09:51.938Z",
                        "settlementCurrencyCode": "USD",
                        "payoutId": "02af4f36-7fa0-317d-b7ac-db99a68f435e",
                        "endToEndId": "123456",
                        "clientReferenceId": "987399801024",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1003,
                        "fxConversionRate": 3613.25,
                        "expectedPostingDate": "2023-05-03",
                        "destinationCurrencyCode": "UGX",
                        "transactionAmount": 1000,
                        "transactionCurrencyCode": "USD",
                        "settlementAmount": 1000,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 3613250
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Transaction is accepted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/202AccountPayoutCreatedResponse-1"
                    }
                  ]
                },
                "examples": {
                  "VDA Payment Received Scenario": {
                    "summary": "VDA Payment Received Scenario",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2022-11-16T10:36:07.000Z",
                        "settlementCurrencyCode": "GBP",
                        "payoutId": "5de56088-fdfc-31f2-83fa-fe6c3f66389b",
                        "clientReferenceId": "888852397088",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 1,
                        "expectedPostingDate": "2022-11-16",
                        "destinationCurrencyCode": "GBP",
                        "transactionAmount": 1.5,
                        "transactionCurrencyCode": "GBP",
                        "settlementAmount": 1557,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 1557
                      }
                    }
                  },
                  "VDW Transaction Timeout Scenario": {
                    "summary": "VDW Transaction Timeout Scenario",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1003,
                        "clientReferenceId": "829149656561",
                        "status": "PENDING"
                      }
                    }
                  },
                  "VDA Transaction Timeout Scenario": {
                    "summary": "VDA Transaction Timeout Scenario",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "clientReferenceId": "140466879604",
                        "status": "PENDING"
                      }
                    }
                  },
                  "VDW Payment Received Scenario": {
                    "summary": "VDW Payment Received Scenario",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2023-05-03T11:09:51.938Z",
                        "settlementCurrencyCode": "USD",
                        "payoutId": "02af4f36-7fa0-317d-b7ac-db99a68f435e",
                        "endToEndId": "123456",
                        "clientReferenceId": "987399801024",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1003,
                        "fxConversionRate": 3613.25,
                        "expectedPostingDate": "2023-05-03",
                        "destinationCurrencyCode": "UGX",
                        "transactionAmount": 1000,
                        "transactionCurrencyCode": "USD",
                        "settlementAmount": 1000,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 3613250
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponses-1"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-1"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-1"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse-1"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse-1"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Cancel Payout",
        "description": "Cancel Payout Request",
        "operationId": "CancelPayout",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PayoutIdentifier"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionIdType"
            }
          },
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CancelPayoutResponse"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v3/payouts/postingCalendar": {
      "get": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Get Posting Calendar",
        "description": "This API retrieves the posting calendar for a currency/country combination from specific dates.",
        "operationId": "GetPostingCalendar",
        "parameters": [
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId"
            }
          },
          {
            "name": "recipientBankCountryCode",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "description": "Beneficiary bank account country code.\nFormat: 3-character ISO-3166 (Alpha-3) country code.\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Country Code.\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          },
          {
            "name": "recipientBankCurrencyCode",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "description": "Reflects the currency associated with the destination amount.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code.\n\nISO20022 field name:  Transaction Information And Status - Remitted Amount Currency Code.   \n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCurrencyCode"
                }
              ]
            }
          },
          {
            "name": "payoutSpeed",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PayoutSpeed"
            }
          },
          {
            "name": "numberOfProcessingDays",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "maximum": 30,
              "minimum": 1,
              "type": "integer",
              "description": "This represents the number of days (Posting Dates) to be returned in the response.         \n",
              "example": 7
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPostingCalendarResponse"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts~1postingCalendar/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v3/payouts/accountBalance": {
      "get": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Get Account Balance",
        "description": "The purpose of this API is to retrieve merchant's account currency balance.",
        "operationId": "GetAccountBalance",
        "parameters": [
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AlphaCurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccountBalanceResponse"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts~1accountBalance/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v3/payouts/validate": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Send API"
        ],
        "summary": "Validate Payout",
        "description": "This API allows an Originating Entity to validate the payload for a Accounts or wallet payout before sending in the actual payout request for processing, thus ensuring greater probability of success and allowing for a more seamless transaction flow. The ISO field names provided are provided by Visa for guidance only. Clients are advised to check the ISO field mappings themselves.",
        "operationId": "ValidatePayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePayoutRequest-2"
              },
              "examples": {
                "VDA Invalid Scenario": {
                  "summary": "VDA Invalid Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "smith",
                      "firstName": "Jessica",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970094",
                        "currencyCode": "GBP"
                      },
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "675456",
                        "addressLine1": "123 Main St",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "addressLine1": "addressline1"
                      },
                      "name": "Ben",
                      "type": "C",
                      "senderAccountNumber": "senderAccountNumber"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": 1002,
                      "businessApplicationId": "FD",
                      "statementNarrative": "advancepayment",
                      "transactionAmount": 1.5,
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "senderSourceOfFunds": "01"
                    }
                  }
                },
                "VDA Valid Scenario": {
                  "summary": "VDA Valid Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "smith",
                      "firstName": "Jessica",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970093",
                        "currencyCode": "GBP"
                      },
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "675456",
                        "addressLine1": "123 Main St",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "addressLine1": "addressline1"
                      },
                      "name": "Ben",
                      "type": "C",
                      "senderAccountNumber": "senderAccountNumber"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": 1002,
                      "businessApplicationId": "FD",
                      "statementNarrative": "advancepayment",
                      "transactionAmount": 1.5,
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "senderSourceOfFunds": "01"
                    }
                  }
                },
                "VDW Invalid Scenario": {
                  "summary": "VDW Invalid Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Do",
                      "firstName": "John",
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513101",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "AIRTEL_MONEY"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "122342",
                      "lastName": "Sender",
                      "firstName": "Ben",
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "postalCode": "111222",
                        "addressLine1": "addressline5",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": 1003,
                      "businessApplicationId": "FD",
                      "transactionAmount": 1000,
                      "transactionCurrencyCode": "USD",
                      "endToEndId": "123456"
                    }
                  }
                },
                "VDW Valid Scenario": {
                  "summary": "VDW Valid Scenario",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Do",
                      "firstName": "John",
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513100",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "AIRTEL_MONEY"
                      },
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "122342",
                      "lastName": "Sender",
                      "firstName": "Ben",
                      "address": {
                        "country": "USA",
                        "city": "Washington",
                        "postalCode": "111222",
                        "addressLine1": "addressline5",
                        "state": "CF"
                      },
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": 1003,
                      "businessApplicationId": "FD",
                      "transactionAmount": 1000,
                      "transactionCurrencyCode": "USD",
                      "endToEndId": "123456"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business validation result - if the Payout request is valid and can be processed if sent as a payout transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePayoutResponse-2"
                },
                "examples": {
                  "VDA Invalid Scenario": {
                    "summary": "VDA Invalid Scenario",
                    "value": {
                      "validationResultCode": "INVALID",
                      "validationDetails": [
                        {
                          "reason": "string",
                          "details": [
                            {
                              "code": "string",
                              "location": "string",
                              "message": "string"
                            }
                          ],
                          "message": "string",
                          "status": 400
                        }
                      ]
                    }
                  },
                  "VDA Valid Scenario": {
                    "summary": "VDA Valid Scenario",
                    "value": {
                      "validationResultCode": "VALID"
                    }
                  },
                  "VDW Invalid Scenario": {
                    "summary": "VDW Invalid Scenario",
                    "value": {
                      "validationResultCode": "INVALID",
                      "validationDetails": [
                        {
                          "reason": "string",
                          "details": [
                            {
                              "code": "string",
                              "location": "string",
                              "message": "string"
                            }
                          ],
                          "message": "string",
                          "status": 400
                        }
                      ]
                    }
                  },
                  "VDW Valid Scenario": {
                    "summary": "VDW Valid Scenario",
                    "value": {
                      "validationResultCode": "VALID_WITH_NETWORK"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-1"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-1"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-1"
          },
          "429": {
            "$ref": "#/components/responses/429ErrorResponse-1"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse-1"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse-1"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts~1validate/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v3/payouts/metadata": {
      "get": {
        "tags": [
          "Visa Direct Account and Wallet Additional Services"
        ],
        "summary": "Get Payout Metadata",
        "description": "This service retrieves the  sender, recipient and transaction details needed to post a successful payout transaction",
        "operationId": "GetMetadata",
        "parameters": [
          {
            "name": "recipientCountryCode",
            "in": "query",
            "description": "This field is always required when payoutMethod = W. \nOnly one of recipientBankCountryCluster or recipientCountryCode must be sent when payoutMethod = B.  \n",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AlphaCountryCode-1"
            }
          },
          {
            "name": "recipientCurrencyCode",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AlphaCurrencyCode-1"
            }
          },
          {
            "name": "recipientBankCountryCluster",
            "in": "query",
            "description": "Country cluster code. This field is applicable only when payoutMethod = B. Only one of recipientBankCountryCluster or recipientCountryCode must be sent when payoutMethod = B.\n",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CountryCluster"
            }
          },
          {
            "name": "recipientWalletOperator",
            "in": "query",
            "description": "Wallet operator enumerated codes (Reserved for Future Use). This field must be sent only when payoutMethod = W\n",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OperatorName"
            }
          },
          {
            "name": "payoutMethod",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "description": "Originating Entity must indicate the payout method e.g. to Account\n\nValid ENUM values:\n- \"B\" Visa Direct Account\n- \"W\" Visa Direct Wallet (Reserved for Future Use)\n",
              "enum": [
                "B",
                "W"
              ]
            }
          },
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId-1"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetMetaDataResponse-4"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse-2"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v3~1payouts~1metadata/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v1/extensions/verifyRecipient": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Additional Services"
        ],
        "summary": "Verify Recipient",
        "description": "Verify Recipient Detail Request",
        "operationId": "VerifyRecipient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRecipientDetailRequest-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business validation result - if the Payout request is valid and can be processed if sent as a payout transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyRecipientDetailResponse-1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-1"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-1"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-1"
          },
          "429": {
            "$ref": "#/components/responses/429ErrorResponse-1"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse-1"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse-1"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1visapayouts~1v1~1extensions~1verifyRecipient/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/managedLiquidityFX/v1/quotes": {
      "post": {
        "tags": [
          "Managed Liquidity FX "
        ],
        "summary": "Create Quote",
        "description": "Create Quote",
        "operationId": "createQuote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuote"
              },
              "examples": {
                "Request-Response-With-BUY-Amount": {
                  "summary": "Request-Response-With-BUY-Amount",
                  "value": {
                    "amountType": "BUY",
                    "initiatingPartyId": "900104",
                    "amount": "98976.67",
                    "sellCurrency": "GBP",
                    "buyCurrency": "USD"
                  }
                },
                "Request-Response-With-SELL-Amount": {
                  "summary": "Request-Response-With-SELL-Amount",
                  "value": {
                    "amountType": "SELL",
                    "initiatingPartyId": "900104",
                    "amount": "10",
                    "sellCurrency": "USD",
                    "buyCurrency": "GBP"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateQuoteResponse"
                },
                "examples": {
                  "Request-Response-With-BUY-Amount": {
                    "summary": "Request-Response-With-BUY-Amount",
                    "value": {
                      "buyAmount": 98976.67,
                      "exchangeRate": 1.1973,
                      "sellAmount": 82666.56,
                      "quoteExpiryDateTime": "2024-05-09T22:56:40.000Z",
                      "sellCurrency": "GBP",
                      "buyCurrency": "USD",
                      "quoteId": 6926029700183,
                      "quoteStatus": "PENDING"
                    }
                  },
                  "Request-Response-With-SELL-Amount": {
                    "summary": "Request-Response-With-SELL-Amount",
                    "value": {
                      "buyAmount": 8.1,
                      "exchangeRate": 1.234,
                      "sellAmount": 10,
                      "quoteExpiryDateTime": "2024-05-09T18:02:08.000Z",
                      "sellCurrency": "USD",
                      "buyCurrency": "GBP",
                      "quoteId": 2630127435850,
                      "quoteStatus": "PENDING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request - Error Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1managedLiquidityFX~1v1~1quotes/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/managedLiquidityFX/v1/quotes/{quoteId}": {
      "put": {
        "tags": [
          "Managed Liquidity FX "
        ],
        "summary": "Lock Quote",
        "description": "Lock Quote",
        "operationId": "lockInQuote",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Quote Id that needs to be locked-in",
            "required": true,
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockQuoteRequest"
              },
              "examples": {
                "Request-Response-Lock-Quote": {
                  "summary": "Request-Response-Lock-Quote",
                  "value": {
                    "initiatingPartyId": 900104
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockQuoteResponse"
                },
                "examples": {
                  "Request-Response-Lock-Quote": {
                    "summary": "Request-Response-Lock-Quote",
                    "value": {
                      "buyAmount": 8.1,
                      "exchangeRate": 1.234,
                      "sellAmount": 10,
                      "sellCurrency": "USD",
                      "buyCurrency": "GBP",
                      "quoteId": 2630127435850,
                      "quoteStatus": "LOCKED-IN"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request - Error Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                }
              }
            }
          },
          "500": {
            "description": "Internal Service Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1managedLiquidityFX~1v1~1quotes~1{quoteId}/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v2/payouts/{payoutId}": {
      "get": {
        "tags": [
          "Payouts Originator Send API - Legacy"
        ],
        "summary": "Query Payout With Id",
        "description": "Query PayoutId Request",
        "operationId": "Query",
        "parameters": [
          {
            "name": "payoutId",
            "in": "path",
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A, P2W and Reversals, Chargeback, Response, Advice for P2C.\n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryPayoutIdResponse200-1"
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": [
                      {
                        "recipientDetail": {
                          "bank": {
                            "accountName": "account name",
                            "countryCode": "840",
                            "bankName": "Bank of America",
                            "accountNumber": "4385878445587518"
                          }
                        },
                        "originatorDetail": {
                          "bankId": "320007",
                          "originatorId": "77770"
                        },
                        "transactionDetail": {
                          "systemTraceAuditNumber": "325081",
                          "transactionIdentifier": "461218600340256",
                          "retrievalReferenceNumber": "121816403394",
                          "payoutId": "2ee1ee20-2ca1-11b2-b711-5a485339dc9e_1",
                          "endToEndId": "ABCD-1234-fab-578",
                          "clientReferenceId": "3187351823",
                          "settlement": {
                            "date": "2021-08-07",
                            "amount": 200,
                            "currencyCode": "840",
                            "conversionRate": "1.000000"
                          },
                          "responseCode": "00",
                          "expectedPostingDate": "2020-01-22",
                          "destinationCurrencyCode": "978",
                          "transactionAmount": 200,
                          "transactionCurrencyCode": "840",
                          "originalTransmissionDateTime": "2021-08-06T16:40:34.000Z",
                          "statusUpdateTime": "2021-08-06T16:40:34.000Z",
                          "status": "RECEIVED",
                          "destinationAmount": 166
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Original Payout transaction or when original Push To Account transaction is not found or when original Push To Wallet transaction is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse500"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse503"
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v2~1payouts~1{payoutId}/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Payouts Originator Send API - Legacy"
        ],
        "summary": "Cancel DELETE",
        "description": "Cancel Payout Request",
        "operationId": "Cancel",
        "parameters": [
          {
            "name": "payoutId",
            "in": "path",
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C.\n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cancel Payout request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPayoutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Cancel payout response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPayout200Response"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "transactionDetail": {
                        "status": "CANCELLED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Original Payout transaction or when original PushToAccount transaction is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPayout400Response"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPayout500Response"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPayout503Response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "CancelPayoutRequest",
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v2~1payouts~1{payoutId}/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v2/payouts": {
      "get": {
        "tags": [
          "Payouts Originator Send API - Legacy"
        ],
        "summary": "Query Payout",
        "description": "Query Payout with BankId, OriginatorId & RRN",
        "operationId": "Query with parameters",
        "parameters": [
          {
            "name": "bankId",
            "in": "query",
            "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system.\n\nNote: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 11,
              "minLength": 6,
              "pattern": "\\d{6,11}",
              "type": "string"
            }
          },
          {
            "name": "originatorId",
            "in": "query",
            "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account or Push to Wallet transactions. The Originating Entity should populate Card Acceptor Terminal ID (CAID) for Push to Card transactions.\n\nISO20022 field name: Debtor - Originating Entity Identification",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 15,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "RRN",
            "in": "query",
            "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C. It is also used for duplicate validation check done by Visa.\n\nThe format is recommended to be ydddhhnnnnnn yddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). hh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. nnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Payment Identification - Instruction Identification",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "pattern": "\\d{12}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryPayoutIdResponse200"
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": [
                      {
                        "recipientDetail": {
                          "bank": {
                            "accountName": "account name",
                            "countryCode": "840",
                            "bankName": "Bank of America",
                            "accountNumber": "4385878445587518"
                          }
                        },
                        "originatorDetail": {
                          "bankId": "320007",
                          "originatorId": "77770"
                        },
                        "transactionDetail": {
                          "systemTraceAuditNumber": "325081",
                          "transactionIdentifier": "461218600340256",
                          "retrievalReferenceNumber": "121816403394",
                          "payoutId": "2ee1ee20-2ca1-11b2-b711-5a485339dc9e_1",
                          "endToEndId": "ABCD-1234-fab-578",
                          "clientReferenceId": "3187351823",
                          "settlement": {
                            "date": "2021-08-07",
                            "amount": 200,
                            "currencyCode": "840",
                            "conversionRate": "1.000000"
                          },
                          "responseCode": "00",
                          "expectedPostingDate": "2020-01-22",
                          "destinationCurrencyCode": "978",
                          "transactionAmount": 200,
                          "transactionCurrencyCode": "840",
                          "originalTransmissionDateTime": "2021-08-06T16:40:34.000Z",
                          "statusUpdateTime": "2021-08-06T16:40:34.000Z",
                          "status": "RECEIVED",
                          "destinationAmount": 166
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Original Payout transaction or when original PushToAccount transaction is not found or when original Push To Wallet transaction is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse500"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPayoutIdResponse503"
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v2~1payouts/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Payouts Originator Send API - Legacy"
        ],
        "summary": "Send Payout",
        "description": "This API allows an originator to send Visa a payout request to push funds with relevant sender, recipient, and recipient's bank account information.",
        "operationId": "Send Payout",
        "requestBody": {
          "description": "SendPayoutFromOriginator request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPayoutFromOriginatorRequest"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Smith",
                      "address": {
                        "country": "840",
                        "city": "SFO",
                        "postalCode": "100",
                        "addressLine1": "address line 1",
                        "addressLine2": "address line 2",
                        "state": "765"
                      },
                      "contactEmail": "abc@visa.com",
                      "dateOfBirth": "1990-09-11",
                      "type": "I",
                      "payoutMethod": "B",
                      "firstName": "John",
                      "bank": {
                        "branchCode": "2",
                        "bankCode": "021001088",
                        "bankCodeType": "ABA",
                        "accountNumberType": "DEFAULT",
                        "accountName": "account name",
                        "countryCode": "840",
                        "accountType": "1",
                        "bankName": "Bank of America",
                        "accountNumber": "4385878445587518",
                        "BIC": "CTBAAU2S",
                        "currencyCode": "840"
                      },
                      "cityOfBirth": "Austin",
                      "identificationList": [
                        {
                          "idType": "D",
                          "idNumber": "123334",
                          "idIssueCountry": "840"
                        }
                      ],
                      "countryOfBirth": "840",
                      "contactNumber": "123456789",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ]
                    },
                    "senderDetail": {
                      "address": {
                        "country": "840",
                        "city": "Mumbai",
                        "postalCode": "100",
                        "addressLine1": "address line 1",
                        "addressLine2": "address line 2",
                        "state": "Mahrashtra"
                      },
                      "contactEmail": "def@visa.com",
                      "beneficiaryRelationship": "business partner",
                      "dateOfBirth": "1990-09-11",
                      "sourceOfFunds": "02",
                      "type": "I",
                      "senderReferenceNumber": "4304630005267011",
                      "cityOfBirth": "Austin",
                      "identificationList": [
                        {
                          "idType": "D",
                          "idNumber": "123334",
                          "idIssueCountry": "840"
                        }
                      ],
                      "countryOfBirth": "840",
                      "name": "John Smith",
                      "contactNumber": "120345678",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ],
                      "sourceOfIncome": "business"
                    },
                    "originatorDetail": {
                      "paymentFacilitator": {
                        "country": "840",
                        "name": "test",
                        "id": "123476876"
                      },
                      "bankId": "320007",
                      "originatorName": "Visa Inc. GER",
                      "address": {
                        "country": "840",
                        "postalCode": "12346",
                        "state": "TX",
                        "addressLine": "123 St."
                      },
                      "originatorBIC": "CTBAAU2S",
                      "merchantCategoryCode": "6012",
                      "bankBIC": "CTBAAU2S",
                      "originatorId": "77770"
                    },
                    "transactionDetail": {
                      "systemTraceAuditNumber": "325081",
                      "localTransactionDateTime": "2021-08-06T11:00:29",
                      "businessApplicationId": "FD",
                      "statementNarrative": "advance payment",
                      "purposeOfPayment": "ANN",
                      "transactionAmount": "200",
                      "transactionCurrencyCode": "840",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ],
                      "retrievalReferenceNumber": "121816403394",
                      "endToEndId": "ABCD-1234-fab-578",
                      "clientReferenceId": "3187351823",
                      "payoutSpeed": "standard"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payout response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutFromOriginator200Response"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "_links": {
                        "self": {
                          "href": "visapayouts/v2/payouts",
                          "type": "POST"
                        }
                      },
                      "originatorDetail": {
                        "bankId": "320007",
                        "originatorId": "77770"
                      },
                      "transactionDetail": {
                        "systemTraceAuditNumber": "325081",
                        "transactionIdentifier": "461218600340256",
                        "retrievalReferenceNumber": "121816403394",
                        "payoutId": "2ee1ee20-2ca1-11b2-b711-5a485339dc9e_1",
                        "endToEndId": "ABCD-1234-fab-578",
                        "clientReferenceId": "3187351823",
                        "settlement": {
                          "date": "2021-08-07",
                          "amount": 200,
                          "currencyCode": "840",
                          "conversionRate": "1.000000"
                        },
                        "payoutSpeed": "PREMIUM",
                        "responseCode": "00",
                        "transmissionDateTime": "2021-08-06T16:40:34.000Z",
                        "expectedPostingDate": "2020-01-22",
                        "destinationCurrencyCode": "978",
                        "transactionAmount": 200,
                        "transactionCurrencyCode": "840",
                        "destinationAmount": 166
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Transaction is accepted and will be processed & notified status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutFromOriginator201Response"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "_links": {
                        "self": {
                          "href": "visapayouts/v2/payouts",
                          "type": "POST"
                        }
                      },
                      "originatorDetail": {
                        "bankId": "320007",
                        "originatorId": "77770"
                      },
                      "transactionDetail": {
                        "systemTraceAuditNumber": "325081",
                        "transactionIdentifier": "461218600340256",
                        "retrievalReferenceNumber": "121816403394",
                        "payoutId": "2ee1ee20-2ca1-11b2-b711-5a485339dc9e_1",
                        "endToEndId": "ABCD-1234-fab-578",
                        "clientReferenceId": "3187351823",
                        "settlement": {
                          "date": "2021-08-07",
                          "amount": 200,
                          "currencyCode": "840",
                          "conversionRate": "1.000000"
                        },
                        "payoutSpeed": "PREMIUM",
                        "responseCode": "00",
                        "transmissionDateTime": "2021-08-06T16:40:34.000Z",
                        "expectedPostingDate": "2020-01-22",
                        "destinationCurrencyCode": "978",
                        "transactionAmount": 200,
                        "transactionCurrencyCode": "840",
                        "destinationAmount": 166
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Original Payout transaction or when original PushToAccount transaction is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutFromOriginator400Response"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutFromOriginator500Response"
                }
              }
            }
          }
        },
        "x-name": "Initiate V2SendPayoutFromOriginator Request",
        "x-codegen-request-body-name": "SendPayoutFromOriginatorRequest",
        "x-slug": "SendPayoutFromOriginator-v2",
        "x-tags": [
          "SendPayoutFromOriginator-v2",
          "SendPayoutFromOriginatorRequest-v2"
        ],
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1visapayouts~1v2~1payouts/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visapayouts/v1/payouts/validate": {
      "post": {
        "tags": [
          "Payouts Originator Send API - Legacy"
        ],
        "summary": "Payout Validation",
        "description": "This API allows an Originating Entity to validate the payload for a ‘Push to Account’ payout before sending in the actual payout request for processing, thus ensuring greater probability of success and allowing for a more seamless transaction flow.",
        "operationId": "Payout Validation",
        "requestBody": {
          "description": "ValidatePayoutFromOriginator request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePayoutFromOriginatorRequest"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Smith",
                      "address": {
                        "country": "840",
                        "city": "SFO",
                        "postalCode": "100",
                        "addressLine1": "address line 1",
                        "addressLine2": "address line 2",
                        "state": "765"
                      },
                      "contactEmail": "abc@visa.com",
                      "dateOfBirth": "1990-09-11",
                      "type": "I",
                      "payoutMethod": "B",
                      "firstName": "John",
                      "bank": {
                        "branchCode": "2",
                        "bankCode": "021001088",
                        "bankCodeType": "ABA",
                        "accountNumberType": "DEFAULT",
                        "accountName": "account name",
                        "countryCode": "840",
                        "accountType": "1",
                        "bankName": "Bank of America",
                        "accountNumber": "4385878445587518",
                        "BIC": "CTBAAU2S",
                        "currencyCode": "840"
                      },
                      "cityOfBirth": "Austin",
                      "identificationList": [
                        {
                          "idType": "D",
                          "idNumber": "123334",
                          "idIssueCountry": "840"
                        }
                      ],
                      "countryOfBirth": "840",
                      "contactNumber": "123456789",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ]
                    },
                    "senderDetail": {
                      "address": {
                        "country": "840",
                        "city": "Mumbai",
                        "postalCode": "100",
                        "addressLine1": "address line 1",
                        "addressLine2": "address line 2",
                        "state": "Mahrashtra"
                      },
                      "contactEmail": "def@visa.com",
                      "beneficiaryRelationship": "business partner",
                      "dateOfBirth": "1990-09-11",
                      "sourceOfFunds": "02",
                      "type": "I",
                      "senderReferenceNumber": "4304630005267011",
                      "cityOfBirth": "Austin",
                      "identificationList": [
                        {
                          "idType": "D",
                          "idNumber": "123334",
                          "idIssueCountry": "840"
                        }
                      ],
                      "countryOfBirth": "840",
                      "name": "John Smith",
                      "contactNumber": "120345678",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ],
                      "sourceOfIncome": "business"
                    },
                    "originatorDetail": {
                      "paymentFacilitator": {
                        "country": "840",
                        "name": "test",
                        "id": "123476876"
                      },
                      "bankId": "320007",
                      "originatorName": "Visa Inc. GER",
                      "address": {
                        "country": "840",
                        "postalCode": "12346",
                        "state": "TX",
                        "addressLine": "123 St."
                      },
                      "originatorBIC": "CTBAAU2S",
                      "merchantCategoryCode": "6012",
                      "bankBIC": "CTBAAU2S",
                      "originatorId": "77770"
                    },
                    "transactionDetail": {
                      "systemTraceAuditNumber": "325081",
                      "localTransactionDateTime": "2021-08-06T11:00:29",
                      "businessApplicationId": "FD",
                      "statementNarrative": "advance payment",
                      "purposeOfPayment": "ANN",
                      "transactionAmount": "200",
                      "transactionCurrencyCode": "840",
                      "additionalData": [
                        {
                          "name": "TAX_REF",
                          "value": "ASR"
                        }
                      ],
                      "retrievalReferenceNumber": "121816403394",
                      "endToEndId": "ABCD-1234-fab-578",
                      "clientReferenceId": "3187351823",
                      "payoutSpeed": "standard"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response indicates if the payout request is valid, invalid or duplicate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePayoutFromOriginator200Response"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "status": "VALID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "This response indicates the user has sent too many requests at a given time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePayoutFromOriginator429Response"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePayoutFromOriginator500Response"
                }
              }
            }
          }
        },
        "x-name": "Initiate ValidatePayoutFromOriginator Request",
        "x-codegen-request-body-name": "ValidatePayoutFromOriginatorRequest",
        "x-slug": "ValidatePayoutFromOriginator",
        "x-tags": [
          "ValidatePayoutFromOriginator",
          "ValidatePayoutFromOriginatorRequest"
        ],
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1visapayouts~1v1~1payouts~1validate/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/statusNotification": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Payout Status Notification",
        "description": "The purpose of the API is to Enable Visa to provide updates of an pay to account or pay to wallet or pay to card transaction to originator",
        "operationId": "PayoutStatusNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutNotification-5"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "$ref": "#/components/responses/400NotificationsErrorResponse-1"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse-1"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse-1"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1statusNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/flexibleSettlementNotification": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Flexible Settlement Notification",
        "description": "The purpose of this API is to provide flexible settlement notification to merchants to manage their flexible Settlement agreement",
        "operationId": "FlexibleSettlementNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlexibleSettlementNotification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400NotificationsErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponseNoBody"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponseNoBody"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1flexibleSettlementNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/ledgerNotification": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Ledger Notification",
        "description": "Ledger Notification",
        "operationId": "LedgerNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerNotification-7"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400NotificationsErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1ledgerNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/metadataChangeNotification": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Payout Metadata Change Notification",
        "description": "Clients using Get Payout Metadata API will need to subscribe to this notification.\nThe purpose of this API is to inform the clients when there is a change in payout metadata for a route or when there is a recall of the latest published version of metadata. \nWhen there is a recall clients would need to revert back to the previous version of metadata. A call to the Get Payout Metadata API endpoint would  always return the metadata version that is in effect.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RouteDefinitionChangePerCountryAndCurrency"
                  },
                  {
                    "$ref": "#/components/schemas/RouteDefinitionChangePerCountryClusterAndCurrency"
                  },
                  {
                    "$ref": "#/components/schemas/RouteDefinitionRecallPerCountryAndCurrency"
                  },
                  {
                    "$ref": "#/components/schemas/RouteDefinitionRecallPerCountryClusterAndCurrency"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1metadataChangeNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/balanceNotification": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Account Balance Notification",
        "description": "The purpose of this API is to provide virtual account (i.e. VAN) balance data driven by client's configuration and usage",
        "operationId": "BalanceNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceNotification-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-2"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1balanceNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v3/payouts/return": {
      "post": {
        "tags": [
          "Visa Direct Account and Wallet Receive API"
        ],
        "summary": "Payout Return Notification",
        "description": "This API provides the Originating Entity with the ability to receive notifications on returns associated with their payouts",
        "operationId": "PayoutReturnNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutReturnRequest-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "$ref": "#/components/responses/400NotificationsErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1v3~1payouts~1return/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v2/payouts/return": {
      "post": {
        "tags": [
          "Payouts Originator Receive API - Legacy"
        ],
        "summary": "Return Payout",
        "description": " Return to Originator",
        "operationId": "Return Payout",
        "requestBody": {
          "description": "ReturnToOriginator body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutReturnRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Request definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ReturnToOriginator",
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1v2~1payouts~1return/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/v2/payouts/notification": {
      "post": {
        "tags": [
          "Payouts Originator Receive API - Legacy"
        ],
        "summary": "Payout Notification API",
        "description": "The purpose of the API is to enable the PSP to provide updates on an existing payout transaction with additional information or request additional information required to complete the processing of an existing active payout transaction. Examples for updates provided by the PSP are status updates or updates on the expected payout transaction posting date.",
        "operationId": "Status Notification",
        "requestBody": {
          "description": "OriginatorStatusNotification body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Request definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "OriginatorStatusNotification",
        "x-slug": "OriginatorStatusNotification",
        "x-tags": [
          "OriginatorStatusNotification"
        ],
        "x-operationVersions": [
          {
            "label": "v2 - Latest",
            "operationPointer": "#/paths/~1v2~1payouts~1notification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    }
  },
  "components": {
    "schemas": {
      "QueryPayoutIdResponse200-1": {
        "required": [
          "originatorDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "type": "object",
            "properties": {
              "bank": {
                "required": [
                  "accountName",
                  "accountNumber",
                  "bankName",
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "bankName": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank name"
                  },
                  "accountName": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account name i.e. accountholder name as recorded on recipient bank account"
                  },
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient bank account country code\nFormat: 3-digit ISO-3166 (numeric) country code"
                  },
                  "accountNumber": {
                    "maxLength": 34,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account number"
                  }
                },
                "description": "This object is only relevant for P2A transactions."
              },
              "wallet": {
                "required": [
                  "accountIdentifier",
                  "accountIdentifierType",
                  "countryCode",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-3166 (numeric) country code"
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-4217 (numeric) currency code"
                  },
                  "operatorName": {
                    "type": "string",
                    "description": "This identifies the non bank wallet operator that has issued the account to the recipient and is going to receive and post the funds to the recipients account. Enum provided by Visa Direct to Wallet Operator.",
                    "enum": [
                      "WECHATPAY"
                    ]
                  },
                  "accountIdentifier": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "This identifies the identifier of the recipients account with the wallet operator to which the funds have to be deposited. (e.g., wallet address - phone/email/custom identifier that identifies the account with the digital wallet operator)\n-\tIf EMAIL then verify whether the Email is in valid Email format\n-\tIf PHONENUMBER then verify if the value is numeric , + at the beginning of the value will be considered as valid. e.g. +65123456789 (note, refer ISO spec E.164)\n-\tIf USERNAME then check whether it is a valid string. \n\nNote - An E.164 number has three components.\n1. The prefix +.\n2. A 1-3 digit country code.\n3. A subscriber number."
                  },
                  "accountIdentifierType": {
                    "type": "string",
                    "description": "This identifies type of account Identifier. Supported values are PHONENUMBER, EMAIL, USERNAME.",
                    "enum": [
                      "PHONENUMBER",
                      "EMAIL",
                      "USERNAME"
                    ]
                  }
                },
                "description": "This object is only relevant for P2W transactions."
              }
            }
          },
          "originatorDetail": {
            "required": [
              "bankId",
              "originatorId"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. Note: This is also referred to as the “Acquiring BIN” by Visa"
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account or Push to Wallet transactions and Card Acceptor Terminal ID (CAID) for Push to Card transactions.\n\nISO20022 field name: N/A\nP2A: Mandatory \nP2W: Mandatory \nP2C: N/A"
              },
              "merchantVerificationValue": {
                "type": "integer",
                "description": "Conditional The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.\n Note: This field is present if the MVV value was included on the Send Payout request.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "originalTransmissionDateTime",
              "payoutId",
              "retrievalReferenceNumber",
              "status",
              "statusUpdateTime",
              "systemTraceAuditNumber",
              "transactionAmount",
              "transactionCurrencyCode"
            ],
            "type": "object",
            "properties": {
              "authId": {
                "type": "integer",
                "description": "This is a unique authorization code for an approved transaction from Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "status": {
                "type": "string",
                "description": "Status of the transaction being queried\n\nP2C Valid Value are:\nCOMPLETED, IN_PROGRESS, FAILED, PENDING, CANCELLED\n\nStatus definition:\n- COMPLETED - Transaction was processed by Visa.\n- IN_PROGRESS - Transaction is in progress, being processed by Visa\n- FAILED - Transaction was received and rejected by Visa\n- PENDING - Transaction is pending for processing by Visa\n- CANCELLED - Transaction was cancelled as requested by the originating acquirer\n\nP2A Valid Value are:\nPAYMENT_RECEIVED, PENDING, PAYMENT_SENT, VALIDATION_FAILED, AWAITING_INFORMATION, PENDING_CANCELLATION, RETURNED, ERROR, DECLINED, CANCELLED\n\nP2A Status definition:\nPAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\nPENDING : Payout request is pending validation\nPAYMENT_SENT: The payout has been submitted to the Network partner by PSP\nVALIDATION_FAILED: Payout request failed validation and will not be processed further\nAWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed \nPENDING_CANCELLATION: Cancel payout request is pending\nRETURNED: Payout has been returned and funds are being refunded\nERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc.,\nDECLINED: Payout is declined by Visa and will not be proccessed further\nCANCELLED: Payout has been successfully cancelledn\n\nP2W Valid Value are:\nPAYMENT_RECEIVED, PENDING, PAYMENT_SENT, VALIDATION_FAILED, AWAITING_INFORMATION, PENDING_CANCELLATION, RETURNED, ERROR, DECLINED, CANCELLED\n\nP2W Status definition:\nPAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\nPENDING : Payout request is pending validation\nPAYMENT_SENT: The payout has been submitted to the Network partner by PSP\nVALIDATION_FAILED: Payout request failed validation and will not be processed further\nAWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed \nPENDING_CANCELLATION: Cancel payout request is pending\nRETURNED: Payout has been returned and funds are being refunded\nERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc.,\nDECLINED: Payout is declined by Visa and will not be proccessed further\nCANCELLED: Payout has been successfully cancelledn\n",
                "enum": [
                  "PAYMENT_RECEIVED",
                  "PENDING",
                  "PAYMENT_SENT",
                  "VALIDATION_FAILED",
                  "AWAITING_INFORMATION",
                  "PENDING_CANCELLATION",
                  "RETURNED",
                  "ERROR",
                  "DECLINED",
                  "CANCELLED",
                  "IN_PROGRESS",
                  "FAILED"
                ]
              },
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A, P2W and Reversals, Chargeback, Response, Advice for P2C."
              },
              "networkId": {
                "maxLength": 4,
                "minLength": 1,
                "type": "string",
                "description": "This contains a code that identifies the network on which the transaction was processed.\n Note: This field is returned only if it is anything other than networkId value 2. Supported only in US for domestic transactions\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional"
              },
              "tokenData": {
                "type": "object",
                "properties": {
                  "accountRange": {
                    "type": "integer",
                    "description": "Contains the first 9 digits of the cardholder PAN..\nNote: Acquirers must not forward this value to their merchants after receiving it in the response message from Visa.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "accountSuffix": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Last four digits of the card number/PAN \nNote: This is only relevant for push to card payouts, where a card network token was sent by the Originating Entity in the payout request (in the recipientDetail.card.accountNumber field).\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "additionalTokenRespInfo": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field when present in the API response identifies if the transaction is eligible for token services. Valid token service values are: 1 (Token program). <br><br> This field will not be present in the response if the transaction is ineligible for token services. <br><br> ISO20022 field name: N/A P2A: N/A P2C: Optional"
                  }
                }
              },
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - EndtoEnd Identification"
              },
              "settlement": {
                "type": "object",
                "properties": {
                  "date": {
                    "maxLength": 10,
                    "minLength": 10,
                    "pattern": "YYYY-MM-DD",
                    "type": "string",
                    "description": "This is date when the transaction is settled between Visa and the Acquirer \n\nP2A: Conditional (Mandatory when the transaction is settled)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Contains the transaction amount converted to settlement currency, expressed in the currency specified in settlementCurrencyCode field. \n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the settlement amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A"
                  },
                  "rateSourceId": {
                    "type": "string",
                    "description": "Contains the source ID of the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nP2A: Conditional (Mandatory when the transaction is settled via VisaNet)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)"
                  },
                  "conversionRate": {
                    "maxLength": 14,
                    "minLength": 1,
                    "pattern": "\\d{1,7}(\\.\\d{1,12})?",
                    "type": "string",
                    "description": "Contains the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nConditional (Mandatory when the transaction is settled via VisaNet)\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate\n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A"
                  }
                }
              },
              "responseCode": {
                "type": "integer",
                "description": "Response code that provides the result of the payout request. List of valid response codes (add VDP link (https://developer.visa.com/request_response_codes#action_code))"
              },
              "returnAmount": {
                "type": "integer",
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\nThe amount originally assessed for settlement on the Payout will be reversed as-is in case of rejects and cancellations.\nIn case of returns from Visa's network partner on a cross-currency transaction, this value could vary from the settlement amount on the original payout.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": 12345
              },
              "fundingStatus": {
                "type": "string",
                "description": "Funding Status of the payout transaction\n\nPossible values: \"FUNDED\" \"NOT_FUNDED\"\n\nFUNDED - Indicates that the originating entity has provided funding for the transaction and Visa Direct has allocated funds to the transaction\nNOT_FUNDED - Indicates that the originating entity has not provided funding for the transaction\n \nP2A: Conditional (will be populated after the funding has been assessed) \nP2W: Conditional (will be populated after the funding has been assessed)",
                "enum": [
                  "FUNDED",
                  "NOT_FUNDED"
                ]
              },
              "returnDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\0\\0\\0Z",
                "type": "string",
                "description": "This field contains the date and time Visa has returned the payout to the Originating Entity\nFormat: YYYY-MM-DDThh:mm:ss.000Z\nExample: 2021-01-01T22:52:46.000Z\n\nISO20022 field name: Payment Return - Message Creation Date Time",
                "example": "2020-05-05T12:12:12.000Z"
              },
              "nationalNetData": {
                "type": "object",
                "properties": {
                  "reimbursementFee": {
                    "type": "number",
                    "description": "Applies to Argentina domestic data only and indicates the installment payment details for Argentina National Net Settlement Service.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "double"
                  },
                  "memberSuppliedIRF": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field contains the client-calculated interchange reimbursement fee (IRF) for countries using this capability.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "reimbursementAttribute": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains a code that identifies the applicable interchange reimbursement fee for a transaction. Its an optional value and if not supplied by Originating entities, Visa applies default value 0 and passes onwards to Issuers/Receiving entities.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "statusUpdateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "This is the time when latest event reflected in transactionDetail.status is processed using Visa’s clock Format: UTC time YYYY-MM-DThh:mm:ss.000Z Example: 2021-01-01T22:52:46.000Z",
                "format": "UTC time YYYY-MM-DThh:mm:ss.000Z",
                "example": "2021-01-01T22:52:46.000Z"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - Transaction Identification"
              },
              "destinationAmount": {
                "type": "integer",
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "transactionAmount": {
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient bank account or card. Expressed in the currency specified in transaction currency code.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”."
              },
              "returnCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": "840"
              },
              "returnSourceAmount": {
                "type": "integer",
                "description": "The return amount as sent by Visa’s network partner in the destination country, expressed in the currency specified in returnSourceCurrencyCode field. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": 12345
              },
              "expectedPostingDate": {
                "maxLength": 10,
                "minLength": 10,
                "type": "string",
                "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\nConditional (Mandatory for an approved transaction) \nP2C: N/A",
                "format": "YYYY-MM-DD"
              },
              "feeProgramIndicator": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Contains the fee program indicator, which is used to assess the Interchange Fee Amount in certain scenarios\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "returnReasonDetails": {
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 5,
                    "minLength": 5,
                    "type": "string",
                    "description": "Indicates the return reason code when the payout is returned."
                  },
                  "type": {
                    "type": "string",
                    "description": "Indicates the PSP return type when the payout is returned.",
                    "enum": [
                      "REJECT",
                      "RETURN"
                    ]
                  },
                  "description": {
                    "maxLength": 105,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the PSP return description when the payout is returned."
                  }
                }
              },
              "returnConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert returnSourceAmount to returnAmount.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "serviceProcessingType": {
                "required": [
                  "requestType"
                ],
                "type": "object",
                "properties": {
                  "requestType": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Reserved for future use.</br></br>P2A: N/A P2C: Optional"
                  }
                },
                "description": "This field will contain values that identifies the type of service assigned for the transaction."
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "minLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. It can also be used to match the payouts to settlement reports."
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set"
              },
              "destinationCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the destination amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nP2A: Optional \nP2W: Optional \nP2C: N/A"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount Format: 3-digit ISO-4217 (numeric) currency code"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A, P2W and Reversals, Chargeback, Response, Advice for P2C.\n\nThe format is recommended to be ydddhhnnnnnn yddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). hh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. nnnnnn - can be the systemsTraceAuditNumber or any 6 digit number"
              },
              "returnSourceCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": "840"
              },
              "destinationConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert transactionAmount to destinationAmount.",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "originalTransmissionDateTime": {
                "type": "string",
                "description": "The time the request was received by Visa",
                "format": "YYYY-MM-DDThh:mm:ss.sssZ"
              }
            }
          }
        }
      },
      "AlphaCountryCode": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "3-character ISO-3166 (Alpha-3) country code.",
        "example": "USA"
      },
      "PayoutNotificationReceivedRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "WalletPayoutRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest"
          }
        ]
      },
      "PayoutNotificationReceivedRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutNotificationReceivedRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "OneOfFieldsClientDriven": {
        "type": "array",
        "description": "At least one of the 'fields'/'oneOfFields'/'anyOfFields' groups will be populated.\n",
        "items": {
          "required": [
            "fields"
          ],
          "type": "object",
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldClientDriven"
              }
            }
          }
        }
      },
      "TotalAmountDue": {
        "type": "number",
        "description": "Total amount due by due date.",
        "format": "double"
      },
      "FlexibleAmountRemaining": {
        "type": "number",
        "description": "Remaining amount of liquidity available.",
        "format": "double"
      },
      "PayoutWalletRequest-1": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber-1"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-1"
              }
            ]
          }
        }
      },
      "PayoutWalletRequest-2": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber-1"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-2"
              }
            ]
          }
        }
      },
      "PayoutSpeed": {
        "type": "string",
        "description": "Originating Entity to indicate the desired payout speed for the payment. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Instruction Priority\n",
        "example": "standard",
        "enum": [
          "STANDARD",
          "PREMIUM"
        ]
      },
      "RecipientAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "FieldValue": {
        "title": "FieldValue",
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "List item label."
          },
          "option": {
            "type": "string",
            "description": "List option value."
          }
        },
        "description": "Is used to create a select list within a User Interface for the 'additionalFieldWithValues' data field."
      },
      "PayoutWalletRequest-7": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-2"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-2"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-7"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-2"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-4"
              }
            ]
          }
        }
      },
      "PayoutWalletRequest-6": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-2"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet-2"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-2"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-3"
              }
            ]
          }
        }
      },
      "RecipientCompany-3": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-3"
          }
        }
      },
      "RecipientCompany-1": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          }
        }
      },
      "TransactionIdType-1": {
        "type": "string",
        "description": "This field indicates the type of identifier\n- CLIENT_REFERENCE_ID is merchant's transaction reference ID\n- PAYOUT_ID is Visa's transaction reference ID\n",
        "enum": [
          "CLIENT_REFERENCE_ID",
          "PAYOUT_ID"
        ]
      },
      "RecipientCompany-2": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-2"
          }
        }
      },
      "ReturnReasonCode": {
        "maxLength": 5,
        "minLength": 5,
        "type": "string",
        "description": "If the Transaction Status is RETURNED or REJECTED then Return reason code will be populated\n\nISO20022 field name: Payment Return - Reason Code  \n\nCodes and descriptions please refer to Visa Payment Guide\n",
        "example": "RE101"
      },
      "ErrorResponse500": {
        "title": "ErrorResponse500",
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "reason",
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "Reason for the error",
                "example": "internalServerError"
              },
              "status": {
                "maxLength": 3,
                "minLength": 3,
                "type": "integer",
                "description": "3 digit HTTP status code",
                "example": 500
              },
              "message": {
                "type": "string",
                "description": "Free form text message describing the error condition.",
                "example": "Internal Server Error"
              }
            }
          }
        }
      },
      "SenderTransactorDetail-7": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual-2"
          },
          {
            "$ref": "#/components/schemas/SenderCompany-2"
          }
        ]
      },
      "PayoutReturnRequestV2": {
        "required": [
          "originatorDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "originatorDetail": {
            "required": [
              "bankId",
              "originatorId"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "maximum": 99999999999,
                "minimum": 100000,
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system.\nNote: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Payment Return - Debtor Agent FI Identification",
                "example": 408999
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account or Push to Wallet transactions\n\nISO20022 field name: Payment Return - Debtor Originating Entity Identification",
                "example": "1234567890"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "payoutId",
              "retrievalReferenceNumber",
              "returnDateTime",
              "returnReasonDetails",
              "systemTraceAuditNumber",
              "transactionIdentifier"
            ],
            "type": "object",
            "properties": {
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information",
                "example": "5003f6a0-2c44-11b2-aa57-47378ae53313_1"
              },
              "endToEndId": {
                "maxLength": 35,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original EndtoEnd Identification"
              },
              "returnAmount": {
                "minimum": 1,
                "type": "integer",
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\nThe amount originally assessed for settlement on the Payout will be reversed as-is in case of rejects and cancellations.\nIn case of returns from Visa's network partner on a cross-currency transaction, this value could vary from the settlement amount on the original payout. \n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Payment Return - Instructed Amount.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": 4300
              },
              "returnDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "This field contains the date and time Visa has returned the payout to the Originating Entity\n\nFormat: YYYY-MM-DDThh:mm:ss.000Z\n\nExample: 2021-01-01T22:52:46.000Z\n\nISO20022 field name: Payment Return - Message Creation Date Time",
                "example": "2020-05-05T12:12:12.000Z"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification"
              },
              "returnCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": "356"
              },
              "returnSourceAmount": {
                "type": "integer",
                "description": "The return amount as sent by Visa’s network partner in the destination country, expressed in the currency specified in returnSourceCurrencyCode field. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": 12345
              },
              "returnReasonDetails": {
                "required": [
                  "code",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 5,
                    "minLength": 5,
                    "type": "string",
                    "description": "Indicates the return reason code when the payout is returned.<br>Refer to <a href=\"/capabilities/visa-direct-payouts/docs-error-codes\">RE Code</a> \n\nISO20022 field name: Payment Return - Reason Code",
                    "example": "RE101"
                  },
                  "type": {
                    "type": "string",
                    "description": "Indicates the return type when the payout is returned. <br>Refer to <a href=\"/capabilities/visa-direct-payouts/docs-error-codes\">Return Type</a> \n\nISO20022 field name: Payment Return - PSP Return Type",
                    "enum": [
                      "REJECT",
                      "RETURN"
                    ]
                  },
                  "description": {
                    "maxLength": 105,
                    "type": "string",
                    "description": "Indicates the return description when the payout is returned. <br>Refer to <a href=\"/capabilities/visa-direct-payouts/docs-error-codes\">Return Description</a> \n\nISO20022 field name: Payment Return - PSP Return Description"
                  }
                }
              },
              "returnConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert returnSourceAmount to returnAmount.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "minLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. It can also be used to match the payouts to settlement reports.\n\nISO20022 field name: Payment Return - Original Clearing System Reference"
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set\n\nISO20022 field name: N/A",
                "example": "685420"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A. It is also used for duplicate validation check done by Visa.\n\nThe format is recommended to be ydddhhnnnnnn\n- yddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).\n- hh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.\n- nnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Payment Return - Original Instruction Identification",
                "example": "410721685200"
              },
              "returnSourceCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": "840"
              },
              "originalTransactionAmount": {
                "minimum": 1,
                "type": "integer",
                "description": "The original transaction amount that was sent by the Originating Entity in the Send Payout request in the  transactionDetail.transactionAmount field. Expressed in the currency specified in transaction currency code. \n\nISO20022 field name: N/A\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.",
                "example": 4300
              },
              "originalTransactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the original transaction amount. It will be same as the transactionDetail.transactionCurrencyCode from the original payout request.\n\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: N/A",
                "example": "356"
              }
            }
          }
        }
      },
      "SenderTransactorDetail-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual-1"
          },
          {
            "$ref": "#/components/schemas/SenderCompany-1"
          }
        ]
      },
      "EndToEndId-1": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity's customer to track the transaction end-to-end\n\nConditional: Required if payout to a wallet recipient\n\nISO20022 field name: end-to-end identification\n",
        "example": "5003f6a02c4411b2aa5747378ae5331"
      },
      "Wallet-2": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Visa Direct Endpoint Guide on list of supported Wallet Operators).\n"
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.          \n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "BusinessApplicationId": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n",
        "example": "PP"
      },
      "Wallet-1": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Visa Direct Endpoint Guide on list of supported Wallet Operators).\n"
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.\n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "LimitReachedDetails": {
        "required": [
          "currencyCode",
          "flexibleAmountLimit"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "$ref": "#/components/schemas/AlphaCurrencyCode"
          },
          "flexibleAmountLimit": {
            "$ref": "#/components/schemas/FlexibleAmountLimit"
          }
        }
      },
      "requestBody": {
        "required": [
          "originatorDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "type": "object",
            "properties": {
              "vauData": {
                "type": "object",
                "properties": {
                  "vauFlag": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient primary account number Visa Account Updater (VAU) flag\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional \nNote: Possible values are : Y (replacement occurred) N (No replacements)"
                  },
                  "accountStatus": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates recipient account status. Possible values are C (closed account) or Q (contact cardholder)\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "vauErrorReasonCode": {
                    "maxLength": 25,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the reason the VAU failed\nPossible values \nVAU_SUCCESS\nVAU_FAILED\nVAU_PAN_TKN_SUCCESS\nVAU_PAN_TKN_FAILED\nVAU_PPCS_SUCCESS\nVAU_PPCS_FAILED\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "enum": [
                      "VAU_SUCCESS",
                      "VAU_FAILED",
                      "VAU_PAN_TKN_SUCCESS",
                      "VAU_PAN_TKN_FAILED",
                      "VAU_PPCS_SUCCESS",
                      "VAU_PPCS_FAILED"
                    ]
                  },
                  "replacementCardAccountNumber": {
                    "maxLength": 19,
                    "minLength": 6,
                    "type": "string",
                    "description": "Contains the recipient replacement primary account number, if it exists\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "replacementCardExpirationDate": {
                    "maxLength": 7,
                    "minLength": 7,
                    "type": "string",
                    "description": "Contains the recipient replacement primary account number expiration date, if it exists. This is returned even if the expiration date was not passed in the request.\n\n Format: YYYY-MM \n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "YYYY-MM"
                  }
                }
              },
              "prepaidBalanceData": {
                "required": [
                  "amount",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "Contains the prepaid load amount to the prepaid card, expressed in the currency specified in prepaidBalanceData currency code field. \n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory only for Top Up Transactions)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the prepaid balance data amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory only for Top Up Transactions)"
                  }
                }
              }
            }
          },
          "originatorDetail": {
            "required": [
              "bankId"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "maximum": 99999999999,
                "minimum": 100000,
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system.\nNote: This is also referred to as the “Acquiring BIN” by Visa.\nISO20022 field name: Debtor Agent FI Identification",
                "example": 408999
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account or Push to wallet transactions. \nISO20022 field name: Debtor - Originating Entity Identification \nP2A: Mandatory\nP2W: Mandatory\nP2C: N/A",
                "example": "1234567890"
              },
              "merchantVerificationValue": {
                "type": "integer",
                "description": "Conditional The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.\n Note: This field is present if the MVV value was included on the Send Payout request.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "notificationDateTime",
              "originalTransmissionDateTime",
              "retrievalReferenceNumber",
              "status",
              "systemTraceAuditNumber"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 50,
                "minLength": 1,
                "pattern": "^[0-9A-Za-z-]+$",
                "type": "string",
                "description": "This is a unique transaction status identifier\nP2A: Mandatory\nP2W: Mandatory\nP2C: N/A"
              },
              "authId": {
                "type": "integer",
                "description": "This is a unique authorization code for an approved transaction from Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "status": {
                "type": "string",
                "description": "Status of the transaction\nValid Values for P2A are:\nPAYMENT_RECEIVED, PAYMENT_SENT, AWAITING_INFORMATION\nVALIDATION_FAILED, ERROR, DECLINED, PENDING_CANCELLATION, CANCELLED\n\nStatus definition:\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received.\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP.\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed.\n- VALIDATION_FAILED: Payout request failed validation and will not be processed further\n- ERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc., \n- DECLINED: Payout is declined by Visa and will not be processed further\n- PENDING_CANCELLATION: Cancel payout request is pending\n- CANCELLED: Payout has been cancelled successfully\n\n\nValid Values for P2W are:\nPAYMENT_RECEIVED, PAYMENT_SENT, AWAITING_INFORMATION\nVALIDATION_FAILED, ERROR, DECLINED, PENDING_CANCELLATION, CANCELLED\n\nStatus definition:\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received.\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP.\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed.\n- VALIDATION_FAILED: Payout request failed validation and will not be processed further\n- ERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc., \n- DECLINED: Payout is declined by Visa and will not be processed further\n- PENDING_CANCELLATION: Cancel payout request is pending\n- CANCELLED: Payout has been cancelled successfully\n\nISO20022 field name: Transaction Information And Status - Transaction Status\n\n\n Valid Values for P2C are:\nCOMPLETED, IN_PROGRESS, FAILED, PENDING, CANCELLED\n\nStatus definition:\n- COMPLETED - Transaction was processed by Visa.\n- IN_PROGRESS - Transaction is in progress, being processed by Visa\n- FAILED - Transaction was received and rejected by Visa\n- PENDING - Transaction is pending for processing by Visa\n- CANCELLED - Transaction was cancelled as requested by the originating acquirer",
                "example": "PAYMENT_SENT"
              },
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\nP2A: Optional\nP2W: Optional\nP2C: Optional",
                "example": "5003f6a0-2c44-11b2-aa57-47378ae53313_1"
              },
              "networkId": {
                "maxLength": 4,
                "minLength": 1,
                "type": "string",
                "description": "This contains a code that identifies the network on which the transaction was processed.\n Note: This field is returned only if it is anything other than networkId value 2. Supported only in US for domestic transactions\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "tokenData": {
                "type": "object",
                "properties": {
                  "accountRange": {
                    "type": "integer",
                    "description": "Contains the first 9 digits of the cardholder PAN..\nNote: Acquirers must not forward this value to their merchants after receiving it in the response message from Visa.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "accountSuffix": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Last four digits of the card number/PAN \nNote: This is only relevant for push to card payouts, where a card network token was sent by the Originating Entity in the payout request (in the recipientDetail.card.accountNumber field).\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "additionalTokenRespInfo": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field will contain a value used to identify transactions eligible for token services. \nValid value: \n1 - Token program.\n\nISO20022 field name: N/A\nP2A: N/AP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "endToEndId": {
                "maxLength": 35,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original EndtoEnd Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "settlement": {
                "type": "object",
                "properties": {
                  "date": {
                    "maxLength": 10,
                    "minLength": 10,
                    "pattern": "YYYY-MM-DD",
                    "type": "string",
                    "description": "This is date when the transaction is settled between Visa and the Acquirer\n\nConditional (Mandatory when the transaction is settled)\n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Date\nP2A: Optional\nP2W: N/A\nP2C: Optional"
                  },
                  "amount": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "Contains the transaction amount converted to settlement currency, expressed in the currency specified in settlementCurrencyCode field. \n\nConditional (Mandatory when the transaction is settled)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Amount\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A",
                    "example": 4300
                  },
                  "serviceFlag": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the settlement service applicable for the transaction.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the settlement amount\n\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nConditional (Mandatory when the transaction is settled)\n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Amount Currency Code\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A",
                    "example": "356"
                  },
                  "rateSourceId": {
                    "maxLength": 5,
                    "type": "string",
                    "description": "Contains the source ID of the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nConditional (Mandatory when the transaction is settled via VisaNet)\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate Source ID\n\nConditional (Mandatory when the transaction is settled via VisaNet)\nP2A: Optional\nP2W: N/A\nP2C: N/A"
                  },
                  "conversionRate": {
                    "maxLength": 14,
                    "pattern": "<\\d{1,7}(\\.\\d{1,12})?>",
                    "type": "string",
                    "description": "Contains the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nConditional (Mandatory when the transaction is settled via VisaNet)\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A",
                    "example": "0.07"
                  },
                  "responsibleParty": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 to indicate that VisaNet has settlement responsibility for this transaction. This flag does not indicate the transaction will be settled.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "grossInterchangeValue": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 to indicate that this transaction has financial impact and that the value of the transaction (if approved) will be included in the settlement accumulation during processing of this request-response or advice-advice response message pair.\nThe flag is set to 0 if a transaction is ineligible for settlement processing.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "priorGrossInterchangeValue": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 indicating this transaction has financial impact, but VisaNet has updated its reconciliation totals for the value of this transaction.\nThis flag is set to 0 if the transaction is ineligible for settlement processing.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "payoutSpeed": {
                "type": "string",
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Transaction Information And Status - Instruction Priority\nP2A: Mandatory\nP2W: Mandatory\nP2C: N/A",
                "example": "STANDARD",
                "enum": [
                  "STANDARD",
                  "PREMIUM"
                ]
              },
              "responseCode": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Response code that provides the result of the payout request. List of valid response codes (add VDP link)\n\nISO20022 field name: Transaction Information And Status - Reason Code\nP2A: Conditional\nP2W: Optional\nP2C: Conditional"
              },
              "errorResponse": {
                "type": "object",
                "properties": {
                  "reason": {
                    "maxLength": 500,
                    "type": "string",
                    "description": "Contains a short description of the error\n\nConditional (will be populated for an error of the original payout)\n\nISO20022 field name: Transaction Information And Status - Error Reason"
                  },
                  "details": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "maxLength": 50,
                          "type": "string",
                          "description": "Contains an error code indicating the detailed error message\n\nConditional (will be populated for an error of the original payout)\n\nISO20022 field name: Transaction Information And Status - Error Reason"
                        },
                        "message": {
                          "maxLength": 10000,
                          "type": "string",
                          "description": "The long description of the specific error that occurred."
                        },
                        "location": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "The place in the incoming message that the particular error occurred."
                        }
                      }
                    }
                  },
                  "message": {
                    "maxLength": 10000,
                    "type": "string",
                    "description": "Contains a long description of the error\n\nConditional (will be populated for an error of the original payout)\n\nISO20022 field name: Transaction Information And Status - Error Reason Additional Information"
                  }
                }
              },
              "fundingStatus": {
                "type": "string",
                "description": "Funding Status of the payout transaction\n\nPossible values: \"FUNDED\" \"NOT_FUNDED\"\n- FUNDED - Indicates that the originating entity has provided funding for the transaction and Visa Direct has allocated funds to the transaction\n- NOT_FUNDED - Indicates that the originating entity has not provided funding for the transaction\n\nConditional (will be populated after the funding has been assessed) \n\nISO20022 field name: Transaction Information And Status - Funding Status Reason Info\nP2A: Optional\nP2W: Optional\nP2C: N/A",
                "enum": [
                  "FUNDED",
                  "NOT_FUNDED"
                ]
              },
              "responseSource": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Contains the response source/reason code that identifies the source of the responseCode i.e. whether it is from Visa or from the Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Mandatory"
              },
              "nationalNetData": {
                "type": "object",
                "properties": {
                  "reimbursementFee": {
                    "type": "number",
                    "description": "Applies to Argentina domestic data only and indicates the installment payment details for Argentina National Net Settlement Service.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "double"
                  },
                  "memberSuppliedIRF": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field contains the client-calculated interchange reimbursement fee (IRF) for countries using this capability.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "reimbursementAttribute": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains a code that identifies the applicable interchange reimbursement fee for a transaction. Its an optional value and if not supplied by Originating entities, Visa applies default value 0 and passes onwards to Issuers/Receiving entities.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "clientReferenceId": {
                "maxLength": 35,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "destinationAmount": {
                "minimum": 1,
                "type": "integer",
                "description": "The destination amount that will be deposited to the recipient account or wallet, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\nP2A: Optional\nP2W: Optional\nP2C: N/A",
                "example": 4300
              },
              "transactionAmount": {
                "minimum": 1,
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient's bank  or wallet.  Expressed in the currency specified in transaction currency code.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A or P2W on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Instructed Amount\nP2A: Optional\nP2W: Optional\nP2C: Optional",
                "example": 4300
              },
              "expectedPostingDate": {
                "maxLength": 10,
                "minLength": 10,
                "pattern": "YYYY-MM-DD",
                "type": "string",
                "description": "This is an estimated date by which the payout should be posted to the recipient account or wallet. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nISO20022 field name: Transaction Information And Status - Effective Interbank Settlement Date\nP2A: Optional\nP2W: Optional\nP2C: N/A",
                "example": "1980-02-01"
              },
              "feeProgramIndicator": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Contains the fee program indicator, which is used to assess the Interchange Fee Amount in certain scenarios\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "notificationDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "This field contains the date and time Visa has sent payout notification to the Originating Entity\n\nFormat: YYYY-MM-DDThh:mm:ss.000Z\n\nExample: 2021-01-01T22:52:46.000Z\n\nISO20022 field name: Transaction Information And Status - Message Creation Date Time",
                "example": "2020-05-05T12:12:12.000Z"
              },
              "originalResponseCode": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and responseCode will be 94.\nThis field is relevant in SendPayoutFromOriginator response only.\nP2A: Optional\nP2W: Optional\nP2C: Optional"
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "minLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. It can also be used to match the payouts to settlement reports.\n\nISO20022 field name: Transaction Information And Status - Original Transaction Clearing System Reference\nP2A: Mandatory\nP2W: Mandatory\nP2C: Optional",
                "example": "3lkj3434l"
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set\n\nISO20022 field name: N/A",
                "example": "685420"
              },
              "destinationCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the destination amount\n\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\nP2A: Optional\nP2W: Optional\nP2C: N/A",
                "example": "356"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\nP2A: Optional\nP2W: Optional\nP2C: Optional",
                "example": "356"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and it's one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C. It is also used for duplicate validation check done by Visa.The format is recommended to be ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\nISO20022 field name: Payment Identification - Instruction Identification",
                "example": "410721685200"
              },
              "destinationConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert transactionAmount to destinationAmount.\nP2A: Optional\nP2W: Optional\nP2C: N/A",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "originalTransmissionDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "This field contains the date and time the original payout request was submitted to Visa.\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nExample: 2021-01-01T22:52:46.000Z\n\nISO20022 field name: Transaction Information And Status - Original Payout Message Creation Date Time",
                "example": "2020-05-05T12:12:12.000Z"
              }
            }
          }
        }
      },
      "EODFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "initiatingPartyId",
          "notificationDateTime",
          "windowDueDetails"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "END_OF_DAY"
            ]
          },
          "windowDueDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WindowDueDetails"
            }
          },
          "currentDueDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WindowDueDetails"
            }
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "ClientReferenceId": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction.\n\nISO20022 field name: Transaction Identification\n\nOnly alphanumeric and '-' characters are allowed.\n"
      },
      "AccountQueryPendingResponse": {
        "$ref": "#/components/schemas/202AccountPayoutCreatedResponse"
      },
      "TransactionalAdditionalData-1": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "Rules": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "minItems": 1,
            "type": "array",
            "description": "This section returns the required fields for a given condition.\n",
            "items": {
              "$ref": "#/components/schemas/RuleWithFields"
            }
          },
          "condition": {
            "type": "string",
            "description": "It refers to an 'id' value in the conditions[] array."
          }
        }
      },
      "ErrorResponse": {
        "required": [
          "details",
          "reason",
          "status"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "items": {
              "required": [
                "code",
                "message"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "ValidateWalletTransactionDetail": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ErrorResponse401": {
        "title": "ErrorResponse401",
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "reason",
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "Reason for the error",
                "example": "authError"
              },
              "status": {
                "maxLength": 3,
                "minLength": 3,
                "type": "integer",
                "description": "3 digit HTTP status code",
                "example": 401
              },
              "message": {
                "type": "string",
                "description": "Free form text message describing the error condition.",
                "example": "Authentication Error"
              }
            }
          }
        }
      },
      "AccountPayoutResponse-1": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-1"
          }
        ]
      },
      "ConversionRate": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "format": "double",
        "example": 0.07
      },
      "AccountPayoutResponse-7": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-7"
          }
        ]
      },
      "ErrorResponse400": {
        "title": "ErrorResponse400",
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "reason",
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "Reason for the error",
                "example": "invalidRequest"
              },
              "status": {
                "maxLength": 3,
                "minLength": 3,
                "type": "integer",
                "description": "3 digit HTTP status code",
                "example": 400
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error code value",
                      "example": "11055"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detail description on the error",
                      "example": "Value provided for one of the fields is invalid."
                    },
                    "location": {
                      "type": "string",
                      "description": "Reference to a field which failed validation",
                      "example": "buyCurrency"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AccountPayoutResponse-6": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-6"
          }
        ]
      },
      "AccountPayoutRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest"
          }
        ]
      },
      "Combined": {
        "required": [
          "conditionDefiningFields",
          "conditions",
          "countrySpecificSchemas",
          "info",
          "routeDefiningFields",
          "rules",
          "schemas",
          "transactionReferences"
        ],
        "type": "object",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/Info"
          },
          "rules": {
            "$ref": "#/components/schemas/Rules"
          },
          "schemas": {
            "$ref": "#/components/schemas/Schemas"
          },
          "conditions": {
            "type": "array",
            "description": "This section states the validations that apply in a Send Payout API request. It contains fields and values that define a condition ID.\n",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AnyCondition"
                },
                {
                  "$ref": "#/components/schemas/AllCondition"
                },
                {
                  "$ref": "#/components/schemas/NotCondition"
                }
              ]
            }
          },
          "routeDefiningFields": {
            "$ref": "#/components/schemas/RouteDefiningFields"
          },
          "maxTransactionAmount": {
            "$ref": "#/components/schemas/MaxTransactionAmountEquivalent"
          },
          "minTransactionAmount": {
            "$ref": "#/components/schemas/MinTransactionAmountEquivalent"
          },
          "transactionReferences": {
            "$ref": "#/components/schemas/TransactionReferences"
          },
          "countrySpecificSchemas": {
            "$ref": "#/components/schemas/CountrySpecificSchemas"
          },
          "conditionDefiningFields": {
            "$ref": "#/components/schemas/ConditionDefiningFields"
          },
          "clientDrivenConditionalFields": {
            "$ref": "#/components/schemas/ClientDrivenConditionalFields"
          }
        }
      },
      "IdentityGroup-1": {
        "title": "IdentityGroup",
        "required": [
          "groupLabel",
          "groupName",
          "identityFields",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the metadata element/enum.\nThis generic Identity Group object can represent either 'Recipient Identity Field Group object' or 'Bank Account Registration Field Group object' . \nEnum value signifies the particular metadata element. \n\nFor example : \n a) if enum is \"address\", this can contain array of 'IdentityField' object where each object can represent elements like addressLine1, addressLine2, city, countryCode, postalCode etc    \n\n b) enum can be \"identificationList\", which contains array of \"IdentityField' objects, one of the IdentityField object can have elementName=\"idType\" and inputType=\"list\", in this scenario array of IdentityListItem will have \n [\n   {\n     \"label\": \"Passport\",\n     \"value\": \"Passport\"\n   },\n   {\n     \"label\": \"National ID Card\",\n     \"value\": \"National ID Card\"\n   },\n   {\n     \"label\": \"Driving License\",\n     \"value\": \"Driving License\"\n   }\n ], \n second 'IdentityField' Object -> elementName as \"identificationNumber\" with inputType=\"text\" \n third 'IdentityField' Object -> elementName as \"identificationCountry\" with inputType=\"text\" \n fourth 'IdentityField' Object -> elementName as \"validFromDate\" with inputType=\"text\"\n fifth  'IdentityField' Object -> elementName as \"validToDate\" with inputType=\"text\" and so on.\n\n c) If enum is \"additionalData\",this will have array of two 'IdentityField' objects, one representing 'additionalDataKey' and other one 'additionalDataValue'.\n\n d) If enum is \"name\", \"middleName\" may be required for some countries (e.g. Africa). This can be accommodated by appending a space and then middleName to <firstName>\n",
            "enum": [
              "bank",
              "address",
              "name",
              "additionalData",
              "identificationList",
              "legalEntityIdentity",
              "contactInfo",
              "birthInfo"
            ]
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the identity group is mandatory."
          },
          "groupLabel": {
            "type": "string",
            "description": "Displays a label for this group of identity fields."
          },
          "identityFields": {
            "type": "array",
            "description": "This type defines a list of recipient identity fields.",
            "items": {
              "$ref": "#/components/schemas/IdentityField"
            }
          }
        },
        "description": "This type defines a recipient identity data group. Each group is normally represented as a section of fields on the UI. 'groupLabel' is the UI test to display as a name for this section. 'mandatory' indicates whether all section is mandatory. 'elementName' is the name of the element in the request for the corresponding section."
      },
      "IdNumber": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "In this field, the identification number (from the document type identified in the field recipientDetail.idType) should be provided.",
        "example": "1234567890"
      },
      "ValidatePayoutWalletRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-1"
          }
        ]
      },
      "RecipientIndividual-3": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-2"
          },
          "lastName": {
            "description": "Recipient last name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "ValidatePayoutWalletRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-2"
          }
        ]
      },
      "IdentityGroup-2": {
        "title": "IdentityGroup",
        "required": [
          "groupLabel",
          "groupName",
          "identityFields",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the metadata element/enum.\nThis generic Identity Group object can represent either 'Recipient Identity Field Group object' or 'Bank Account Registration Field Group object' . \nEnum value signifies the particular metadata element. \n\nFor example : \n a) if enum is \"address\", this can contain array of 'IdentityField' object where each object can represent elements like addressLine1, addressLine2, city, countryCode, postalCode etc    \n\n b) enum can be \"identificationList\", which contains array of \"IdentityField' objects, one of the IdentityField object can have elementName=\"idType\" and inputType=\"list\", in this scenario array of IdentityListItem will have \n [\n   {\n     \"label\": \"Passport\",\n     \"value\": \"Passport\"\n   },\n   {\n     \"label\": \"National ID Card\",\n     \"value\": \"National ID Card\"\n   },\n   {\n     \"label\": \"Driving License\",\n     \"value\": \"Driving License\"\n   }\n ], \n second 'IdentityField' Object -> elementName as \"identificationNumber\" with inputType=\"text\" \n third 'IdentityField' Object -> elementName as \"identificationCountry\" with inputType=\"text\" \n fourth 'IdentityField' Object -> elementName as \"validFromDate\" with inputType=\"text\"\n fifth  'IdentityField' Object -> elementName as \"validToDate\" with inputType=\"text\" and so on.\n\n c) If enum is \"additionalData\",this will have array of two 'IdentityField' objects, one representing 'additionalDataKey' and other one 'additionalDataValue'.\n\n d) If enum is \"name\", \"middleName\" may be required for some countries (e.g. Africa). This can be accommodated by appending a space and then middleName to <firstName> \n",
            "enum": [
              "bank",
              "address",
              "name",
              "additionalData",
              "identificationList",
              "legalEntityIdentity",
              "contactInfo",
              "birthInfo"
            ]
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the identity group is mandatory."
          },
          "groupLabel": {
            "type": "string",
            "description": "Displays a label for this group of identity fields."
          },
          "identityFields": {
            "type": "array",
            "description": "This type defines a list of recipient identity fields.",
            "items": {
              "$ref": "#/components/schemas/IdentityField"
            }
          }
        },
        "description": "This type defines a recipient identity data group. Each group is normally represented as a section of fields on the UI. 'groupLabel' is the UI test to display as a name for this section. 'mandatory' indicates whether all section is mandatory. 'elementName' is the name of the element in the request for the corresponding section."
      },
      "RecipientIndividual-4": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient, conditionally required when firstName and lastName are not provided",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-3"
          },
          "lastName": {
            "description": "Recipient last name, conditionally required when name is not provided\n\nISO20022 field name: Creditor Last Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name, conditionally required when name is not provided\n\nISO20022 field name: Creditor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "RecipientIndividual-1": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          },
          "lastName": {
            "description": "Recipient last name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "PayoutNotificationFailedRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponseInNotificationForFailedRequest"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "ExpectedPostingDate-1": {
        "maxLength": 10,
        "minLength": 10,
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nISO20022 field name: Transaction Information And Status - Effective Interbank Settlement Date\n",
        "format": "date",
        "example": "1980-02-01"
      },
      "RecipientIndividual-2": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual and \"C\" for Company. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          },
          "lastName": {
            "description": "Recipient last name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "SignedAmount": {
        "type": "number",
        "format": "double",
        "example": 12.34
      },
      "PayoutNotificationFailedRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "RecipientDetailMetadata": {
        "title": "RecipientDetail",
        "required": [
          "identityGroups"
        ],
        "type": "object",
        "properties": {
          "identityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityGroup"
            }
          }
        }
      },
      "AccountTransactionDetail-7": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-2"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "AccountTransactionDetail-6": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-2"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ContactNumber": {
        "maxLength": 16,
        "minLength": 1,
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "Contact phone number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n(note, refer ISO spec E.164)\n",
        "example": "447700123456"
      },
      "AccountTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "paymentRail": {
            "type": "string",
            "description": "Indicates the payment rails preferred for the payout transaction.",
            "example": "SWIFT",
            "enum": [
              "SWIFT"
            ]
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "403ErrorResponseObject": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 403
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "IndividualsName": {
        "maxLength": 70,
        "minLength": 3,
        "type": "string",
        "description": "Full name of Individual",
        "example": "Visa"
      },
      "RecipientAccountPayoutAddress-2": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Street Name \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Floor\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "RecipientAccountPayoutAddress-1": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Street Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Floor\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "ValidatePayoutFromOriginator429Response": {
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "BusinessApplicationId-1": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP, FT, WT; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP, PS;\n",
        "example": "PP"
      },
      "ValidPayoutWithNetworkResponse": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. Only applicable for Wallet Payouts. \n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "ClientDrivenConditionsAndFields": {
        "required": [
          "condition",
          "presence"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "description": "At least one of the 'fields'/'oneOfFields'/'anyOfFields' groups will be populated.\n",
            "items": {
              "$ref": "#/components/schemas/FieldClientDriven"
            }
          },
          "presence": {
            "type": "string",
            "enum": [
              "required",
              "recommended",
              "conditional",
              "optional"
            ]
          },
          "condition": {
            "type": "string",
            "description": "This is a client defined condition ID. Note that, unlike the \"condition\" parameter used in the rules{} section, this condition-id does not refer to any conditions defined within the conditions[] array."
          },
          "anyOfFields": {
            "$ref": "#/components/schemas/OneOfFieldsClientDriven"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the condition."
          },
          "oneOfFields": {
            "$ref": "#/components/schemas/OneOfFieldsClientDriven"
          }
        }
      },
      "FlexibleAmountLimit": {
        "type": "number",
        "description": "Liquidity limit.",
        "format": "double"
      },
      "CancelPayout500Response": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error.",
                "example": "InternalServerError"
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code",
                "example": 500
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error.",
                "example": "Internal Server Error.  Please contact your Visa Representative."
              }
            }
          }
        }
      },
      "403ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/403ErrorResponseObject"
              }
            ]
          }
        }
      },
      "FlexibleAmountUtilized": {
        "type": "number",
        "description": "Amount of liquidity that has been utilized.",
        "format": "double"
      },
      "LockQuoteRequest": {
        "required": [
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "initiatingPartyId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "integer",
            "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction",
            "example": 476110
          }
        }
      },
      "ValidateAccountTransactionDetail-2": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-2"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateAccountTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "paymentRail": {
            "type": "string",
            "description": "Indicates the payment rails preferred for the payout transaction.",
            "example": "SWIFT",
            "enum": [
              "SWIFT"
            ]
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateAccountTransactionDetail-3": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-2"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidatePayoutWalletRequest-6": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-6"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-6"
          }
        ]
      },
      "AdditionalDataValue": {
        "maxLength": 100,
        "minLength": 1,
        "type": "string",
        "description": "Value of the field."
      },
      "ValidatePayoutWalletRequest-7": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-7"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-7"
          }
        ]
      },
      "BusinessApplicationId-2": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP, FT, WT; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n",
        "example": "PP"
      },
      "ValidatePayoutAccountRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest"
          }
        ]
      },
      "LimitReachedFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "initiatingPartyId",
          "limitReachedDetails",
          "notificationDateTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "LIMIT_REACHED"
            ]
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "limitReachedDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LimitReachedDetails"
            }
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "SenderTransactorDetail": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual"
          },
          {
            "$ref": "#/components/schemas/SenderCompany"
          }
        ]
      },
      "SenderReferenceNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional: If the sender intends to fund the transaction with a non-financial instrument (for example, cash), then a reference number unique to the sender is required. This field is required if senderAccountNumber is not sent.\n",
        "example": "John"
      },
      "AccountQueryResponse-9": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-8"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse"
          },
          {
            "$ref": "#/components/schemas/QueryPendingCancelledResponse"
          }
        ]
      },
      "Field": {
        "required": [
          "$ref",
          "name",
          "presence"
        ],
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "this refers to a JSON Schema definition within the document"
          },
          "name": {
            "type": "string",
            "description": "If 'name' contains absolute JSON path (i.e. '$' at the beginning), it defines the JSON path of the field; otherwise, concatenate \\<path\\>+ \".\" +\\<name\\> to form an absolute JSON path."
          },
          "path": {
            "type": "string",
            "description": "If provided the \\<path\\> + \".\" + \\<name\\> will form a JSONPath string. The path provided at the field level takes precedence over the path provided at the rule level."
          },
          "presence": {
            "type": "string",
            "enum": [
              "required",
              "recommended",
              "conditional",
              "optional"
            ]
          },
          "condition": {
            "type": "string",
            "description": "This refers to a 'id' value of a condition within the document"
          }
        }
      },
      "ValidatePayoutFromOriginatorRequest": {
        "required": [
          "originatorDetail",
          "recipientDetail",
          "senderDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "senderDetail": {
            "required": [
              "address",
              "sourceOfFunds"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "Sender full name or company name\n\nISO20022 field name: Ultimate Debtor Name\nP2A and P2W: Conditional (Mandatory if sender type is C or if sender type is I and sender first name and last name are not provided). Company name must be a minimum of 2 characters in length. Individuals name must be a minimum of 3 characters in length.<br>This field must not contain exclusively numeric characters<br>Individual's name in this field (when sender type is I) must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "type": {
                "type": "string",
                "description": "Identifies the type of sender - Individual or Company \n\n\nISO20022 field name: Ultimate Debtor Identification Type\n(Valid values : “I”=Individual, “C”=Company)",
                "enum": [
                  "I",
                  "C"
                ]
              },
              "address": {
                "required": [
                  "addressLine1",
                  "city",
                  "country"
                ],
                "type": "object",
                "properties": {
                  "city": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address city\n\nISO20022 field name: Ultimate Debtor Address Town Name"
                  },
                  "state": {
                    "maxLength": 25,
                    "minLength": 2,
                    "type": "string",
                    "description": "Sender address state\n\nISO20022 field name: Ultimate Debtor Address Country Sub-division\nnConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Sender address country\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Ultimate Debtor Address Country"
                  },
                  "postalCode": {
                    "maxLength": 10,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address postal code\n\nISO20022 field name: Ultimate Debtor Address Postal Code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "addressLine1": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address line 1\n\nISO20022 field name: Ultimate Debtor Address Line 1"
                  },
                  "addressLine2": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address line 2\n\nISO20022 field name: Ultimate Debtor Address Line 2\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  }
                }
              },
              "lastName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender last name\n\nISO20022 field name: Ultimate Debtor Last Name\nSender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "firstName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender first name\n\nISO20022 field name: Ultimate Debtor First Name\nSender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "cityOfBirth": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender city of birth\n\nISO20022 field name: Ultimate Debtor City of Birth"
              },
              "dateOfBirth": {
                "maxLength": 10,
                "minLength": 10,
                "pattern": "^\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d$",
                "type": "string",
                "description": "Sender date of birth\n\nISO20022 field name: Ultimate Debtor Birth Date\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "contactEmail": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address"
              },
              "contactNumber": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender contact number\nFormat: pattern \\+[0-9]{1,3}-[0-9()+\\-]{1,30}\n\nISO20022 field name: Ultimate Debtor Contact Phone Number"
              },
              "sourceOfFunds": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout. \nValid values are:\n01 =  Visa credit \n02 =  Visa debit\n03 =  Visa prepaid\n04 =  Cash\n05 =  Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 =  Credit accounts other than those  linked to a Visa card (includes credit cards and proprietary credit lines)\n\nISO20022 field name: Debtor Account Type Source of Funds \n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account."
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
                "items": {
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Debtor Remittance Information Document Name\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Debtor Remittance Information Document Description\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    }
                  }
                }
              },
              "countryOfBirth": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "Sender country of birth\n\nISO20022 field name: Ultimate Debtor Country of Birth\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "sourceOfIncome": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender source of income\n\nISO20022 field name: Ultimate Debtor Source of Income"
              },
              "identificationList": {
                "type": "array",
                "description": "Identification list of sender",
                "items": {
                  "type": "object",
                  "properties": {
                    "idType": {
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "string",
                      "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Ultimate Debtor Identification Code\n\nValid values : P- Passport D-Driving License, N-National Id, T-Tax Id, L-Legal Entity Registration Number, F-Foreign Id",
                      "enum": [
                        "P",
                        "D",
                        "N",
                        "T",
                        "L",
                        "F"
                      ]
                    },
                    "idNumber": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Ultimate Debtor Identification\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    },
                    "idIssueCountry": {
                      "maxLength": 3,
                      "minLength": 3,
                      "pattern": "^\\d\\d\\d$",
                      "type": "string",
                      "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Ultimate Debtor Identification Issuer Country\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    }
                  }
                }
              },
              "senderAccountNumber": {
                "maxLength": 34,
                "minLength": 1,
                "type": "string",
                "description": "A sender account number is used to uniquely identify the sender’s account. \nThis field is Mandatory if a senderReferenceNumber is not sent.\nNote:\n1. Originators should provide either a sender reference number or a sender account number but not both.\n2. Originators should not send any PANs in this field.\n\nISO20022 field name: Debtor Account Number"
              },
              "senderReferenceNumber": {
                "maxLength": 16,
                "minLength": 1,
                "type": "string",
                "description": "P2A: A sender reference number is used to uniquely identify the person or entity funding the transaction. \nThis field is Mandatory if a senderAccountNumber is not sent.\nNote: \n1. Originators should not send any PANs in this field.\n2. Originators should provide either a sender reference number or a sender account number but not both.\n\nISO20022 field name: Debtor Reference Number"
              },
              "beneficiaryRelationship": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender relationship with the recipient\n\nISO20022 field name: Ultimate Debtor Beneficiary Relationship"
              }
            }
          },
          "recipientDetail": {
            "required": [
              "payoutMethod"
            ],
            "type": "object",
            "properties": {
              "bank": {
                "required": [
                  "accountName",
                  "accountNumber",
                  "accountNumberType",
                  "bankName",
                  "countryCode",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "BIC": {
                    "maxLength": 11,
                    "minLength": 8,
                    "type": "string",
                    "description": "Recipient bank account Business Identifier Code (BIC) \n\nISO20022 field name: Creditor Agent Financial Institution BICFI\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "bankCode": {
                    "maxLength": 12,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account bank code\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "bankName": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name"
                  },
                  "branchCode": {
                    "maxLength": 12,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account branch code\n\nISO20022 field name: Creditor Agent Branch Identification\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "accountName": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account name i.e. accountholder name as recorded on recipient bank account\n\nISO20022 field name: Creditor Account Name\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "accountType": {
                    "type": "string",
                    "description": "Recipient bank account type\n\n1 - Checking\n2 - Saving\n3 - Maestra\n4 - Vista\n5 - Loan\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)",
                    "enum": [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5"
                    ]
                  },
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient bank account country code\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Agent Financial Institution Country Code\n(Refer to Payouts Endpoint Guide on country-specific codes)"
                  },
                  "bankCodeType": {
                    "type": "string",
                    "description": "Recipient bank account bank code type\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)",
                    "enum": [
                      "ABA",
                      "SORT_CODE",
                      "DEFAULT"
                    ]
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient bank account currency code\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: Creditor Account Currency\nMandatory (Refer to Payouts Endpoint Guide on country-specific currency codes)"
                  },
                  "accountNumber": {
                    "maxLength": 34,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account number\n\nISO20022 field name: Creditor Account Number or IBAN\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "accountNumberType": {
                    "type": "string",
                    "description": "Recipient bank account number type \n\nISO20022 field name: Creditor Financial Institution Account Number Type\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values: \"IBAN\" and \"DEFAULT\"",
                    "enum": [
                      "IBAN",
                      "DEFAULT"
                    ]
                  }
                },
                "description": "If payout is push to bank account, this object is required(P2A only)"
              },
              "name": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "Recipient full name or company name\n\nISO20022 field name: Creditor Name\nConditional (Mandatory if recipient type is C or if recipient type is I and recipient first name and last name are not provided). Company name must be a minimum of 2 characters in length. Individuals name must be a minimum of 3 characters in length.<br>This field must not contain exclusively numeric characters<br>Individual's name in this field (when recipient type is I) must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "type": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Identifies the type of recipient - Individual or Company \n\n\nISO20022 field name: Creditor Identification Type\nMandatory (Valid values : “I”=Individual, “C”=Company)",
                "x-variant": "| enumeration"
              },
              "address": {
                "type": "object",
                "properties": {
                  "city": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "description": "RRecipient address city\n\nISO20022 field name: Creditor Address Town Name\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "state": {
                    "maxLength": 25,
                    "minLength": 2,
                    "type": "string",
                    "description": "Recipient address state\n\nISO20022 field name: Creditor Address Country Sub-division\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient address country\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Address Country\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "postalCode": {
                    "maxLength": 16,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address postal code\n\nISO20022 field name: Creditor Address Postal Code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "addressLine1": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address line 1\n\nISO20022 field name: Creditor Address Line 1\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  },
                  "addressLine2": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address line 2\n\nISO20022 field name: Creditor Address Line 2\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                  }
                }
              },
              "lastName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient last name\n\nISO20022 field name: Creditor Last Name\nConditional (Mandatory if recipient full name is not provided)<br>The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "firstName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient first name\n\nISO20022 field name: Creditor First Name\nConditional (Mandatory if recipient full name field is not provided)<br>The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>"
              },
              "cityOfBirth": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n"
              },
              "dateOfBirth": {
                "type": "string",
                "description": "Recipient date of birth\n\nISO20022 field name: Creditor Birth Date\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)",
                "format": "date"
              },
              "contactEmail": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "Recipient email address\n\nISO20022 field name: Creditor Contact Email Address"
              },
              "payoutMethod": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Originating Entity must indicate the payout method i.e.Push to Account\n\nValid values:\n“B” – Push to Bank account\n\nISO20022 field name: n/a",
                "x-variant": "| enumeration"
              },
              "contactNumber": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Recipient contact number, required in certain markets\nFormat: pattern \\+[0-9]{1,3}-[0-9()+\\-]{1,30}\n\nISO20022 field name: Creditor Contact Phone Number\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Creditor Remittance Information Document Name\n"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Creditor Remittance Information Document Description\n"
                    }
                  }
                }
              },
              "countryOfBirth": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "Recipient country of birth\n\nISO20022 field name: Creditor Country of Birth\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "identificationList": {
                "type": "array",
                "description": "Identification list of recipient",
                "items": {
                  "type": "object",
                  "properties": {
                    "idType": {
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "string",
                      "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Creditor Identification Code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values : P- Passport D-Driving License, N-National Id, T-Tax Id, L-Legal Entity Registration Number, F-Foreign Id",
                      "enum": [
                        "P",
                        "D",
                        "N",
                        "T",
                        "L",
                        "F"
                      ],
                      "x-variant": "| enumeration"
                    },
                    "idNumber": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Creditor Identification\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    },
                    "idIssueCountry": {
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Identification Issuer Country\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
                    }
                  }
                }
              }
            }
          },
          "originatorDetail": {
            "required": [
              "address",
              "bankId",
              "merchantCategoryCode",
              "originatorId",
              "originatorName"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. Note: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification\n\n"
              },
              "address": {
                "required": [
                  "country"
                ],
                "type": "object",
                "properties": {
                  "state": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Originating Entity State Code\nISO20022 field name: Debtor State\nConditional (Required if Originating Entity country is US or Canada)"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Originating Entity country code. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Debtor Country"
                  },
                  "postalCode": {
                    "maxLength": 14,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity Postal Code \nISO20022 field name: Debtor Postal Code\nmandatory only for Originators in US and Canada.\nConditional (Required if Originating Entity country is US or Canada)"
                  },
                  "addressLine": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity address line\nISO20022 field name: N/A"
                  }
                }
              },
              "bankBIC": {
                "maxLength": 11,
                "minLength": 8,
                "type": "string",
                "description": "Business Identifier Code (BIC) of the Sponsor FI (Acquirer)\nISO20022 field name: Debtor Agent FI BIC\n"
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account transactions. The Originating Entity should populate Card Acceptor Terminal ID (CAID)  for Push to Card transactions. \nISO20022 field name: Debtor - Originating Entity Identification\n"
              },
              "originatorBIC": {
                "maxLength": 11,
                "minLength": 1,
                "type": "string",
                "description": "Business Identifier Code (BIC) of the Originating entity\nISO20022 field name: Debtor BIC\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)."
              },
              "originatorName": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "The legal name of the merchant or originating entity sending the payment instruction to Visa.\nISO20022 field name: Debtor Name"
              },
              "paymentFacilitator": {
                "type": "object",
                "properties": {
                  "id": {
                    "maxLength": 11,
                    "minLength": 8,
                    "type": "string",
                    "description": "Business Identifier Code (BIC) of the Payment Facilitator i.e. intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Identification"
                  },
                  "name": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "The legal name of any intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Name\nConditional (Mandatory if payment facilitator is touching the funds)"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "The country of any intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Country\nConditional (Mandatory if payment facilitator is touching the funds)"
                  }
                }
              },
              "merchantCategoryCode": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Code describing the merchant's type of business product or service known as the merchant category code (MCC). Codes are listed in the Visa Core Rules and Visa Product and Service Rules.\nISO20022 field name: Debtor Other Identification\n"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "businessApplicationId",
              "localTransactionDateTime",
              "transactionAmount",
              "transactionCurrencyCode"
            ],
            "type": "object",
            "properties": {
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - EndtoEnd Identification"
              },
              "payoutSpeed": {
                "type": "string",
                "description": "Originating Entity to indicate the desired payout speed for the payment. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Instruction Priority\n",
                "enum": [
                  "STANDARD",
                  "PREMIUM"
                ]
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
                "items": {
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Remittance Information Transaction Additional Details - Name\n"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Remittance Information Transaction Additional Details - Value\n"
                    }
                  }
                }
              },
              "purposeOfPayment": {
                "maxLength": 12,
                "minLength": 1,
                "type": "string",
                "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nISO20022 field name: Purpose of Payment\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - Transaction Identification"
              },
              "transactionAmount": {
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient bank account or card.  Expressed in the currency specified in transaction currency code. \n\nISO20022 field name:  Transaction Information And Status - Instructed Amount\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for country-specific currency minor units.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "statementNarrative": {
                "maxLength": 140,
                "minLength": 1,
                "type": "string",
                "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment.\nText will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account (depends on recipient bank's process)\n\nISO20022 field name: Remittance Information Unstructured\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)"
              },
              "businessApplicationId": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Accounts:\n-\tMoney transfer: AA, PP; \n-\tNon-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n\nISO20022 field name: Payment Category Purpose"
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set\n\nISO20022 field name: N/A\n"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name:  Transaction Information And Status - Instructed Amount Currency Code"
              },
              "localTransactionDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d",
                "type": "string",
                "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 1,
                "pattern": "\\^d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal.\n\nThe format is recommended to be ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Transaction Information And Status - Original Instruction Identification"
              }
            }
          }
        }
      },
      "PayoutNotificationRequestStatus": {
        "type": "string",
        "description": "Status of the transaction being queried\n\nISO20022 field name: Transaction Status\n"
      },
      "AccountQueryResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-1"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-1"
          },
          {
            "$ref": "#/components/schemas/QueryPendingCancelledResponse-1"
          }
        ]
      },
      "AccountPayoutRequest-7": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-7"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-7"
          }
        ]
      },
      "TimestampType": {
        "type": "string",
        "description": "ISO 8601 formatted UTC Timestamp, YYYY-MM-DDThh:mm:ss.sssTZD. TZD is either Z or +/-00:00\n\nexample: 2020-05-05T12:12:12.000Z, or 1997-07-16T19:20:30.45+00:00\n\nISO20022 field name: Transaction Information And Status - Message Creation Date Time\n",
        "format": "date-time"
      },
      "PayoutNotification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest"
          }
        ]
      },
      "AccountPayoutRequest-6": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-6"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-6"
          }
        ]
      },
      "NotificationsErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationsErrorResponse"
              }
            ]
          }
        }
      },
      "BIC": {
        "maxLength": 11,
        "minLength": 8,
        "type": "string",
        "description": "Business Identifier Code (BIC) of the Sponsor FI (Acquirer)\n\nISO20022 field name: Debtor Agent FI BIC\n"
      },
      "AccountQueryResponse-6": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-6"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse"
          },
          {
            "$ref": "#/components/schemas/QueryPendingCancelledResponse"
          }
        ]
      },
      "AccountPayoutRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-1"
          }
        ]
      },
      "AccountQueryResponse-7": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-7"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-2"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingResponse-2"
          }
        ]
      },
      "RecipientCompany": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain all numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress"
          }
        }
      },
      "AccountPayoutRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-2"
          }
        ]
      },
      "CancelPayout503Response": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error.",
                "example": "ServiceUnavailable"
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code",
                "example": 503
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error.",
                "example": "ServiceUnavailable"
              }
            }
          }
        }
      },
      "ValidatePayoutResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-1"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-1"
          }
        ]
      },
      "CancelPayoutRequest": {
        "type": "object",
        "properties": {
          "transactionDetail": {
            "type": "object",
            "properties": {
              "narrative": {
                "maxLength": 140,
                "minLength": 1,
                "type": "string",
                "description": "This is a short statement explaining the reason for cancellation\n P2A: Optional",
                "example": "testing narrative"
              }
            }
          }
        }
      },
      "BalanceNotification": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          }
        }
      },
      "accountVerificationRequired": {
        "type": "boolean",
        "description": "Indicates whether account verification services are required.If True, account will be verified.If False, account verification will be skipped. Applicable only for Accounts."
      },
      "ReturnReasonCodeDetailsType-1": {
        "type": "string",
        "description": "Indicates the PSP return type when the payout is returned. Refer to PSP Return Type\n\nISO20022 field name: Payment Return - PSP Return Type\n",
        "enum": [
          "REJECTED",
          "RETURNED"
        ]
      },
      "ValidatePayoutResponse-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-2"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-1"
          }
        ]
      },
      "ValidatePayoutResponse-6": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-2"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-4"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-2"
          }
        ]
      },
      "AccountQuerySuccessResponse-8": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-2"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "Info": {
        "required": [
          "title",
          "version",
          "versionDate"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title indicating the country of the metadata response"
          },
          "version": {
            "type": "string",
            "description": "This is the version of the metadata response. \nIt is in the format \\<major-version-number\\>.\\<minor-version-number\\>.\\<minor-sub-version-number\\>.\n\n* minor-sub-version-number updates are documentation updates only and should not influence the processing of a payout transaction. Example: changes to the description of Purpose of Payment code.\n\n* minor-version-number updates indicate backward compatible changes in the route validation rules on a payout transaction. Example: addition of a new Purpose of Payment code.\n\n* major-version-number updates indicate backward incompatible changes in the route validation rules on a payout transaction. Such changes are usually regulatory in nature or due to partner migration on Visa's backend. Example: Purpose of Payment code changing from a \"conditional\"/ \"recommended\" to a \"required\" field.\n"
          },
          "description": {
            "type": "string"
          },
          "versionDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "AccountQuerySuccessResponse-7": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "AccountNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains recipient’s account number at the bank.",
        "example": "3012345678901432"
      },
      "AccountQuerySuccessResponse-6": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus-2"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail-1"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-2"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "AccountQuerySuccessResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus-1"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail-1"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "deliveredDateTime": {
                "$ref": "#/components/schemas/DeliveredDateTime"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "localSchemeTransactionId": {
                "$ref": "#/components/schemas/LocalSchemeTransactionId"
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "AccountPayoutResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse"
          }
        ]
      },
      "TransactionalStructuredRemittance": {
        "maxItems": 999,
        "type": "array",
        "items": {
          "required": [
            "amount",
            "amountCurrencyCode"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "description": "This is the amount of money remitted for the referred document. Note that this field accepts signed amounts. A positive amount value indicates amounts flowing in the direction of the payout transaction, and due to the recipient . A negative amount value indicates the amount due back to the sender, i.e. a reduction in the total remitted amount. An amount value without the explicit mention of sign would be assumed positive.\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedAmount"
                }
              ]
            },
            "taxAmount": {
              "example": 1.23,
              "allOf": [
                {
                  "$ref": "#/components/schemas/Amount"
                }
              ]
            },
            "taxCurrencyCode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCurrencyCode"
                }
              ]
            },
            "creditorReference": {
              "required": [
                "code",
                "number"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 4,
                  "minLength": 4,
                  "type": "string",
                  "description": "Refer to PACS.008 SRI Creditor Reference Type codes",
                  "example": "SCOR",
                  "enum": [
                    "RADM",
                    "RPIN",
                    "FXDR",
                    "DISP",
                    "PUOR",
                    "SCOR"
                  ]
                },
                "number": {
                  "maxLength": 35,
                  "minLength": 1,
                  "type": "string",
                  "example": "TLD1215"
                }
              }
            },
            "amountCurrencyCode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCurrencyCode"
                }
              ]
            },
            "referredDocumentInformation": {
              "maxItems": 1,
              "type": "array",
              "items": {
                "required": [
                  "code",
                  "number"
                ],
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Refer to PACS.008 SRI Referred Document Type codes. Only 'CINV' and 'CREN' are supported values.",
                    "example": "CINV",
                    "enum": [
                      "MSIN",
                      "CNFA",
                      "DNFA",
                      "CINV",
                      "CREN",
                      "DEBN",
                      "HIRI",
                      "SBIN",
                      "CMCN",
                      "SOAC",
                      "DISP",
                      "BOLD",
                      "VCHR",
                      "AROI",
                      "TSUT",
                      "PUOR"
                    ]
                  },
                  "number": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "example": "24895544"
                  },
                  "relatedDate": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          }
        }
      },
      "ValidPayoutResponse": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds. \n",
            "enum": [
              "VALID"
            ]
          }
        }
      },
      "SettlementDueBreachedDetails": {
        "required": [
          "currencyCode",
          "flexibleAccountFrozen",
          "originalDueDateTime",
          "totalAmountDue",
          "vplContact"
        ],
        "type": "object",
        "properties": {
          "vplContact": {
            "$ref": "#/components/schemas/VplContact"
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "totalAmountDue": {
            "$ref": "#/components/schemas/TotalAmountDue"
          },
          "originalDueDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "flexibleAccountFrozen": {
            "$ref": "#/components/schemas/FlexibleAccountFrozen"
          }
        }
      },
      "NearLimitReachedDetails": {
        "required": [
          "currencyCode",
          "flexibleAmountLimit",
          "flexibleAmountRemaining",
          "flexibleAmountUtilized"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "$ref": "#/components/schemas/AlphaCurrencyCode"
          },
          "flexibleAmountLimit": {
            "$ref": "#/components/schemas/FlexibleAmountLimit"
          },
          "flexibleAmountUtilized": {
            "$ref": "#/components/schemas/FlexibleAmountUtilized"
          },
          "flexibleAmountRemaining": {
            "$ref": "#/components/schemas/FlexibleAmountRemaining"
          }
        }
      },
      "SenderAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "CurrentDueDetails": {
        "required": [
          "currencyCode",
          "dueDateTime",
          "totalAmountDue",
          "vplContact"
        ],
        "type": "object",
        "properties": {
          "vplContact": {
            "$ref": "#/components/schemas/VplContact"
          },
          "dueDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/AlphaCurrencyCode"
          },
          "totalAmountDue": {
            "$ref": "#/components/schemas/TotalAmountDue"
          }
        }
      },
      "WalletPayoutRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-1"
          }
        ]
      },
      "ReturnReasonDetails": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription"
          }
        }
      },
      "WalletPayoutRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-2"
          }
        ]
      },
      "WalletPayoutRequest-7": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-7"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-7"
          }
        ]
      },
      "AccountBalanceWithTimestamp": {
        "required": [
          "accountId",
          "balance"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "balanceTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "lastTransactionTimestamp": {
            "description": "The timestamp of the last money movement on the client's account. \n\nThis is a valid ISO 8601 timestamp, such as YYYY-MM-DDThh:mm:ss.sss±hh:mm.                  \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "500ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/500ErrorResponseObject"
              }
            ]
          }
        }
      },
      "WalletPayoutRequest-6": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-6"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-6"
          }
        ]
      },
      "DateOfBirth": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "This field should contain recipient’s date of birth.",
        "format": "date"
      },
      "RecipientIndividual": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient, conditionally required when firstName and lastName are not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameI"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress"
          },
          "lastName": {
            "description": "Recipient last name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "PayoutFailedAfter202InSendPayout": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponseInNotificationForFailedRequest"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "AccountQuerySuccessResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "AmountWithZero": {
        "minimum": 0,
        "type": "number",
        "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType. Threshold value would be zero for LIQUIDITY_FAILURE eventType.\n",
        "format": "double",
        "example": 12.34
      },
      "SettlementDueBreachedFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "initiatingPartyId",
          "nextDueDetails",
          "notificationDateTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "SETTLEMENT_DUE_BREACHED"
            ]
          },
          "nextDueDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementDueBreachedDetails"
            }
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "IdType": {
        "type": "string",
        "description": "When present, this field contains the type of identification document.\n\nValid values:\n* `P` - Passport\n* `D` - Driving License\n* `N` - National Id\n* `T` - Tax Id\n* `L` - Legal Entity Registration Number\n* `F` - Foreign Id\n",
        "example": "P",
        "enum": [
          "P",
          "D",
          "N",
          "T",
          "L",
          "F"
        ]
      },
      "PendingCancelledTransactionStatus": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled when in pending status\n",
        "enum": [
          "PENDING",
          "PENDING_CANCELLATION",
          "CANCELLED"
        ]
      },
      "TransactionReferences": {
        "type": "array",
        "description": "This section returns client-driven or Visa-driven fields that are not required to be input by end-user (sender) into a UI, but should be submitted as part of Send Payout.\n",
        "items": {
          "$ref": "#/components/schemas/PayoutFieldDefinition"
        }
      },
      "MaxTransactionAmountEquivalent": {
        "type": "array",
        "items": {
          "required": [
            "currencyOfMaxAmount",
            "maxAmountValue"
          ],
          "type": "object",
          "properties": {
            "condition": {
              "type": "string",
              "description": "It refers to an 'id' value in the conditions[] array."
            },
            "maxAmountValue": {
              "type": "number",
              "description": "The maximum amount value allowed per transaction."
            },
            "currencyOfMaxAmount": {
              "type": "string",
              "description": "The (Alpha-3) ISO-4217 currency code of the maximum amount value allowed per transaction. This could be in recipient bank currency or in a more common currency like USD, EUR or GBP."
            }
          }
        }
      },
      "ReturnReasonCode-2": {
        "maxLength": 5,
        "minLength": 5,
        "type": "string",
        "description": "If the Transaction Status is RETURNED or REJECTED then Return reason code will be populated\n\nISO20022 field name: Payment Return - Reason Code  \n\nFor a complete list of reject/return codes and descriptions please visit <a href='/capabilities/visa-direct-account-and-wallet/docs-error-codes'>Visa Direct Account and Wallet - Error Codes</a> \n",
        "example": "RE303"
      },
      "PayoutNotificationReceivedRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "ReturnReasonCode-1": {
        "maxLength": 5,
        "minLength": 5,
        "type": "string",
        "description": "If the Transaction Status is RETURNED or REJECTED then Return reason code will be populated\n\nISO20022 field name: Payment Return - Reason Code  \n\nFor a complete list of reject/return codes and descriptions please visit <a href='/capabilities/visa-direct-account-and-wallet/docs-error-codes'>Visa Direct Account and Wallet - Error Codes</a>\n",
        "example": "RE303"
      },
      "AlphaCountryCode-1": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "ISO-3166 (Alpha-3) country code.",
        "example": "USA"
      },
      "ValidatePayoutFromOriginator500Response": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "PayoutAccountRequest": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail"
              }
            ]
          }
        }
      },
      "WalletVerificationDetail": {
        "required": [
          "accountIdentifierMatch"
        ],
        "type": "object",
        "properties": {
          "nameMatch": {
            "type": "string",
            "description": "Indicates if recipient name matches the wallet account name\n- STRONG_MATCH: The recipient name matches the wallet account holder name with high confidence.\n- NO_MATCH: The recipient name does not match the wallet account holder name.    \n- NOT_SUPPORTED: The Wallet Operator does not support name matching functionality.   \n",
            "enum": [
              "STRONG_MATCH",
              "NO_MATCH",
              "NOT_SUPPORTED"
            ]
          },
          "accountIdentifierMatch": {
            "type": "string",
            "description": "Indicates if the account identifier matches the recipient's wallet account identifier\n- YES: Valid\n- NO: Not valid\n"
          }
        }
      },
      "AccountName": {
        "maxLength": 70,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains recipient’s account name at the bank.",
        "example": "John Doe"
      },
      "RuleWithFields": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "It defines an unique name of a rule"
          },
          "path": {
            "type": "string",
            "description": "It defines the rule-level JSON path"
          },
          "fields": {
            "type": "array",
            "description": "Conditional:\n  \n- It defines field's group. At least one of the 'fields'/'oneOfFields'/'anyOfFields' groups will be populated.\n",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "condition": {
            "type": "string",
            "description": "It refers to an 'id' value in the conditions[] array."
          },
          "anyOfFields": {
            "$ref": "#/components/schemas/OneOfFields"
          },
          "oneOfFields": {
            "$ref": "#/components/schemas/OneOfFields"
          }
        }
      },
      "SenderIndividual-2": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender, conditionally required when firstName and lastName are not provided.",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n\nISO20022 field name: Debtor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name, conditionally required when name is not provided\n\nISO20022 field name: Ultimate Debtor Last Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name, conditionally required when name is not provided\n\nISO20022 field name: Ultimate Debtor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Sender city of birth\n\nISO20022 field name: Ultimate Debtor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Birth Date \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Sender country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Ultimate Debtor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "SenderIndividual-1": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\" <br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name<br>Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\" <br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name<br>Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\" <br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Sender city of birth\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor City of Birth\" <br>For 3rd party payments: \"Debtor City of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Birth Date\" <br>For 3rd party payments: \"Debtor Birth Date\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Sender country of birth\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Country of Birth\" <br>For 3rd party payments: \"Debtor Country of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "StatementNarrative": {
        "maxLength": 140,
        "minLength": 1,
        "type": "string",
        "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment. Text will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account or wallet statement. \nNot all wallet operators support a statement narrative.\n\nConditional - (Refer to Payouts Endpoint Guide on country-specific required fields and lengths).\n\nISO20022 field name: Remittance Information Unstructured       \n",
        "example": "testing narrative"
      },
      "ServiceDetail": {
        "properties": {
          "traceable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is traceable"
          },
          "recallable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is recallable"
          },
          "paymentRail": {
            "type": "string",
            "description": "Indicates the payment rail used for the payout transaction",
            "enum": [
              "ACH",
              "RTP",
              "RTGS",
              "SWIFT"
            ]
          }
        }
      },
      "PayoutReturnRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType-1"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "CreateQuoteResponse": {
        "required": [
          "buyAmount",
          "buyCurrency",
          "exchangeRate",
          "quoteExpiryDateTime",
          "quoteId",
          "quoteStatus",
          "sellAmount",
          "sellCurrency"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "type": "integer",
            "description": "This field contains the unique number representing the FX Quote.",
            "format": "int64",
            "example": 9894287058225
          },
          "buyAmount": {
            "type": "number",
            "description": "The transaction amount in buy currency.",
            "format": "double",
            "example": 8000
          },
          "sellAmount": {
            "type": "number",
            "description": "The transaction amount in sell currency.",
            "format": "double",
            "example": 100
          },
          "buyCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "INR"
          },
          "quoteStatus": {
            "type": "string",
            "description": "A quote in PENDING state can be locked-in and executed before the given quoteExpiryDateTime value",
            "example": "live",
            "enum": [
              "PENDING"
            ]
          },
          "exchangeRate": {
            "type": "number",
            "description": "This represents exchange rate between provided currencies.",
            "format": "double",
            "example": 0.0125
          },
          "sellCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "EUR"
          },
          "quoteExpiryDateTime": {
            "type": "string",
            "description": "This timestamp represents the datetime value in UTC for which the quoteId is valid. YYYY-MM-DDThh:mm:ss.sssTZD. TZD is either Z or +/-00:00. For example: 2024-05-24T12:12:12.000Z, or 2024-05-24T12:12:12.000+00:00\n",
            "format": "date-time"
          }
        }
      },
      "QueryPayoutIdResponse200": {
        "required": [
          "originatorDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "type": "object",
            "properties": {
              "bank": {
                "required": [
                  "accountName",
                  "accountNumber",
                  "bankName",
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "bankName": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank name"
                  },
                  "accountName": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account name i.e. accountholder name as recorded on recipient bank account"
                  },
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient bank account country code\nFormat: 3-digit ISO-3166 (numeric) country code"
                  },
                  "accountNumber": {
                    "maxLength": 34,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account number"
                  }
                },
                "description": "This object is only relevant for P2A transactions."
              },
              "wallet": {
                "required": [
                  "accountIdentifier",
                  "accountIdentifierType",
                  "countryCode",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-3166 (numeric) country code"
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-4217 (numeric) currency code"
                  },
                  "operatorName": {
                    "type": "string",
                    "description": "This identifies the non bank wallet operator that has issued the account to the recipient and is going to receive and post the funds to the recipients account. Enum provided by Visa Direct to Wallet Operator.",
                    "enum": [
                      "WECHATPAY"
                    ]
                  },
                  "accountIdentifier": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "This identifies the identifier of the recipients account with the wallet operator to which the funds have to be deposited. (e.g., wallet address - phone/email/custom identifier that identifies the account with the digital wallet operator)\n-\tIf EMAIL then verify whether the Email is in valid Email format\n-\tIf PHONENUMBER then verify if the value is numeric , + at the beginning of the value will be considered as valid. e.g. +65123456789 (note, refer ISO spec E.164)\n-\tIf USERNAME then check whether it is a valid string. \n\nNote - An E.164 number has three components.\n1. The prefix +.\n2. A 1-3 digit country code.\n3. A subscriber number."
                  },
                  "accountIdentifierType": {
                    "type": "string",
                    "description": "This identifies type of account Identifier. Supported values are PHONENUMBER, EMAIL, USERNAME.",
                    "enum": [
                      "PHONENUMBER",
                      "EMAIL",
                      "USERNAME"
                    ]
                  }
                },
                "description": "This object is only relevant for P2W transactions."
              }
            }
          },
          "originatorDetail": {
            "required": [
              "bankId",
              "originatorId"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. Note: This is also referred to as the “Acquiring BIN” by Visa"
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account or Push to Wallet transactions and Card Acceptor Terminal ID (CAID) for Push to Card transactions.\n\nISO20022 field name: N/A\nP2A: Mandatory \nP2W: Mandatory \nP2C: N/A"
              },
              "merchantVerificationValue": {
                "type": "integer",
                "description": "Conditional The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.\n Note: This field is present if the MVV value was included on the Send Payout request.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "originalTransmissionDateTime",
              "payoutId",
              "retrievalReferenceNumber",
              "status",
              "statusUpdateTime",
              "systemTraceAuditNumber",
              "transactionAmount",
              "transactionCurrencyCode"
            ],
            "type": "object",
            "properties": {
              "authId": {
                "type": "integer",
                "description": "This is a unique authorization code for an approved transaction from Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "status": {
                "type": "string",
                "description": "Status of the transaction being queried\n\nP2C Valid Value are:\nCOMPLETED, IN_PROGRESS, FAILED, PENDING, CANCELLED\n\nStatus definition:\n- COMPLETED - Transaction was processed by Visa.\n- IN_PROGRESS - Transaction is in progress, being processed by Visa\n- FAILED - Transaction was received and rejected by Visa\n- PENDING - Transaction is pending for processing by Visa\n- CANCELLED - Transaction was cancelled as requested by the originating acquirer\n\nP2A Valid Value are:\nPAYMENT_RECEIVED, PENDING, PAYMENT_SENT, VALIDATION_FAILED, AWAITING_INFORMATION, PENDING_CANCELLATION, RETURNED, ERROR, DECLINED, CANCELLED\n\nP2A Status definition:\nPAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\nPENDING : Payout request is pending validation\nPAYMENT_SENT: The payout has been submitted to the Network partner by PSP\nVALIDATION_FAILED: Payout request failed validation and will not be processed further\nAWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed \nPENDING_CANCELLATION: Cancel payout request is pending\nRETURNED: Payout has been returned and funds are being refunded\nERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc.,\nDECLINED: Payout is declined by Visa and will not be proccessed further\nCANCELLED: Payout has been successfully cancelledn\n\nP2W Valid Value are:\nPAYMENT_RECEIVED, PENDING, PAYMENT_SENT, VALIDATION_FAILED, AWAITING_INFORMATION, PENDING_CANCELLATION, RETURNED, ERROR, DECLINED, CANCELLED\n\nP2W Status definition:\nPAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\nPENDING : Payout request is pending validation\nPAYMENT_SENT: The payout has been submitted to the Network partner by PSP\nVALIDATION_FAILED: Payout request failed validation and will not be processed further\nAWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed \nPENDING_CANCELLATION: Cancel payout request is pending\nRETURNED: Payout has been returned and funds are being refunded\nERROR: Payout is in error status. Ex: HTTP 500, 404 403 etc.,\nDECLINED: Payout is declined by Visa and will not be proccessed further\nCANCELLED: Payout has been successfully cancelledn\n",
                "enum": [
                  "PAYMENT_RECEIVED",
                  "PENDING",
                  "PAYMENT_SENT",
                  "VALIDATION_FAILED",
                  "AWAITING_INFORMATION",
                  "PENDING_CANCELLATION",
                  "RETURNED",
                  "ERROR",
                  "DECLINED",
                  "CANCELLED",
                  "IN_PROGRESS",
                  "FAILED"
                ]
              },
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A, P2W and Reversals, Chargeback, Response, Advice for P2C."
              },
              "networkId": {
                "maxLength": 4,
                "minLength": 1,
                "type": "string",
                "description": "This contains a code that identifies the network on which the transaction was processed.\n Note: This field is returned only if it is anything other than networkId value 2. Supported only in US for domestic transactions\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional"
              },
              "tokenData": {
                "type": "object",
                "properties": {
                  "accountRange": {
                    "type": "integer",
                    "description": "Contains the first 9 digits of the cardholder PAN..\nNote: Acquirers must not forward this value to their merchants after receiving it in the response message from Visa.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "accountSuffix": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Last four digits of the card number/PAN \nNote: This is only relevant for push to card payouts, where a card network token was sent by the Originating Entity in the payout request (in the recipientDetail.card.accountNumber field).\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "additionalTokenRespInfo": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field will contain a value used to identify transactions eligible for token services. \nValid value: \n1 - Token program.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - EndtoEnd Identification"
              },
              "settlement": {
                "type": "object",
                "properties": {
                  "date": {
                    "maxLength": 10,
                    "minLength": 10,
                    "pattern": "YYYY-MM-DD",
                    "type": "string",
                    "description": "This is date when the transaction is settled between Visa and the Acquirer \n\nP2A: Conditional (Mandatory when the transaction is settled)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Contains the transaction amount converted to settlement currency, expressed in the currency specified in settlementCurrencyCode field. \n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the settlement amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A"
                  },
                  "rateSourceId": {
                    "type": "string",
                    "description": "Contains the source ID of the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nP2A: Conditional (Mandatory when the transaction is settled via VisaNet)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)"
                  },
                  "conversionRate": {
                    "maxLength": 14,
                    "minLength": 1,
                    "pattern": "\\d{1,7}(\\.\\d{1,12})?",
                    "type": "string",
                    "description": "Contains the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nConditional (Mandatory when the transaction is settled via VisaNet)\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate\n\nP2A: This field will be populated for Accelerated Settlement transactions.\nP2W: N/A\nP2C: N/A"
                  }
                }
              },
              "responseCode": {
                "type": "integer",
                "description": "Response code that provides the result of the payout request. List of valid response codes (add VDP link (https://developer.visa.com/request_response_codes#action_code))"
              },
              "returnAmount": {
                "type": "integer",
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\nThe amount originally assessed for settlement on the Payout will be reversed as-is in case of rejects and cancellations.\nIn case of returns from Visa's network partner on a cross-currency transaction, this value could vary from the settlement amount on the original payout.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": 12345
              },
              "fundingStatus": {
                "type": "string",
                "description": "Funding Status of the payout transaction\n\nPossible values: \"FUNDED\" \"NOT_FUNDED\"\n\nFUNDED - Indicates that the originating entity has provided funding for the transaction and Visa Direct has allocated funds to the transaction\nNOT_FUNDED - Indicates that the originating entity has not provided funding for the transaction\n \nP2A: Conditional (will be populated after the funding has been assessed) \nP2W: Conditional (will be populated after the funding has been assessed)",
                "enum": [
                  "FUNDED",
                  "NOT_FUNDED"
                ]
              },
              "returnDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\0\\0\\0Z",
                "type": "string",
                "description": "This field contains the date and time Visa has returned the payout to the Originating Entity\nFormat: YYYY-MM-DDThh:mm:ss.000Z\nExample: 2021-01-01T22:52:46.000Z\n\nISO20022 field name: Payment Return - Message Creation Date Time",
                "example": "2020-05-05T12:12:12.000Z"
              },
              "nationalNetData": {
                "type": "object",
                "properties": {
                  "reimbursementFee": {
                    "type": "number",
                    "description": "Applies to Argentina domestic data only and indicates the installment payment details for Argentina National Net Settlement Service.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "double"
                  },
                  "memberSuppliedIRF": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field contains the client-calculated interchange reimbursement fee (IRF) for countries using this capability.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "reimbursementAttribute": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains a code that identifies the applicable interchange reimbursement fee for a transaction. Its an optional value and if not supplied by Originating entities, Visa applies default value 0 and passes onwards to Issuers/Receiving entities.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "statusUpdateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "This is the time when latest event reflected in transactionDetail.status is processed using Visa’s clock Format: UTC time YYYY-MM-DThh:mm:ss.000Z Example: 2021-01-01T22:52:46.000Z",
                "format": "UTC time YYYY-MM-DThh:mm:ss.000Z",
                "example": "2021-01-01T22:52:46.000Z"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - Transaction Identification"
              },
              "destinationAmount": {
                "type": "integer",
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "transactionAmount": {
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient bank account or card. Expressed in the currency specified in transaction currency code.\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”."
              },
              "returnCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "example": "840"
              },
              "returnSourceAmount": {
                "type": "integer",
                "description": "The return amount as sent by Visa’s network partner in the destination country, expressed in the currency specified in returnSourceCurrencyCode field. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": 12345
              },
              "expectedPostingDate": {
                "maxLength": 10,
                "minLength": 10,
                "type": "string",
                "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\nConditional (Mandatory for an approved transaction) \nP2C: N/A",
                "format": "YYYY-MM-DD"
              },
              "feeProgramIndicator": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Contains the fee program indicator, which is used to assess the Interchange Fee Amount in certain scenarios\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "returnReasonDetails": {
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 5,
                    "minLength": 5,
                    "type": "string",
                    "description": "Indicates the return reason code when the payout is returned."
                  },
                  "type": {
                    "type": "string",
                    "description": "Indicates the PSP return type when the payout is returned.",
                    "enum": [
                      "REJECT",
                      "RETURN"
                    ]
                  },
                  "description": {
                    "maxLength": 105,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the PSP return description when the payout is returned."
                  }
                }
              },
              "returnConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert returnSourceAmount to returnAmount.\n\nThis field will be populated for Accelerated Settlement transactions.",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "minLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. It can also be used to match the payouts to settlement reports."
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set"
              },
              "destinationCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the destination amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nP2A: Optional \nP2W: Optional \nP2C: N/A"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount Format: 3-digit ISO-4217 (numeric) currency code"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A, P2W and Reversals, Chargeback, Response, Advice for P2C.\n\nThe format is recommended to be ydddhhnnnnnn yddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). hh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. nnnnnn - can be the systemsTraceAuditNumber or any 6 digit number"
              },
              "returnSourceCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction. \nThis field will be conditionally present when returnReasonDetails.type=”RETURN\".",
                "example": "840"
              },
              "destinationConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert transactionAmount to destinationAmount.",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              },
              "originalTransmissionDateTime": {
                "type": "string",
                "description": "The time the request was received by Visa",
                "format": "YYYY-MM-DDThh:mm:ss.sssZ"
              }
            }
          }
        }
      },
      "PayoutReturnRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType-1"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-2"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutReturnRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutIdentifier-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          {
            "$ref": "#/components/schemas/PayoutId"
          }
        ]
      },
      "PurposeOfPayments-1": {
        "title": "PurposeOfPayments",
        "required": [
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean",
            "description": "Whether the purpose of payment is mandatory.",
            "example": true
          },
          "purposeOfPaymentCodes": {
            "type": "array",
            "description": "List of valid purpose of payment codes.",
            "items": {
              "$ref": "#/components/schemas/PurposeOfPaymentCodes-1"
            }
          }
        },
        "description": "This group contains all configuration information for Purpose of Payment options. The 'mandatory' attribute indicates whether provision of Purpose of Payment data is required for the Payout to be accepted."
      },
      "TransactionDetailMetadata-1": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments-1"
          }
        },
        "description": "TransactionDetail Object\n"
      },
      "PayoutFromOriginator200Response": {
        "required": [
          "originatorDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "type": "object",
            "properties": {
              "vauData": {
                "type": "object",
                "properties": {
                  "vauFlag": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient primary account number Visa Account Updater (VAU) flag\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional \nNote: Possible values are : Y (replacement occurred) N (No replacements)"
                  },
                  "accountStatus": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates recipient account status. Possible values are C (closed account) or Q (contact cardholder)\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "vauErrorReasonCode": {
                    "maxLength": 25,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the reason the VAU failed\nPossible values \nVAU_SUCCESS\nVAU_FAILED\nVAU_PAN_TKN_SUCCESS\nVAU_PAN_TKN_FAILED\nVAU_PPCS_SUCCESS\nVAU_PPCS_FAILED\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "enum": [
                      "VAU_SUCCESS",
                      "VAU_FAILED",
                      "VAU_PAN_TKN_SUCCESS",
                      "VAU_PAN_TKN_FAILED",
                      "VAU_PPCS_SUCCESS",
                      "VAU_PPCS_FAILED"
                    ]
                  },
                  "replacementCardAccountNumber": {
                    "maxLength": 19,
                    "minLength": 13,
                    "type": "string",
                    "description": "Contains the recipient replacement primary account number, if it exists\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "replacementCardExpirationDate": {
                    "maxLength": 7,
                    "minLength": 7,
                    "type": "string",
                    "description": "Contains the recipient replacement primary account number expiration date, if it exists. This is returned even if the expiration date was not passed in the request.\n\n Format: YYYY-MM \n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "YYYY-MM"
                  }
                }
              },
              "prepaidBalanceData": {
                "required": [
                  "amount",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "Contains the prepaid load amount to the prepaid card, expressed in the currency specified in prepaidBalanceData currency code field. \n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory only for Top Up Transactions)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the prepaid balance data amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory only for Top Up Transactions)"
                  }
                }
              }
            }
          },
          "originatorDetail": {
            "required": [
              "bankId",
              "originatorId"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system.\n\nNote: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification"
              },
              "originatorId": {
                "type": "integer",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account transactions. The Originating Entity should populate Card Acceptor Terminal ID (CAID) for Push to Card transactions.\n\nISO20022 field name: Debtor - Originating Entity Identification\nP2A: Mandatory\nP2W: Mandatory\nP2C: N/A"
              },
              "merchantVerificationValue": {
                "type": "integer",
                "description": "Conditional The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.\n Note: This field is present if the MVV value was included on the Send Payout request.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "payoutId",
              "responseCode",
              "retrievalReferenceNumber",
              "systemTraceAuditNumber",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionIdentifier",
              "transmissionDateTime"
            ],
            "type": "object",
            "properties": {
              "authId": {
                "type": "integer",
                "description": "This is a unique authorization code for an approved transaction from Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A ,P2W and Reversals, Chargeback, Response, Advice for P2C.\n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information"
              },
              "networkId": {
                "maxLength": 4,
                "minLength": 1,
                "type": "string",
                "description": "This contains a code that identifies the network on which the transaction was processed.\n Note: This field is returned only if it is anything other than networkId value 2. Supported only in US for domestic transactions\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional"
              },
              "tokenData": {
                "type": "object",
                "properties": {
                  "accountRange": {
                    "type": "integer",
                    "description": "Contains the first 9 digits of the cardholder PAN..\nNote: Acquirers must not forward this value to their merchants after receiving it in the response message from Visa.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "accountSuffix": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Last four digits of the card number/PAN \nNote: This is only relevant for push to card payouts, where a card network token was sent by the Originating Entity in the payout request (in the recipientDetail.card.accountNumber field).\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "additionalTokenRespInfo": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field when present in the API response identifies if the transaction is eligible for token services. Valid token service values are: 1 (Token program). <br><br> This field will not be present in the response if the transaction is ineligible for token services. <br><br> ISO20022 field name: N/A P2A: N/A P2C: Optional"
                  }
                }
              },
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original EndtoEnd Identification\n\nConditional (Field present when transactionDetail.endToEndId is provided in the original Send Payout request)\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "settlement": {
                "type": "object",
                "properties": {
                  "date": {
                    "maxLength": 10,
                    "minLength": 10,
                    "type": "string",
                    "description": "This is date when the transaction is settled between Visa and the Acquirer \n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Date\nP2A: Conditional (Mandatory when the transaction is settled)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)",
                    "format": "YYYY-MM-DD"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Contains the transaction amount converted to settlement currency, expressed in the currency specified in settlementCurrencyCode field. \n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Amount\nP2A: Conditional (Mandatory when the transaction is settled)\nP2W: N/A\nP2C: N/A\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2A.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "serviceFlag": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Indicates the settlement service applicable for the transaction.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the settlement amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: Transaction Information And Status - Interbank Settlement Amount Currency Code\nP2A: Conditional (Mandatory when the transaction is settled)\nP2W: N/A\nP2C: N/A"
                  },
                  "rateSourceId": {
                    "maxLength": 5,
                    "type": "string",
                    "description": "Contains the source ID of the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate Source ID\nP2A: Conditional (Mandatory when the transaction is settled via VisaNet)\nP2W: N/A\nP2C: Conditional (Mandatory when the transaction is settled)"
                  },
                  "conversionRate": {
                    "maxLength": 14,
                    "minLength": 1,
                    "pattern": "\\d{1,7}(\\.\\d{1,12})?",
                    "type": "string",
                    "description": "Contains the foreign exchange rate applied to the derive the settlement amount in case of cross currency payment.\n\nISO20022 field name: Transaction Information And Status - Remittance Information Settlement Conversion or FX Rate\nP2A: Conditional (Mandatory when the transaction is settled via VisaNet)\nP2W: N/A\nP2C: N/A"
                  },
                  "responsibleParty": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 to indicate that VisaNet has settlement responsibility for this transaction. This flag does not indicate the transaction will be settled.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "grossInterchangeValue": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 to indicate that this transaction has financial impact and that the value of the transaction (if approved) will be included in the settlement accumulation during processing of this request-response or advice-advice response message pair.\nThe flag is set to 0 if a transaction is ineligible for settlement processing.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "priorGrossInterchangeValue": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag is set to 1 indicating this transaction has financial impact, but VisaNet has updated its reconciliation totals for the value of this transaction.\nThis flag is set to 0 if the transaction is ineligible for settlement processing.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "payoutSpeed": {
                "type": "string",
                "description": "Originating Entity to indicate the desired payout speed for the payment. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Instruction Priority\nP2A: Conditional (Mandatory for an approved transaction and send in the request)\nP2W: Conditional (Mandatory for an approved transaction and send in the request)\nP2C: N/A",
                "enum": [
                  "STANDARD",
                  "PREMIUM"
                ]
              },
              "responseCode": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Response code that provides the result of the payout request. List of valid response codes"
              },
              "responseSource": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Contains the response source/reason code that identifies the source of the responseCode i.e. whether it is from Visa or from the Issuer.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Mandatory"
              },
              "nationalNetData": {
                "type": "object",
                "properties": {
                  "reimbursementFee": {
                    "type": "number",
                    "description": "Applies to Argentina domestic data only and indicates the installment payment details for Argentina National Net Settlement Service.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "double"
                  },
                  "memberSuppliedIRF": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field contains the client-calculated interchange reimbursement fee (IRF) for countries using this capability.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "reimbursementAttribute": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains a code that identifies the applicable interchange reimbursement fee for a transaction. Its an optional value and if not supplied by Originating entities, Visa applies default value 0 and passes onwards to Issuers/Receiving entities.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\n\nConditional (Field present when transactionDetail.clientReferenceId is provided in the original Send Payout request)\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "destinationAmount": {
                "type": "integer",
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity. <br>Note: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.<br>Example: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nP2C: N/A",
                "x-variant": "| positive"
              },
              "transactionAmount": {
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient bank account or card. Expressed in the currency specified in transaction currency code.<br>Note:The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C. <br>Example: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.",
                "x-variant": "| positive"
              },
              "expectedPostingDate": {
                "type": "string",
                "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nISO20022 field name: Transaction Information And Status - Effective Interbank Settlement Date\nP2A: Conditional (Mandatory for an approved transaction)\nP2W: Conditional (Mandatory for an approved transaction)\nP2C: N/A",
                "format": "YYYY-MM-DD"
              },
              "feeProgramIndicator": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Originating Entity to indicate the fee program indicator, which is used to assess the Interchange Fee Amount in certain scenarios\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional "
              },
              "originalResponseCode": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Response code that provides the result of original payout request when current request is identified as duplicate of original (in which case the responseCode will be 94)"
              },
              "transmissionDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.000Z",
                "type": "string",
                "description": "The time the request was received by Visa"
              },
              "serviceProcessingType": {
                "required": [
                  "requestType"
                ],
                "type": "object",
                "properties": {
                  "requestType": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Reserved for future use.</br></br>P2A: N/A P2C: Optional"
                  }
                },
                "description": "This field will contain values that identifies the type of service assigned for the transaction."
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. It can also be used to match the payouts to settlement reports."
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set"
              },
              "destinationCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the destination amount\\n\\nFormat: 3-digit ISO-4217 (numeric) currency code\\n\\nISO20022 field name:  Transaction Information And Status - Remitted Amount Currency Code\nP2C: N/A"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount <br>Format: 3-digit ISO-4217 (numeric) currency code"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C.\n\nThe format is recommended to be ydddhhnnnnnn\n\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).\nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.\nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Transaction Information And Status - Original Instruction Identification"
              },
              "destinationConversionRate": {
                "maxLength": 14,
                "type": "string",
                "description": "This field contains the exchange rate applied to convert transactionAmount to destinationAmount. \nP2C: N/A",
                "format": "\\d{1,7}(\\.\\d{1,12})?"
              }
            }
          }
        }
      },
      "RecipientAccountPayoutAddress-3": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "TransactionDetailMetadata-6": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments-1"
          }
        },
        "description": "TransactionDetail Object                \n"
      },
      "Amount": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "format": "double",
        "example": 12.34
      },
      "AccountNumber-1": {
        "maxLength": 254,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains recipient’s account number or alias at the bank.",
        "example": "3012345678901432"
      },
      "nameMatch-1": {
        "type": "string",
        "description": "Score provided based on recipient’s name match, if recipient’s account is found and active. Supports below values: STRONG_MATCH,PARTIAL_MATCH and NO_MATCH. STRONG_MATCH - Recipient’s account found and name is a highly confident match. PARTIAL_MATCH - Recipient’s account found and name is a partial match. NO_MATCH - Recipient’s account found but name is likely not a match. Applicable only for Accounts.\n",
        "enum": [
          "STRONG_MATCH",
          "PARTIAL_MATCH",
          "NO_MATCH"
        ]
      },
      "IdentityField": {
        "title": "IdentityField",
        "required": [
          "description",
          "elementName",
          "inputType",
          "locale",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The localization setting of this particular record."
          },
          "maxSize": {
            "type": "integer",
            "description": "Suggested client side syntactic validation rule.",
            "format": "int32"
          },
          "subTitle": {
            "type": "string",
            "description": "If present contains a sub-label to be displayed with the field."
          },
          "tabOrder": {
            "type": "integer",
            "description": "Indicates the ordering of this field in the UI.",
            "format": "int32"
          },
          "inputType": {
            "$ref": "#/components/schemas/IdentityFieldInput"
          },
          "listItems": {
            "minItems": 1,
            "type": "array",
            "description": "The identityListItems contain listItem sub-elements. The listItem sub-elements would normally be present where the inputType attribute is 'list'.",
            "items": {
              "$ref": "#/components/schemas/IdentityListItem"
            }
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates whether the field is mandatory."
          },
          "separator": {
            "type": "string",
            "description": "The separator to display following (to the right hand side) this field, usually '-' or '/'."
          },
          "description": {
            "type": "string",
            "description": "Suggested roll-over or help text description to assist users."
          },
          "displaySize": {
            "type": "integer",
            "description": "A suggested field size to display.",
            "format": "int32"
          },
          "elementName": {
            "type": "string",
            "description": "The name of the element."
          },
          "valueRegexp": {
            "type": "string",
            "description": "The regexp for the value of this field."
          }
        },
        "description": "Each IdentityField would normally be displayed in the UI from left to right based on the tabOrder attribute. The IdentityField element contains the attributes described below:-"
      },
      "CountrySpecificSchemas": {
        "type": "object",
        "description": "This section lists fields with country-specific definition (e.g., datatype, length, pattern or format that vary by country).\nIt contains valid JSON Schemas.\n"
      },
      "nameMatch": {
        "type": "string",
        "description": "Score provided based on recipient’s name match, if recipient’s account isfound and\nactive. Supports below values: STRONG_MATCH,PARTIAL_MATCH,NO_MATCH. STRONG_MATCH-\nRecipient’s account found and name is a highly confident match. PARTIAL_MATCH-\nRecipient’s account found and name is a partial match. NO_MATCH- Recipient’s account\nfound but name is likely not a match. Applicable only for Accounts.\n",
        "enum": [
          "STRONG_MATCH",
          "PARTIAL_MATCH",
          "NO_MATCH"
        ]
      },
      "S2AMetaData": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata"
              }
            ]
          }
        }
      },
      "QueryPayoutIdResponse503": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "DueDateTime": {
        "type": "string",
        "description": "ISO 8601 formatted UTC Timestamp, YYYY-MM-DDThh:mm:ss.sssTZD. TZD is either Z or +/-00:00",
        "format": "date-time",
        "example": "2020-05-05T12:12:12Z"
      },
      "QueryPayoutIdResponse500": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "Conditions": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/AnyCondition"
            },
            {
              "$ref": "#/components/schemas/AllCondition"
            },
            {
              "$ref": "#/components/schemas/NotCondition"
            }
          ]
        }
      },
      "CompanyName": {
        "maxLength": 70,
        "minLength": 2,
        "type": "string",
        "description": "Company name",
        "example": "Visa"
      },
      "ClientVerificationReference": {
        "maxLength": 35,
        "minLength": 1,
        "pattern": "^[a-zA-Z0-9- /?:().,'+]*$",
        "type": "string",
        "description": "An optional client submitted identifier. This field and same value will be returned in the response.",
        "example": "1234567890"
      },
      "ValidatePayoutAccountRequest-6": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-6"
          }
        ]
      },
      "ValidatePayoutAccountRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-1"
              }
            ]
          },
          "accountVerificationRequired": {
            "$ref": "#/components/schemas/accountVerificationRequired"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-1"
          }
        ]
      },
      "ValidatePayoutAccountRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-1"
              }
            ]
          },
          "accountVerificationRequired": {
            "$ref": "#/components/schemas/accountVerificationRequired"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-2"
          }
        ]
      },
      "VerifyRecipientWalletRequest-4": {
        "required": [
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Originating Entity must indicate the payout method i.e. Wallet\n\nValid values:\n- \"W\" Visa Direct Wallet\n",
            "enum": [
              "W"
            ]
          },
          "recipientDetail": {
            "required": [
              "type"
            ],
            "properties": {
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual. Only 'I' is supported. \n\nISO20022 field name: Creditor Identification Type\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "ValidatePayoutAccountRequest-7": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-7"
          }
        ]
      },
      "ErrorResponse-2": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code",
                "example": 400
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "VerifyRecipientWalletRequest-1": {
        "required": [
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Originating Entity must indicate the payout method i.e. Wallet\nValid values:\n- \"W\" Visa Direct Wallet\n",
            "enum": [
              "W"
            ]
          },
          "recipientDetail": {
            "required": [
              "type"
            ],
            "properties": {
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual and \"C\" for Company. ISO20022 field name: Creditor Identification Type\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided. ISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided. ISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "AnyCondition": {
        "required": [
          "any",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "It defines an unique 'id' value of a condition"
          },
          "any": {
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BooleanExpression"
                },
                {
                  "$ref": "#/components/schemas/ConditionById"
                }
              ]
            }
          }
        }
      },
      "ErrorResponse-1": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "VerifyRecipientWalletRequest-2": {
        "required": [
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Originating Entity must indicate the payout method i.e. Wallet\n\nValid values:\n- \"W\" Visa Direct Wallet\n",
            "enum": [
              "W"
            ]
          },
          "recipientDetail": {
            "required": [
              "type"
            ],
            "properties": {
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual. Only 'I' is supported. \n\nISO20022 field name: Creditor Identification Type\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "RouteDefiningFields": {
        "type": "array",
        "description": "This section returns country, currency, payout method as provided by the client in the MetaData API request. These fields are also required in a Send Payout API request.\n",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/PayoutFieldDefinition"
            },
            {
              "$ref": "#/components/schemas/PayoutFieldDefinitionForCurrencyCode"
            },
            {
              "$ref": "#/components/schemas/NonPayoutFieldDefinition"
            }
          ]
        }
      },
      "AccountQueryPendingResponse-1": {
        "$ref": "#/components/schemas/202AccountPayoutCreatedResponse-1"
      },
      "PayoutFieldDefinition": {
        "required": [
          "$ref",
          "name",
          "presence"
        ],
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "this refers to a JSON Schema definition within the document"
          },
          "name": {
            "type": "string",
            "description": "If 'name' contains absolute JSON path (i.e. '$' at the beginning), it defines the JSON path of the field; otherwise, concatenate \\<path\\>+ \".\" +\\<name\\> to form an absolute JSON path."
          },
          "path": {
            "type": "string",
            "description": "If provided the \\<path\\> + \".\" + \\<name\\> will form a JSONPath string."
          },
          "presence": {
            "type": "string",
            "description": "It defines the presence of the field. \nValid ENUM values:\n- required\n- recommended\n- conditional\n- optional\n",
            "enum": [
              "required",
              "recommended",
              "conditional",
              "optional"
            ]
          }
        }
      },
      "VerifyRecipientDetailRequest-4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VerifyRecipientWalletRequest-4"
          }
        ]
      },
      "AccountQueryPendingResponse-2": {
        "$ref": "#/components/schemas/202AccountPayoutCreatedResponse-2"
      },
      "City": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's city",
        "example": "Santa Fe"
      },
      "VerifyRecipientDetailRequest-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VerifyRecipientWalletRequest-1"
          },
          {
            "$ref": "#/components/schemas/AccountVerificationRequest-1"
          }
        ]
      },
      "VerifyRecipientDetailRequest-2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VerifyRecipientWalletRequest-2"
          }
        ]
      },
      "VerifyRecipientDetailRequest-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VerifyRecipientWalletRequest-1"
          },
          {
            "$ref": "#/components/schemas/AccountVerificationRequest"
          }
        ]
      },
      "AdditionalDataName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Name of the field."
      },
      "SenderAccountNumber-1": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional - This field is Mandatory if a senderReferenceNumber is not sent. <br />\nNote:\nClient should provide either a sender reference number or a sender account number but not both.\nClient should not send any PANs in this field for payout.\n",
        "example": "A42434234S324234"
      },
      "PayoutNotificationFailedRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "LockQuoteResponse": {
        "required": [
          "buyAmount",
          "buyCurrency",
          "exchangeRate",
          "quoteId",
          "quoteStatus",
          "sellAmount",
          "sellCurrency"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "type": "integer",
            "description": "This field contains the unique number representing the FX Quote.",
            "format": "int64",
            "example": 9894287058225
          },
          "buyAmount": {
            "type": "number",
            "description": "The transaction amount in buy currency.",
            "format": "double",
            "example": 8000
          },
          "sellAmount": {
            "type": "number",
            "description": "The transaction amount in sell currency.",
            "format": "double",
            "example": 100
          },
          "buyCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "INR"
          },
          "quoteStatus": {
            "type": "string",
            "description": "A quote that is in LOCKED state should proceed to completion when funds are available.",
            "example": "LOCKED-IN",
            "enum": [
              "LOCKED-IN"
            ]
          },
          "exchangeRate": {
            "type": "number",
            "description": "This represents exchange rate between provided currencies.",
            "format": "double",
            "example": 0.0125
          },
          "sellCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "EUR"
          }
        }
      },
      "QueryPendingCancelledResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "SenderCompany": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Sender company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "QueryPayoutIdResponse404": {
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "ReturnReasonCodeDescription-1": {
        "maxLength": 105,
        "minLength": 1,
        "type": "string",
        "description": "Indicates the PSP return description when the payout is returned. Refer to PSP Return Description\n\nISO20022 field name: Payment Return - PSP Return Description\n"
      },
      "QueryPayoutIdResponse400": {
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "PayoutReturnRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "FlexibleAccountFrozen": {
        "type": "boolean",
        "description": "Indicates if the flexible account is frozen."
      },
      "AccountVerifyResponse": {
        "required": [
          "verificationId",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "verificationStatus": {
            "type": "string",
            "description": "Provides the status of verification request.\n* COMPLETED - Request was completed and result is available.Indicates if the account identifier provided matches the recipient's bank account identifier found.\n* NOT_COMPLETED - Service Provider not available.\n",
            "example": "COMPLETED",
            "enum": [
              "COMPLETED",
              "NOT_COMPLETED"
            ]
          },
          "verificationDetails": {
            "required": [
              "code",
              "message"
            ],
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "Response/error code to convey to client what went wrong in case of COMPLETED and account not matched and NOT_COMPLETED as well.",
                "example": 2100
              },
              "message": {
                "type": "string",
                "description": "Message corresponding to the above code.",
                "example": "Account identifier does not match"
              },
              "location": {
                "type": "string",
                "description": "To share the location.",
                "nullable": true,
                "example": "Server A"
              }
            }
          },
          "accountVerificationDetail": {
            "required": [
              "accountIdentifierMatch"
            ],
            "type": "object",
            "properties": {
              "nameMatch": {
                "type": "string",
                "description": "Indicates if recipient bank name is a match.",
                "nullable": true,
                "example": "Strong_Match",
                "enum": [
                  "Strong_Match",
                  "Partial_Match",
                  "No_Match"
                ]
              },
              "bankAccountName": {
                "type": "string",
                "description": "Future field to indicate the actual name of the accountholder (if provided by account verification service provider).",
                "nullable": true,
                "example": "John Doe"
              },
              "accountIdentifierMatch": {
                "type": "string",
                "description": "Indicates if the account identifier provided matches the recipient's bank account identifier found.",
                "example": "true",
                "enum": [
                  "true",
                  "false"
                ]
              }
            }
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        },
        "description": "This object is only present if verificationStatus is COMPLETED"
      },
      "InitiatingPartyId": {
        "type": "integer",
        "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction\n\nISO20022 field name: Initiating Party Identification<br>\nVisa uses integer instead of string(1-35) for uniformed value generation and presentation.\n",
        "format": "int64",
        "example": 100111
      },
      "QueryPendingCancelledResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "AccountQueryErrorResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "QueryPendingCancelledResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "ExposureInfoFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "exposureInfo",
          "initiatingPartyId",
          "notificationDateTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "CLIENT_EXPOSURE"
            ]
          },
          "exposureInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExposureInfoDetails"
            }
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "InvalidPayoutResponse": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "AccountVerificationRequest": {
        "required": [
          "clientVerificationReference",
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Method of payout. For accounts, this should be 'B'.",
            "example": "B",
            "enum": [
              "B"
            ]
          },
          "recipientDetail": {
            "required": [
              "bank",
              "type"
            ],
            "type": "object",
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual and \"C\" for Company.\n\nISO20022 field name: Creditor Identification Type       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided. ISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided. ISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets.  Valid values :  * P- Passport  * D-Driving License  * N-National Id  * T-Tax Id  * L-Legal Entity Registration Number  * F-Foreign Id\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths) ISO20022 field name: \"Creditor Private Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "type": "string",
            "description": "The ID of the initiating party.",
            "example": "123456"
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "AccountQueryResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse"
          },
          {
            "$ref": "#/components/schemas/QueryPendingCancelledResponse"
          }
        ]
      },
      "Wallet": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Payouts Endpoint Guide on list of supported Wallet Operators).\n"
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.          \n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "ErrorResponseWithKey-1": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "AlphaCurrencyCode": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "3-character ISO-4217 (Alpha-3) currency code\n",
        "example": "USD"
      },
      "AlphaCurrencyCode-1": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "ISO-4217 (Alpha-3) currency code\n",
        "example": "USD"
      },
      "DeliveredDateTime": {
        "type": "string",
        "description": "Optional.\nApplicable for statuses PAYMENT_DELIVERED, DELIVERED_TO_SCHEME and DELIVERED_TO_RECIPIENT_BANK, when available.\n\nISO 8601 formatted UTC Timestamp, YYYY-MM-DDThh:mm:ss.sssTZD. TZD is either Z or +/-00:00\n\nExample: 2020-05-05T12:12:12.000Z, or 1997-07-16T19:20:30.45+00:00",
        "format": "date-time"
      },
      "Array": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "PostingDate": {
        "required": [
          "cutoffDateTime",
          "expectedPostingDate"
        ],
        "type": "object",
        "properties": {
          "cutoffDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              }
            ]
          }
        }
      },
      "TotalAmountOverdue": {
        "type": "number",
        "description": "Total amount overdue.",
        "format": "double"
      },
      "IdentityFieldInput": {
        "title": "IdentityFieldInput",
        "type": "string",
        "description": "Supported input types for a recipient identity UI.",
        "enum": [
          "text",
          "date",
          "number",
          "list"
        ],
        "x-enum-elements": [
          {
            "name": "text",
            "description": "Text UI field."
          },
          {
            "name": "date",
            "description": "Date UI field."
          },
          {
            "name": "number",
            "description": "Number UI field."
          },
          {
            "name": "list",
            "description": "List UI field."
          }
        ]
      },
      "ClientDrivenConditionalFields": {
        "type": "array",
        "description": "This section contains field-sets that are required to be provided only in  select use cases. It is up to the client to determine whether these scenarios or use cases apply and provide the relevant data. Visa systems will only act as a pass through for this data.\n",
        "items": {
          "$ref": "#/components/schemas/ClientDrivenConditionsAndFields"
        }
      },
      "202TransactionStatus": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n",
        "enum": [
          "PENDING"
        ]
      },
      "AccountBalance-1": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "The balance amount for a particular currency.\n\nNote: The number of decimal places assumed for this field depends on the currency.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedAmount"
              }
            ]
          },
          "currencyCode": {
            "description": "The currency code is a three letter ISO 4217 code. \n\nE.g. GBP for British sterling pounds.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        },
        "description": "Represents a monetary value containing a decimal amount value along with a currency code.\n"
      },
      "BankName": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "example": "Bank of America"
      },
      "SenderAccountPayoutAddress": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Town Name\" <br> For 3rd party payments: \"Debtor Address Town Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Country Sub-division\" <br> For 3rd party payments: \"Debtor Address Country Sub-division\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Country\" <br> For 3rd party payments: \"Debtor Address Country\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: <br> For 4th  party payments: \"Ultimate Debtor Address Postal Code\" <br> For 3rd party payments: \"Debtor Address Postal Code\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Street Name\" <br> For 3rd party payments: \"Debtor Address Street Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Floor\" <br> For 3rd party payments: \"Debtor Address Floor\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "ConditionById": {
        "required": [
          "condition"
        ],
        "type": "object",
        "properties": {
          "condition": {
            "type": "string",
            "description": "It refers to 'id' value of a condition"
          }
        }
      },
      "401ErrorResponseObject": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 401
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "StructuredReferenceName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "SRI Name of the field.",
        "example": "amount, documentType"
      },
      "AccountTransactionDetail": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "CancelPayout200Response": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n\nStatus definition (add a link to Status Transition diagram on VDP):\n\nPENDING_CANCELLATION: Cancel payout request is pending\nCANCELLED: A transaction has been successfully cancelled, because it was never sent to the network partner",
                "example": "Cancelled",
                "enum": [
                  "Pending Cancellation",
                  "Cancelled"
                ]
              }
            }
          }
        }
      },
      "PayoutReceivedAfter202InSendPayout": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "VerifyRecipientDetailRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VerifyRecipientWalletRequest"
          }
        ]
      },
      "RecipientTransactorDetail": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany"
          }
        ]
      },
      "PayoutNotification-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutReceivedAfter202InSendPayout-1"
          },
          {
            "$ref": "#/components/schemas/PayoutStatusesInProgress"
          },
          {
            "$ref": "#/components/schemas/PayoutFailedAfter202InSendPayout"
          }
        ]
      },
      "InvalidPayoutResponse-2": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "InvalidPayoutResponse-1": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "PayoutNotification-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-1"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-1"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest-1"
          }
        ]
      },
      "AmountWithZero-1": {
        "minimum": 0,
        "type": "number",
        "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
        "format": "double",
        "example": 12.34
      },
      "PayoutNotification-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutReceivedAfter202InSendPayout"
          },
          {
            "$ref": "#/components/schemas/PayoutStatusesInProgress"
          },
          {
            "$ref": "#/components/schemas/PayoutFailedAfter202InSendPayout"
          }
        ]
      },
      "PayoutFromOriginator201Response": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "retrievalReferenceNumber",
              "systemTraceAuditNumber"
            ],
            "type": "object",
            "properties": {
              "payoutId": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C. \n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory",
                "x-variant": "| positive"
              },
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "^\\d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A , P2W and Reversals, Chargeback, Response, Advice for P2C.\n\nThe format is recommended to be ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Transaction Information And Status - Original Instruction Identification\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              }
            }
          }
        }
      },
      "FactObject": {
        "required": [
          "fact"
        ],
        "type": "object",
        "properties": {
          "fact": {
            "type": "string"
          }
        }
      },
      "ReturnReasonCodeDetailsType": {
        "type": "string",
        "description": "Indicates the PSP return type when the payout is returned. Refer to PSP Return Type (add link to VDP)\n\nISO20022 field name: Payment Return - PSP Return Type\n",
        "enum": [
          "REJECTED",
          "RETURNED"
        ]
      },
      "PayoutNotification-8": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-2"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest"
          }
        ]
      },
      "PayoutNotification-6": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-2"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-2"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest"
          }
        ]
      },
      "PayoutNotification-7": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-3"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-3"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest-2"
          }
        ]
      },
      "PayoutNotification-4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutReceivedAfter202InSendPayout-2"
          },
          {
            "$ref": "#/components/schemas/PayoutStatusesInProgress"
          },
          {
            "$ref": "#/components/schemas/PayoutFailedAfter202InSendPayout"
          }
        ]
      },
      "PayoutNotification-5": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutReceivedAfter202InSendPayout-3"
          },
          {
            "$ref": "#/components/schemas/PayoutStatusesInProgress"
          },
          {
            "$ref": "#/components/schemas/PayoutFailedAfter202InSendPayout"
          }
        ]
      },
      "TransactionDetailMetadata": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments"
          }
        },
        "description": "TransactionDetail Object                \n"
      },
      "CancelPayout400Response": {
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error.",
                "example": "InvalidParameter"
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code",
                "example": 400
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred.",
                      "example": "Must be a numeric string with length between 6 and 11"
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred.",
                      "example": "originatorDetail.bankId"
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error.",
                "example": "Input parameters validation failed"
              }
            }
          }
        }
      },
      "Bank": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "beneficiary bank account Business Identifier Code (BIC)\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account bank code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account branch code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "beneficiary bank account name i.e. account holder name as recorded on beneficiary bank account\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Visa\n* `5` - Loan\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank account bank code type\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "beneficiary bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "AccountQueryErrorResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "QuoteId": {
        "type": "integer",
        "description": "This is a unique FX quote ID generated by Visa for a payout currency pair.         \n",
        "format": "int64",
        "example": 987654321
      },
      "CityOfBirth": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "This field should contain recipient’s city of birth.",
        "example": "Mumbai"
      },
      "PurposeOfPayments": {
        "title": "PurposeOfPayments",
        "required": [
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean",
            "description": "Whether the purpose of payment is mandatory.",
            "example": true
          },
          "purposeOfPaymentCodes": {
            "type": "array",
            "description": "List of valid purpose of payment codes.",
            "items": {
              "$ref": "#/components/schemas/PurposeOfPaymentCodes"
            }
          }
        },
        "description": "This group contains all configuration information for Purpose of Payment options. The 'mandatory' attribute indicates whether provision of Purpose of Payment data is required for the Payout to be accepted."
      },
      "AccountQueryErrorResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "RouteDefinitionChangePerCountryAndCurrency": {
        "required": [
          "metadataVersion",
          "metadataVersionDate",
          "notificationId",
          "notificationType",
          "payoutMethod",
          "recipientCountryCode",
          "recipientCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Payout method code. Valid values are B- Bank , W- Wallet (This ENUM is not currently supported. It is for future use.)\n",
            "enum": [
              "B",
              "w"
            ]
          },
          "notificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the notification.\n",
            "example": "58e0a7d7-eebc-11d8-9669-0800200c9a66"
          },
          "metadataVersion": {
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
            "type": "string",
            "description": "This is the version of the updated route definition. \nIt is in the format <major-version>.<minor-version>.<patch>.\n\n* patch updates are documentation updates only and should not influence the processing of a payout transaction. Example: changes to the description of Purpose of Payment code.\n\n* minor-version updates indicate backward compatible changes in the route validation rules on a payout transaction. Example: addition of a new Purpose of Payment code.\n\n* major-version updates indicate backward incompatible changes in the route validation rules on a payout transaction. Such changes are usually regulatory in nature or due to partner migration on Visa's backend. Example: Purpose of Payment code changing from a \"conditional\"/ \"recommended\" to a \"required\" field.\n",
            "example": "1.0.0"
          },
          "notificationType": {
            "type": "string",
            "description": "Notification Type. Valid value- LIVE_UPDATE, FUTURE_UPDATE (This ENUM is not currently supported. It is for future use.)",
            "enum": [
              "LIVE_UPDATE",
              "FUTURE_UPDATE"
            ]
          },
          "metadataVersionDate": {
            "type": "string",
            "description": "This is the date when the metadata version will go live.\n",
            "format": "date"
          },
          "recipientCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-3166 (Alpha-3) country code\n",
            "example": "USA"
          },
          "recipientCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-4217 (Alpha-3) currency code\n",
            "example": "USD"
          },
          "recipientWalletOperator": {
            "type": "string",
            "description": "Wallet operator enumerated names. This field will be present only when the payoutMethod is W. recipientWalletOperator is for future use as payoutMethod=W is not currently supported.\n",
            "example": "BKASH"
          }
        }
      },
      "202AccountPayoutCreatedResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "RouteDefinitionRecallPerCountryClusterAndCurrency": {
        "required": [
          "metadataVersion",
          "metadataVersionDate",
          "notificationId",
          "notificationType",
          "payoutMethod",
          "recipientCountryCluster",
          "recipientCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Payout method code. Valid value is B- bank.\n",
            "enum": [
              "B"
            ]
          },
          "notificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the notification. In case of a recall (i.e., when the notificationType is \"RECALL\"), this field will contain the notificationId of a previously sent notification that is being recalled.\n",
            "example": "58e0a7d7-eebc-11d8-9669-0800200c9a66"
          },
          "metadataVersion": {
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
            "type": "string",
            "description": "This is the version of the route definition recalled by VISA. \nIt is in the format <major-version>.<minor-version>.<patch>.\n\n* patch updates are documentation updates only and should not influence the processing of a payout transaction. Example: changes to the description of Purpose of Payment code.\n\n* minor-version updates indicate backward compatible changes in the route validation rules on a payout transaction. Example: addition of a new Purpose of Payment code.\n\n* major-version updates indicate backward incompatible changes in the route validation rules on a payout transaction. Such changes are usually regulatory in nature or due to partner migration on Visa's backend. Example: Purpose of Payment code changing from a \"conditional\"/ \"recommended\" to a \"required\" field.\n",
            "example": "1.0.0"
          },
          "notificationType": {
            "type": "string",
            "description": "Notification type.\n",
            "enum": [
              "RECALL"
            ]
          },
          "metadataVersionDate": {
            "type": "string",
            "description": "This was the expected go-live date of the recalled metadata version.",
            "format": "date"
          },
          "recipientCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-4217 (Alpha-3) currency code\n",
            "example": "USD"
          },
          "recipientCountryCluster": {
            "type": "string",
            "description": "Country Cluster code-valid values are SEPA, CEMAC, UEMOA\n",
            "enum": [
              "SEPA",
              "CEMAC",
              "UEMOA"
            ]
          }
        }
      },
      "FirstName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Required when recipient is an individual.",
        "example": "Joe"
      },
      "StatementNarrative-1": {
        "maxLength": 140,
        "minLength": 1,
        "type": "string",
        "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment. Text will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account or wallet statement. \nNot all wallet operators support a statement narrative.\n\nConditional - (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths).\n\nISO20022 field name: Remittance Information Unstructured\n",
        "example": "testing narrative"
      },
      "StatementNarrative-2": {
        "maxLength": 140,
        "minLength": 1,
        "type": "string",
        "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment. Text will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account or wallet statement. \nNot all wallet operators support a statement narrative.\n\nConditional - (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths).\n\nISO20022 field name: Remittance Information Unstructured       \n",
        "example": "testing narrative"
      },
      "FundingStatus-1": {
        "type": "string",
        "description": "Indicates funding status of the payout transaction.\n",
        "enum": [
          "FUNDED",
          "NOT_FUNDED"
        ]
      },
      "EndToEndId": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity's customer to track the transaction end-to-end\n\nConditional: Required if payout to a wallet recipient\n\nISO20022 field name: end-to-end identification \n",
        "example": "5003f6a02c4411b2aa5747378ae5331"
      },
      "PayoutWalletRequest": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail"
              }
            ]
          }
        }
      },
      "AccountId": {
        "maxLength": 31,
        "minLength": 12,
        "type": "string",
        "description": "The accountId uniquely identifies the ledger account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
      },
      "NameI": {
        "maxLength": 70,
        "minLength": 3,
        "type": "string",
        "description": "Full name of Individual",
        "example": "Visa"
      },
      "PayoutReceivedAfter202InSendPayout-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "VerifyRecipientWalletRequest": {
        "required": [
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Originating Entity must indicate the payout method i.e. Wallet\n\nValid values:\n- \"W\" Visa Direct Wallet\n",
            "enum": [
              "W"
            ]
          },
          "recipientDetail": {
            "required": [
              "type"
            ],
            "properties": {
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual. Only 'I' is supported. \n\nISO20022 field name: Creditor Identification Type\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided.\n\nISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "PayoutReceivedAfter202InSendPayout-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n- AWAITING_INFORMATION: Awaiting more information before transaction is processed .\n- PAYMENT_SENT: The payout has been submitted to the Network partner\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled\n- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "example": "PAYMENT_SENT",
        "enum": [
          "PAYMENT_RECEIVED",
          "AWAITING_INFORMATION",
          "PAYMENT_SENT",
          "PAYMENT_DELIVERED",
          "PENDING_CANCELLATION",
          "CANCELLED",
          "RETURNED",
          "REJECTED"
        ]
      },
      "PayoutReceivedAfter202InSendPayout-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "SenderCompany-1": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Sender company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\"<br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "SenderCompany-2": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n\nISO20022 field name: Debtor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "Name": {
        "maxLength": 70,
        "minLength": 1,
        "type": "string",
        "description": "It can have either company name or fullname based on type (I or C)",
        "example": "Visa"
      },
      "ValidatePayoutFromOriginator200Response": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              },
              "responseCode": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Response code that provides the result of the validation request."
              }
            },
            "description": "This object will be present only when status code is INVALID."
          },
          "validationResultCode": {
            "type": "string",
            "description": "Below are the possible values.\nVALID\nINVALID\nDUPLICATE"
          }
        }
      },
      "ValidPayoutWithNetworkResponse-4": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. \n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "ValidPayoutWithNetworkResponse-2": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "nameMatch": {
            "$ref": "#/components/schemas/nameMatch-1"
          },
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "bankAccountName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "recipient bank account name i.e. account holder name as returned by the partner when nameMatch = ‘PARTIAL_MATCH’. Available for some corridors. Applicable only for Accounts. Future use – not yet available."
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed.\n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "ValidPayoutWithNetworkResponse-1": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "nameMatch": {
            "$ref": "#/components/schemas/nameMatch"
          },
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "bankAccountName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "recipient bank account name i.e. account holder name as returned by the partner when nameMatch = ‘PARTIAL_MATCH’. Available for some corridors. Applicable only for Accounts. Future use – not yet available."
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. Only applicable for Wallet Payouts.\n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "ClientReferenceId-1": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction.\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\n\nOnly alphanumeric and '-' characters are allowed.\n"
      },
      "ValidatePayoutResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse"
          }
        ]
      },
      "LedgerNotification-6": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "OperatorName": {
        "type": "string",
        "description": "wallet operator enumerated names.",
        "example": "WECHATPAY"
      },
      "LedgerNotification-7": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "LedgerNotification-1": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "AccountVerificationRequest-1": {
        "required": [
          "clientVerificationReference",
          "initiatingPartyId",
          "payoutMethod",
          "recipientDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Method of payout. For accounts, this should be 'B'.",
            "example": "B",
            "enum": [
              "B"
            ]
          },
          "recipientDetail": {
            "required": [
              "bank",
              "type"
            ],
            "type": "object",
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "name": {
                "description": "Full name of recipient, conditionally required when firstName and lastName are not provided.",
                "example": "Joe Smith",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndividualsName"
                  }
                ]
              },
              "type": {
                "description": "Identifies the type of recipient - \"I\" for Individual and \"C\" for Company.\n\nISO20022 field name: Creditor Identification Type       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Type"
                  }
                ]
              },
              "lastName": {
                "description": "Recipient last name, conditionally required when name is not provided. ISO20022 field name: Creditor Last Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LastName"
                  }
                ]
              },
              "firstName": {
                "description": "Recipient first name, conditionally required when name is not provided. ISO20022 field name: Creditor First Name\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FirstName"
                  }
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets.  Valid values :  * P- Passport  * D-Driving License  * N-National Id  * T-Tax Id  * L-Legal Entity Registration Number  * F-Foreign Id\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths) ISO20022 field name: \"Creditor Private Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            }
          },
          "initiatingPartyId": {
            "type": "string",
            "description": "The ID of the initiating party.",
            "example": "123456"
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "WalletTransactionDetail": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientAccountPayoutAddress": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Street Name \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Floor\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "AccountBalanceWithTimestamp-1": {
        "required": [
          "accountId",
          "balance"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "balanceTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "lastTransactionTimestamp": {
            "description": "The timestamp of the last money movement on the client's account. \n\nThis is a valid ISO 8601 timestamp, such as YYYY-MM-DDThh:mm:ss.sss±hh:mm.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "LastName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Required when recipient is an individual.",
        "example": "Anderson"
      },
      "401ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/401ErrorResponseObject"
              }
            ]
          }
        }
      },
      "SourceOfFunds": {
        "type": "string",
        "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout.Valid values are:\nConditional - source of funds is required by some endpoints, please check for Visa Payment Guide for details  \n\n01 = Visa credit\n02 = Visa debit\n03 = Visa prepaid\n04 = Cash\n05 = Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 = Credit accounts other than those linked to a Visa card (includes credit cards and proprietary credit lines)\n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account. This field is required for Money Transfers and Funds Disbursements.\n\nISO20022 field name: Debtor Account Type\n"
      },
      "PendingCancelledTransactionStatus-1": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n- CANCELLED - Payout is cancelled when in pending status\n",
        "enum": [
          "PENDING",
          "CANCELLED"
        ]
      },
      "WindowDueDetails": {
        "required": [
          "currencyCode",
          "dueDateTime",
          "totalAmountDue",
          "vplContact"
        ],
        "type": "object",
        "properties": {
          "vplContact": {
            "$ref": "#/components/schemas/VplContact"
          },
          "dueDateTime": {
            "$ref": "#/components/schemas/DueDateTime"
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "totalAmountDue": {
            "$ref": "#/components/schemas/TotalAmountDue"
          }
        }
      },
      "LocalSchemeTransactionId": {
        "maxLength": 70,
        "minLength": 1,
        "type": "string",
        "description": "Optional.\nApplicable for statuses PAYMENT_SENT, PAYMENT_DELIVERED, DELIVERED_TO_SCHEME and DELIVERED_TO_RECIPIENT_BANK, when available.\n"
      },
      "SendPayoutRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest"
          }
        ]
      },
      "AccountBalance": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "The balance amount for a particular currency.\n\nNote: The number of decimal places assumed for this field depends on the currency.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedAmount"
              }
            ]
          },
          "currencyCode": {
            "description": "The currency code is a three letter ISO 4217 code. \n\nE.g. GBP for British sterling pounds.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        },
        "description": "Represents a monetary value containing a decimal amount value along with a currency code. \n"
      },
      "ConditionDefiningFields": {
        "type": "array",
        "description": "This section identifies which field, object or array influences conditions in the conditions[] array. These fields (including the properties within an object or array-instance) appear as \"facts\" in the conditions ID definitions.\n",
        "items": {
          "$ref": "#/components/schemas/TransactionRefWithCondition"
        }
      },
      "TransactionStatus-1": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n- AWAITING_INFORMATION: Awaiting more information before transaction is processed .\n- PAYMENT_SENT: The payout has been submitted to the Network partner\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is applicable for all Wallet Payments and Account Payments only when provided by the Network Partner.\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled\n- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n- DELIVERED_TO_SCHEME: The payout has been submitted to the local country scheme for further processing. This status is applicable for Account Payments only when provided by the Network Partner.\n- DELIVERED_TO_RECIPIENT_BANK: The payout has been submitted to the recipient’s bank. This status is applicable for Account Payments only when provided by the Network Partner.\n",
        "example": "PAYMENT_SENT",
        "enum": [
          "PAYMENT_RECEIVED",
          "AWAITING_INFORMATION",
          "PAYMENT_SENT",
          "PAYMENT_DELIVERED",
          "PENDING_CANCELLATION",
          "CANCELLED",
          "RETURNED",
          "REJECTED",
          "DELIVERED_TO_SCHEME",
          "DELIVERED_TO_RECIPIENT_BANK"
        ]
      },
      "TransactionStatus-2": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n- AWAITING_INFORMATION: Awaiting more information before transaction is processed .\n- PAYMENT_SENT: The payout has been submitted to the Network partner\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is applicable for all Wallet Payments and Account Payments only when provided by the Network Partner.\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled\n- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "example": "PAYMENT_SENT",
        "enum": [
          "PAYMENT_RECEIVED",
          "AWAITING_INFORMATION",
          "PAYMENT_SENT",
          "PAYMENT_DELIVERED",
          "PENDING_CANCELLATION",
          "CANCELLED",
          "RETURNED",
          "REJECTED"
        ]
      },
      "SettlementOverdueFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "initiatingPartyId",
          "nextDueDetails",
          "notificationDateTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "SETTLEMENT_OVERDUE"
            ]
          },
          "nextDueDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementOverdueDetails"
            }
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "IdentityListItem": {
        "title": "IdentityListItem",
        "required": [
          "label",
          "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The visible label to be presented in the UI list."
          },
          "value": {
            "type": "string",
            "description": "The stored value for the visible list item label."
          }
        },
        "description": "This is used to populate a recipient identity field which needs to be displayed as a list in the UI."
      },
      "ValidPayoutResponse-2": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds. \n",
            "enum": [
              "VALID"
            ]
          }
        }
      },
      "SendPayoutFromOriginatorRequest": {
        "required": [
          "originatorDetail",
          "recipientDetail",
          "senderDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "senderDetail": {
            "required": [
              "address",
              "sourceOfFunds"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "Sender full name or company name<br><br>ISO20022 field name: Ultimate Debtor Name<br>P2A and P2W: Conditional (Mandatory if sender type is C or if sender type is I and sender first name and last name are not provided). Company name must be a minimum of 2 characters in length. Individuals name must be a minimum of 3 characters in length.<br>This field must not contain exclusively numeric characters<br>Individual's name in this field (when sender type is I) must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional (Please do not use this field for non Visa transactions. Use firstName,  lastName & middleName instead. Use this for Visa transactions if you cannot provide recipient first name and last name as separate fields. If the transaction is a funds disbursement, provide the name of merchant or government entity sending the funds.<br><br>If the transaction is a pre-paid load or credit card bill pay and U.S. domestic, provide the cardholder's name.). The minimum length is 2 and maximum length is 30."
              },
              "type": {
                "type": "string",
                "description": "Identifies the type of sender - Individual or Company \n\n\nISO20022 field name: Ultimate Debtor Identification Type\nP2A: Mandatory (Valid values : “I”=Individual, “C”=Company)\nP2W: Mandatory (Valid values : “I”=Individual, “C”=Company)\nP2C: N/A",
                "enum": [
                  "I"
                ]
              },
              "address": {
                "type": "object",
                "properties": {
                  "city": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address city\n\nISO20022 field name: Ultimate Debtor Address Town Name\n\n P2A: Mandatory. \nP2W: Mandatory. \n P2C: Optional. The maximum length is 25."
                  },
                  "state": {
                    "maxLength": 25,
                    "minLength": 2,
                    "type": "string",
                    "description": "Sender address state\n\nISO20022 field name: Ultimate Debtor Address Country Sub-division\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2C: The maximum length is 2."
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Sender address country\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Ultimate Debtor Address Country\n\nP2A: Mandatory. \nP2W: Mandatory.\n\nP2C:Conditional (Refer to OCT GIG on country-specific required fields)"
                  },
                  "postalCode": {
                    "maxLength": 10,
                    "minLength": 5,
                    "type": "string",
                    "description": "Sender address postal code\n\nISO20022 field name: Ultimate Debtor Address Postal Code\nP2A: The minLength length is 1. \nP2W: The minLength length is 1. \nP2C: The maximum length is 10."
                  },
                  "addressLine1": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address line 1\n\nISO20022 field name: Ultimate Debtor Address Line 1\n\nP2A: Mandatory. \nP2W: Mandatory. \nP2C: Optional. The maximum length is 35"
                  },
                  "addressLine2": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sender address line 2\n\nISO20022 field name: Ultimate Debtor Address Line 2\nP2C: N/A"
                  }
                }
              },
              "lastName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender last name<br><br>ISO20022 field name: Ultimate Debtor Last Name<br>P2A and P2W: Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional  (Mandatory for transaction routed over non Visa networks through Push Payment Gateway Service)."
              },
              "firstName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender first name<br><br>ISO20022 field name: Ultimate Debtor First Name<br>P2A and P2W: Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional  (Mandatory for transaction routed over non Visa networks through Push Payment Gateway Service)."
              },
              "middleName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender middle name<br><br>ISO20022 field name: N/A<br>P2A: N/A<br>P2W: N/A<br>P2C: Optional"
              },
              "cityOfBirth": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Sender city of birth\n\nISO20022 field name: Ultimate Debtor City of Birth\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "dateOfBirth": {
                "maxLength": 10,
                "minLength": 10,
                "pattern": "^\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d$",
                "type": "string",
                "description": "Sender date of birth\n\nISO20022 field name: Ultimate Debtor Birth Date\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Optional"
              },
              "contactEmail": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "contactNumber": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender contact number\nFormat: pattern \\+[0-9]{1,3}-[0-9()+\\-]{1,30}\n\nISO20022 field name: Ultimate Debtor Contact Phone Number\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "sourceOfFunds": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout. \nValid values are:\n01 =  Visa credit \n02 =  Visa debit\n03 =  Visa prepaid\n04 =  Cash\n05 =  Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 =  Credit accounts other than those  linked to a Visa card (includes credit cards and proprietary credit lines)\n\nISO20022 field name: Debtor Account Type Source of Funds\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory \n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account."
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Debtor Remittance Information Document Name\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Debtor Remittance Information Document Description\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
                    }
                  }
                }
              },
              "countryOfBirth": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "Sender country of birth\n\nISO20022 field name: Ultimate Debtor Country of Birth\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
              },
              "sourceOfIncome": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender source of income\n\nISO20022 field name: Ultimate Debtor Source of Income\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "identificationList": {
                "type": "array",
                "description": "Identification list of sender \nISO20022 field name: N/A\nP2A: Multiple instance of IDs can be supported in the same request\nP2W: Multiple instance of IDs can be supported in the same request\nP2C: We have a current limitation that sender ID and recipient ID information are mutually exclusive. If both sender ID and recipient ID are sent in the same request, only sender ID related information will be sent to the issuer. \nAdditionally, only 1 instance of ID per sender or recipient is currently supported. If more than one instance is provided, only the first instance will be forwarded to the issuer.",
                "items": {
                  "type": "object",
                  "properties": {
                    "idType": {
                      "maxLength": 4,
                      "minLength": 1,
                      "type": "string",
                      "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Ultimate Debtor Identification Code\n\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values : \n P- Passport \n D-Driving License\n N-National Id\n T-Tax Id\n L-Legal Entity Registration Number\n F-Foreign Id \n\nP2C: This field will contain the type of sender identification. The valid values are: n CUID - Customer identification - unspecified \n NTID - National identification\n PASN - Passport number\n DRLN - Driver license\n TXIN - Tax identification \n CPNY - Company registration number\n PRXY - Proxy identification \n SSNB - Social security number \n ARNB - Alien registration number \n LAWE - Law enforcement identification \n MILI - Military identification \n TRVL - Travel identification - non-passport \n EMAL - Email\n PHON - Phone number \nFor a given instance of identificationList[], a minimum of idType and idNumber fields should be provided, else the ID information will not be forwarded to the issuer."
                    },
                    "idNumber": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Ultimate Debtor Identification\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: This field will contain an acquirer-populated value associated with the Identification Type in field idType. \nFor a given instance of identificationList[] , a minimum of idType and idNumber fields should be provided, else the ID information will not be forwarded to the issuer."
                    },
                    "idOwnerType": {
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "string",
                      "description": "This field denotes whether the Tax ID is a business or individual's Tax ID when idType contains the value of TXIN (Tax identification). \n\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional \nThe valid values are : \nC (Company/Business) \nI (Individual)"
                    },
                    "idIssueCountry": {
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Ultimate Debtor Identification Issuer Country\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: This tag will contain the 3-digit ISO country code of the ID issuing country."
                    }
                  }
                }
              },
              "senderAccountNumber": {
                "maxLength": 34,
                "minLength": 1,
                "type": "string",
                "description": "P2A: A sender account number is used to uniquely identify the sender’s account. \nP2W: A sender account number is used to uniquely identify the sender’s account. \nThis field is Mandatory if a senderReferenceNumber is not sent.\nNote:\n1. For P2A or P2W Originators should provide either a sender reference number or a sender account number but not both.\n2. Originators should not send any PANs in this field for P2A or P2W.\n\nP2C: If the transaction is a money transfer, pre-paid load, or credit card bill pay, and if the sender intends to fund the transaction with a financial instrument (eg. debit card), this field is required and must contain the sender's account number. \nIf the transaction is a funds disbursement, the field is not required.\nNote: \n1. For P2C this is a 16-digit PAN or token or account number associated with the sender’s account.\n\nISO20022 field name: Debtor Account Number\nP2A: 34\nP2W: 34\nP2C: 1-19"
              },
              "senderReferenceNumber": {
                "maxLength": 16,
                "minLength": 1,
                "type": "string",
                "description": "P2A: A sender reference number is used to uniquely identify the person or entity funding the transaction. \nThis field is Mandatory if a senderAccountNumber is not sent.\nNote: \n1. Originators should not send any PANs in this field for P2A, P2W and P2C.\n2. For P2A Originators should provide either a sender reference number or a sender account number but not both.\n\nP2C: If the transaction is a money transfer, pre-paid load, or credit card bill pay, and if the sender intends to fund the transaction with a non-financial instrument (for example, cash), a reference number unique to the sender is required. \nThis field is Mandatory if the transaction is a funds disbursement. \nThis field is Mandatory if senderAccountNumber is not sent.\nNote: \n1. Originators should not send any PANs in this field for P2A, P2W and P2C.\n\nISO20022 field name: Debtor Reference Number\nP2A: 1-34\nP2W: 1-34\nP2C: 1-16"
              },
              "beneficiaryRelationship": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Sender relationship with the recipient\n\nISO20022 field name: Ultimate Debtor Beneficiary Relationship\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "customizedIdentification": {
                "type": "object",
                "properties": {
                  "businessIdentificationNumber": {
                    "maxLength": 20,
                    "minLength": 1,
                    "type": "string",
                    "description": "This is an alphanumeric value that carries the sender's identification number issued to the sender by the government or an authorized national entity. This field is to be used if the sender is a business (e.g. Disbursements)\nNote: If senderIdentificationNumberIndividual is not populated, then this field needs to be populated mandatorily for Brazil domestic transactions.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "individualIdentificationNumber": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "This is an alphanumeric value that carries the sender's identification number issued to the sender by the government or an authorized national entity or contains the customer’s VAT registration number for the individual tax identification. This field is to be used if the sender is an Individual (e.g. P2P payments)\nNote: If senderIdentificationNumberBusiness is not populated, then this field needs to be populated mandatorily for Brazil domestic transactions. If businessApplicationId has PS, then this field to be populated for Argentina domestic transaction.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              }
            }
          },
          "recipientDetail": {
            "required": [
              "payoutMethod"
            ],
            "type": "object",
            "properties": {
              "bank": {
                "required": [
                  "accountName",
                  "accountNumber",
                  "accountNumberType",
                  "bankName",
                  "countryCode",
                  "currencyCode"
                ],
                "type": "object",
                "properties": {
                  "BIC": {
                    "maxLength": 11,
                    "minLength": 8,
                    "type": "string",
                    "description": "Recipient bank account Business Identifier Code (BIC) \n\nISO20022 field name: Creditor Agent Financial Institution BICFI\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A"
                  },
                  "bankCode": {
                    "maxLength": 12,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account bank code\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A"
                  },
                  "bankName": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\nP2A: Mandatory\nP2W: N/A\nP2C: N/A"
                  },
                  "branchCode": {
                    "maxLength": 12,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account branch code\n\nISO20022 field name: Creditor Agent Branch Identification\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A"
                  },
                  "accountName": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account name i.e. accountholder name as recorded on recipient bank account\n\nISO20022 field name: Creditor Account Name\nP2A: Mandatory (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A"
                  },
                  "accountType": {
                    "type": "string",
                    "description": "Recipient bank account type\n\n1 - Checking\n2 - Saving\n3 - Maestra\n4 - Vista\n5 - Loan\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A",
                    "enum": [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5"
                    ]
                  },
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient bank account country code\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Agent Financial Institution Country Code\nP2A: Mandatory (Refer to Payouts Endpoint Guide on country-specific codes)\nP2W: N/A\nP2C: N/A"
                  },
                  "bankCodeType": {
                    "type": "string",
                    "description": "Recipient bank account bank code type\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A",
                    "enum": [
                      "ABA",
                      "SORT_CODE",
                      "DEFAULT"
                    ]
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "Recipient bank account currency code\nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name: Creditor Account Currency\nP2A: Mandatory (Refer to Payouts Endpoint Guide on country-specific currency codes)\nP2W: N/A\nP2C: N/A"
                  },
                  "accountNumber": {
                    "maxLength": 34,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient bank account number\n\nISO20022 field name: Creditor Account Number or IBAN\nP2A: Mandatory (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: N/A\nP2C: N/A"
                  },
                  "accountNumberType": {
                    "type": "string",
                    "description": "Recipient bank account number type \n\nISO20022 field name: Creditor Financial Institution Account Number Type\nP2A: Mandatory (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values: \"IBAN\" and \"DEFAULT\"\nP2W: N/A\nP2C: N/A",
                    "enum": [
                      "IBAN",
                      "DEFAULT"
                    ]
                  }
                },
                "description": "If payout is push to bank account, this object is required(P2A only)"
              },
              "card": {
                "required": [
                  "accountNumber"
                ],
                "type": "object",
                "properties": {
                  "vauFlag": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient primary account number Visa Account Updater (VAU) flag\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional (If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : N or Y (if Y then will cause VAU to be performed)"
                  },
                  "accountType": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values. \n00-Not applicable \n01-Saving account \n02-Checking account \n03-Credit card account \n04-Universal account\nDefault is set to “00“ if not provided.\n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\n P2C:Optional",
                    "enum": [
                      "00",
                      "10",
                      "20",
                      "30",
                      "40"
                    ]
                  },
                  "accountNumber": {
                    "maxLength": 19,
                    "minLength": 13,
                    "pattern": "^\\d*$",
                    "type": "string",
                    "description": "Recipient primary account number, or network token account number\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Mandatory"
                  },
                  "expirationDate": {
                    "maxLength": 7,
                    "minLength": 7,
                    "type": "string",
                    "description": "Recipient primary account number expiration date\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional",
                    "format": "YYYY-MM"
                  }
                },
                "description": "If payout is push to card, this object is required(P2C only)"
              },
              "name": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "Recipient full name or company name<br><br>ISO20022 field name: Creditor Name<br>P2A and P2W: Conditional (Mandatory if recipient type is C or if recipient type is I and recipient first name and last name are not provided). Company name must be a minimum of 2 characters in length. Individuals name must be a minimum of 3 characters in length.<br>This field must not contain exclusively numeric characters<br>Individual's name in this field (when recipient type is I) must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional (Please do not use this field for non Visa transactions. Please use firstName, lastName & middleName instead. Use this for Visa transactions if you cannot provide recipient first name and last name as separate fields). The maximum length for P2C is 30"
              },
              "type": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Identifies the type of recipient - Individual or Company \n\n\nISO20022 field name: Creditor Identification Type\nP2A: Mandatory (Valid values : “I”=Individual, “C”=Company)\nP2W: Mandatory (Valid values : “I”=Individual, “C”=Company)\nP2C: N/A",
                "x-variant": "| enumeration"
              },
              "wallet": {
                "required": [
                  "accountIdentifier",
                  "accountIdentifierType",
                  "countryCode",
                  "currencyCode",
                  "operatorName"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-3166 (numeric) country code\nP2A: N/A\nP2W: Mandatory (Refer to Payouts Endpoint Guide on country-specific codes)\nP2C: N/A"
                  },
                  "currencyCode": {
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "description": "Recipient wallet country code.\nFormat: 3-digit ISO-4217 (numeric) currency code\nP2A: N/A\nP2W: Mandatory (Refer to Payouts Endpoint Guide on country-specific currency codes)\nP2C: N/A"
                  },
                  "operatorName": {
                    "type": "string",
                    "description": "This identifies the non bank wallet operator that has issued the account to the recipient and is going to receive and post the funds to the recipients account. Enum provided by Visa Direct to Wallet Operator.\nP2A: N/A\nP2W: Mandatory\nP2C: N/A",
                    "enum": [
                      "WECHATPAY"
                    ]
                  },
                  "accountIdentifier": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "This identifies the identifier of the recipients account with the wallet operator to which the funds have to be deposited. (e.g., wallet address - phone/email/custom identifier that identifies the account with the digital wallet operator)\n-\tIf EMAIL then verify whether the Email is in valid Email format\n-\tIf PHONENUMBER then verify if the value is numeric , + at the beginning of the value will be considered as valid. e.g. +65123456789 (note, refer ISO spec E.164)\n-\tIf USERNAME then check whether it is a valid string. \n\nNote - An E.164 number has three components.\n1. The prefix +.\n2. A 1-3 digit country code.\n3. A subscriber number.\nP2A: N/A\nP2W: Mandatory\nP2C: N/A"
                  },
                  "accountIdentifierType": {
                    "type": "string",
                    "description": "This identifies type of account Identifier. Supported values are PHONENUMBER, EMAIL, USERNAME.\nP2A: N/A\nP2W: Mandatory\nP2C: N/A",
                    "enum": [
                      "PHONENUMBER",
                      "EMAIL",
                      "USERNAME"
                    ]
                  }
                },
                "description": "If payout is push to wallet, this object is required(P2W only)"
              },
              "address": {
                "type": "object",
                "properties": {
                  "city": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "description": "RRecipient address city\n\nISO20022 field name: Creditor Address Town Name\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2C: The maximum length is 25"
                  },
                  "state": {
                    "maxLength": 25,
                    "minLength": 2,
                    "type": "string",
                    "description": "Recipient address state\n\nISO20022 field name: Creditor Address Country Sub-division\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2C: The maximum length is 3"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Recipient address country\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Address Country\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)"
                  },
                  "postalCode": {
                    "maxLength": 16,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address postal code\n\nISO20022 field name: Creditor Address Postal Code\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2A: The maximum length for P2A is 10.\nP2W: The maximum length for P2W is 10."
                  },
                  "streetName": {
                    "maxLength": 99,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address street name<br><br>ISO20022 field name: N/A<br>P2A: N/A<br>P2W: N/A<br>P2C: Optional"
                  },
                  "addressLine1": {
                    "maxLength": 99,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address line 1\n\nISO20022 field name: Creditor Address Line 1\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2A: The maximum length for P2A is 50\nP2W: The maximum length for P2W is 50"
                  },
                  "addressLine2": {
                    "maxLength": 99,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address line 2\n\nISO20022 field name: Creditor Address Line 2\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Conditional (Refer to OCT GIG on country-specific required fields)\nP2A: The maximum length for P2A is 50\nP2W: The maximum length for P2W is 50"
                  },
                  "buildingNumber": {
                    "maxLength": 16,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address building number\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "minorSubDivisionCode": {
                    "maxLength": 16,
                    "minLength": 1,
                    "type": "string",
                    "description": "Recipient address sub-division minor code\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "lastName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient last name<br><br>ISO20022 field name: Creditor Last Name<br>P2A and P2W: Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional (Mandatory for transaction routed over non Visa networks through Push Payment Gateway Service)."
              },
              "firstName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient first name<br><br>ISO20022 field name: Ultimate Debtor First Name<br>P2A and P2W: Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table><br>P2C: Conditional  (Mandatory for transaction routed over non Visa networks through Push Payment Gateway Service)."
              },
              "middleName": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient middle name<br><br>ISO20022 field name: N/A<br>P2A: N/A<br>P2W: N/A<br>P2C: Optional"
              },
              "cityOfBirth": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "dateOfBirth": {
                "type": "string",
                "description": "Recipient date of birth\n\nISO20022 field name: Creditor Birth Date\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A",
                "format": "date"
              },
              "contactEmail": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string",
                "description": "Recipient email address\n\nISO20022 field name: Creditor Contact Email Address\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "payoutMethod": {
                "maxLength": 1,
                "minLength": 1,
                "type": "string",
                "description": "Originating Entity must indicate the payout method i.e.Push to Account(P2A) or Push to Card(P2C) or Push to Wallet(P2W)\n\nValid values:\n“B” – Push to Bank account\n“C” – Push to Card \n“W” – Push to Wallet\n\nISO20022 field name: n/a\nP2A: Mandatory\nP2W: Mandatory\nP2C: Mandatory",
                "x-variant": "| enumeration"
              },
              "contactNumber": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string",
                "description": "Recipient contact number, required in certain markets\nFormat: pattern \\+[0-9]{1,3}-[0-9()+\\-]{1,30}\n\nISO20022 field name: Creditor Contact Phone Number\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Creditor Remittance Information Document Name\n"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Creditor Remittance Information Document Description\n"
                    }
                  }
                }
              },
              "countryOfBirth": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^\\d\\d\\d$",
                "type": "string",
                "description": "Recipient country of birth\n\nISO20022 field name: Creditor Country of Birth\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
              },
              "identificationList": {
                "type": "array",
                "description": "Identification list of recipient \nISO20022 field name: N/A\nP2A: Multiple instance of IDs can be supported in the same request\nP2W: Multiple instance of IDs can be supported in the same request\nP2C: We have a current limitation that sender ID and recipient ID information are mutually exclusive. If both sender ID and recipient ID are sent in the same request, only sender ID related information will be sent to the issuer. \nAdditionally, only 1 instance of ID per sender or recipient is currently supported. If more than one instance is provided, only the first instance will be forwarded to the issuer.",
                "items": {
                  "type": "object",
                  "properties": {
                    "idType": {
                      "maxLength": 4,
                      "minLength": 1,
                      "type": "string",
                      "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Creditor Identification Code\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values : \n P- Passport \n D-Driving License\n N-National Id\n T-Tax Id\n L-Legal Entity Registration Number\n F-Foreign Id \n\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nValid values : \n P- Passport \n D-Driving License\n N-National Id\n T-Tax Id\n L-Legal Entity Registration Number\n F-Foreign Id \n\nP2C: This field will contain the type of recipient identification. The valid values are: \n CUID - Customer identification - unspecified \n NTID - National identification\n PASN - Passport number\n DRLN - Driver license\n TXIN - Tax identification \n CPNY - Company registration number\n PRXY - Proxy identification \n SSNB - Social security number \n ARNB - Alien registration number \n LAWE - Law enforcement identification \n MILI - Military identification \n TRVL - Travel identification - non-passport \n EMAL - Email\n PHON - Phone number \nFor a given instance of identificationList[], a minimum of idType and idNumber fields should be provided, else the ID information will not be forwarded to the issuer.",
                      "x-variant": "| enumeration"
                    },
                    "idNumber": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\n\nISO20022 field name: Creditor Identification\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: This field will contain an acquirer-populated value associated with the Identification Type in field idType. \nFor a given instance of identificationList[] , a minimum of idType and idNumber fields should be provided, else the ID information will not be forwarded to the issuer."
                    },
                    "idOwnerType": {
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "string",
                      "description": "This field denotes whether the Tax ID is a business or individual's Tax ID when idType contains the value of TXIN (Tax identification). \n\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional \nThe valid values are : \nC (Company/Business) \nI (Individual)"
                    },
                    "idIssueCountry": {
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Creditor Identification Issuer Country\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: This tag will contain the 3-digit ISO country code of the ID issuing country."
                    }
                  }
                }
              }
            }
          },
          "originatorDetail": {
            "required": [
              "address",
              "bankId",
              "merchantCategoryCode",
              "originatorId",
              "originatorName"
            ],
            "type": "object",
            "properties": {
              "bankId": {
                "type": "integer",
                "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. Note: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification\n\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              },
              "address": {
                "required": [
                  "country"
                ],
                "type": "object",
                "properties": {
                  "city": {
                    "maxLength": 13,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity City\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "state": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Originating Entity State Code\nISO20022 field name: Debtor State\nP2A: Conditional (Required if Originating Entity country is US or Canada)\nP2W: Conditional (Required if Originating Entity country is US or Canada)\nP2C: Conditional (Required if Originating Entity country is US or Canada)\n"
                  },
                  "county": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity Country Sub Division Minor code\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "Originating Entity country code. \nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: Debtor Country\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
                  },
                  "postalCode": {
                    "maxLength": 14,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity Postal Code \nISO20022 field name: Debtor Postal Code\nmandatory only for Originators in US and Canada.\nP2A: Conditional (Required if Originating Entity country is US or Canada)\nP2W: Conditional (Required if Originating Entity country is US or Canada)\nP2C: Conditional (Required if Originating Entity country is US or Canada)\nUS length is 5 or 9 characters.  \nCanada - maximum up to 12 characters\nAll other markets- maximum up to 14 characters"
                  },
                  "addressLine": {
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string",
                    "description": "Originating Entity address line\nISO20022 field name: N/A\nP2A: Optional\nP2W: Optional\nP2C: N/A"
                  }
                }
              },
              "bankBIC": {
                "maxLength": 11,
                "minLength": 8,
                "type": "string",
                "description": "Business Identifier Code (BIC) of the Sponsor FI (Acquirer)\nP2A: Mandatory \nP2W: Mandatory \nP2C: N/A"
              },
              "ppgsInfo": {
                "type": "object",
                "properties": {
                  "sharingGroupCode": {
                    "maxLength": 30,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.\n\nRefer to Sharing Group Code (add link to VDP : https://developer.visa.com/request_response_codes#network_id_and_sharing_group_code )\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "merchantPseudoAbaNumber": {
                    "maxLength": 9,
                    "minLength": 9,
                    "type": "string",
                    "description": "This is a number that uniquely identifies the originating entity when they sign up to send Push Payment Gateway transactions. On enrollment, an originating entity will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originating entity.\n\nNote:\nSupported only in US for domestic transactions involving Push Payments Gateway Service.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory for Push payment gateway transactions)"
                  }
                }
              },
              "terminalId": {
                "maxLength": 8,
                "minLength": 1,
                "type": "string",
                "description": "The identifier for the terminal at a card acceptor location. If sending transactions from a card not present environment, use the same value for all transactions. An identification code of fewer than 8 positions must be left-justified and the remainder of the field space-filled.\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Mandatory"
              },
              "originatorId": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account transactions. The Originating Entity should populate Card Acceptor Terminal ID (CAID)  for Push to Card transactions. \nISO20022 field name: Debtor - Originating Entity Identification\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              },
              "originatorBIC": {
                "maxLength": 11,
                "minLength": 1,
                "type": "string",
                "description": "Business Identifier Code (BIC) of the Originating entity\nISO20022 field name: Debtor BIC\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths).\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths).\nP2C: N/A"
              },
              "originatorName": {
                "maxLength": 70,
                "minLength": 1,
                "type": "string",
                "description": "The legal name of the merchant or originating entity sending the payment instruction to Visa.\nISO20022 field name: Debtor Name\nP2C: The maximum length is 25"
              },
              "bankCountryCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Acquirer Country Code\n\nFormat: 3-digit ISO-3166 (numeric) country code\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Mandatory"
              },
              "paymentFacilitator": {
                "type": "object",
                "properties": {
                  "id": {
                    "maxLength": 11,
                    "minLength": 1,
                    "type": "string",
                    "description": "Business Identifier Code (BIC) of the Payment Facilitator i.e. intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Identification\nP2A: Optional. The minimum length is 8\nP2W: Optional. The minimum length is 8\nP2C: Marketplace ID or Payment Facilitator's ID. This field is conditionally required when a payment facilitator is involved."
                  },
                  "name": {
                    "maxLength": 70,
                    "minLength": 1,
                    "type": "string",
                    "description": "The legal name of any intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Name\nP2A: Conditional (Mandatory if payment facilitator is touching the funds)\nP2W: Conditional (Mandatory if payment facilitator is touching the funds)\nP2C: The maximum length is 25"
                  },
                  "country": {
                    "maxLength": 3,
                    "minLength": 3,
                    "pattern": "^\\d\\d\\d$",
                    "type": "string",
                    "description": "The country of any intermediary entity that touches funds prior to settlement with the Visa Member bank (i.e. Acquirer)\n\nISO20022 field name: Initiating Party Country\nP2A: Conditional (Mandatory if payment facilitator is touching the funds)\nP2W: Conditional (Mandatory if payment facilitator is touching the funds)\nP2C: N/A"
                  },
                  "subMerchantId": {
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string",
                    "description": "Sub-Merchant ID containing the sponsored merchant ID. This field is conditionally required when a payment facilitator is involved.\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "pointOfServiceData": {
                "type": "object",
                "properties": {
                  "panEntryMode": {
                    "type": "integer",
                    "description": "A 2-digit code that identifies the method used to enter the cardholder account number and card expiration date. This code specifies whether the entire magnetic stripe is included in an authorization or financial request.\nList of possible PAN Entry Mode values (add link to VDP : https://developer.visa.com/request_response_codes#pan_entry_mode_codes)\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (For a CardPresent scenario, this field is mandatory)"
                  },
                  "motoECIIndicator": {
                    "type": "integer",
                    "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. \nList of possible Moto ECI Indicator (add link to VDP : https://developer.visa.com/request_response_codes - pos_cond_code_codes values)\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (For a CardPresent scenario, this field is mandatory)"
                  },
                  "posConditionCode": {
                    "type": "integer",
                    "description": "A 2 digit code identifying transaction conditions at the point of sale or point of service. For messages that follow an original request, this code identifies the type of processing being done.\nList of possible POS Condition Code values  (add link to VDP : https://developer.visa.com/request_response_codes#pos_cond_code_codes)\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (For a CardPresent scenario, this field is mandatory)"
                  },
                  "specialConditionIndicatorMerchant": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "A value of '7' in this field indicates purchase of cryptocurrency. \nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                }
              },
              "merchantCategoryCode": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Code describing the merchant's type of business product or service known as the merchant category code (MCC). Codes are listed in the Visa Core Rules and Visa Product and Service Rules.\nISO20022 field name: Debtor Other Identification\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              },
              "merchantVerificationValue": {
                "required": [
                  "acquirerAssigned",
                  "visaAssigned"
                ],
                "type": "object",
                "properties": {
                  "visaAssigned": {
                    "maxLength": 6,
                    "minLength": 6,
                    "type": "string",
                    "description": "Visa assigned MVV value\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  },
                  "acquirerAssigned": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Visa assists the acquirer in assigning the last four\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
                  }
                },
                "description": "MerchantVerificationValue (MVV) that identifies merchants participating in a variety of programs."
              },
              "originatorLegalBusinessName": {
                "maxLength": 25,
                "minLength": 1,
                "type": "string",
                "description": "Acceptor’s legal business name associated with the card acceptor identification code for money transfer OCTs. This field is conditionally required for all Money Transfer OCTs.\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              }
            }
          },
          "transactionDetail": {
            "required": [
              "businessApplicationId",
              "localTransactionDateTime",
              "retrievalReferenceNumber",
              "systemTraceAuditNumber",
              "transactionAmount",
              "transactionCurrencyCode"
            ],
            "type": "object",
            "properties": {
              "surcharge": {
                "maxLength": 12,
                "minLength": 1,
                "type": "string",
                "description": "When present, this field contains the sender's surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "endToEndId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - EndtoEnd Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "settlement": {
                "type": "object",
                "properties": {
                  "serviceIndicator": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This flag enables the originator to request for a particular settlement service to be used for settling the transaction. <br><br> Valid values are: <br>0 - International Settlement<br>9 - VIP to decide<br>8 - National Settlement<br><br><b>Note:</b> The default value is 9. This field is only relevant for specific countries where the acquirer has to select 8 in order to settle in the national net settlement service. "
                  }
                }
              },
              "payoutSpeed": {
                "type": "string",
                "description": "Originating Entity to indicate the desired payout speed for the payment. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Instruction Priority\nP2C: N/A\n",
                "enum": [
                  "STANDARD",
                  "PREMIUM"
                ]
              },
              "secondaryId": {
                "maxLength": 28,
                "type": "string",
                "description": "secondaryId is used for C2B use case in the CEMEA region where payee initiates the OCT to the payer. The merchant or acquirer may use this field to obtain an Agreement Id in order to process the request.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "sourceAmount": {
                "type": "integer",
                "description": "Source Amount is required in certain markets to identify the transaction amount entered in the sender's currency code prior to FX conversion by the originating entity.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "additionalData": {
                "type": "array",
                "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "maxLength": 35,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nISO20022 field name: Remittance Information Transaction Additional Details - Name\n"
                    },
                    "value": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nISO20022 field name: Remittance Information Transaction Additional Details - Value\n"
                    }
                  }
                }
              },
              "nationalNetData": {
                "type": "object",
                "properties": {
                  "irfType": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field contains one of the following values: <br>0 - Unknown/default<br>1 - Fixed<br>2 - Ad valorem (%)<br>3 - Composite (fixed amount and ad valorem)\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: This field is optional for Mexico NNSS transactions and not applicable to Colombia and Argentina NNSS transactions"
                  },
                  "accountType": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "This field contains one of the following values: <br>CO - Commercial products<br>CR - Credit<br>DB - Debit<br>PL - Private label<br>PP - Prepaid\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: This field is optional for Mexico NNSS transactions and not applicable to Colombia and Argentina NNSS transactions"
                  },
                  "netMiscAmount": {
                    "type": "integer",
                    "description": "Contains a domestic/national dispute reason code.\n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "irfCategoryCode": {
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field optionally contains any value from 00 to 99.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: This field is optional for Mexico NNSS transactions and not applicable to Colombia and Argentina NNSS transactions"
                  },
                  "chargeBackReason": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Contains a domestic/national dispute reason code.\n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)"
                  },
                  "merchantFiscalId": {
                    "maxLength": 13,
                    "type": "string",
                    "description": "This field contains RFC for the merchant. This is an alphanumeric field. The RFC format can be AAAANNNNNNAAA, where A is alphanumeric value and N is a numeric value.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: This field is optional for Mexico NNSS transactions and not applicable to Colombia and Argentina NNSS transactions"
                  },
                  "reimbursementFee": {
                    "type": "integer",
                    "description": "This field contains the Client-Calculated Interchange Reimbursement Fee in the same currency as the transaction. It must not contain zeros\n\n P2A: N/A\nP2W: N/A\nP2C: This field is mandatory for Mexico NNSS transactions, that is, if the parent object transactionDetail.nationalNetData is present in the request, and originatorDetail.bankCountryCode contains the 3-digit ISO code for Mexico.\n\n Note: reimbursement fee should be numeric. No decimal point appears in this field, the decimal place is implicit based on the currency. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should contain “10099”. If the amount is $100.00 then this field should contain “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should contain “10000”."
                  },
                  "addValueTaxAmount": {
                    "type": "integer",
                    "description": "This is the national government tax for added value of good or service.\nFormat: Minimum Value: 0 Maximum value: 999999999.999 \nAllowed fractional digits: 3. Note: If a currency has three decimal places, the last digit of this field must be zero.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "addValueTaxReturn": {
                    "type": "integer",
                    "description": "This is base value of the IVA (Sales tax). Optional. This field indicates base value of the IVA ( Sales tax which is part of the benefit of the tax legislations for the 2% sale tax return to the cardholder.\nFormat: Minimum Value: 0 Maximum value: 999999999.999 \nAllowed fractional digits: 3. Note: If a currency has three decimal places, the last digit of this field must be zero.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "netMiscAmountType": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Identifies the type of national net miscellaneous amount, valid values include \nA - Airport Charge \nC - Cashback\nT - Tip.\n Must contain one of the above valid values if nationalNetMiscAmount > 0. Must be skipped if nationalNetMiscAmount = 0 \n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)",
                    "enum": [
                      "A",
                      "C",
                      "T"
                    ]
                  },
                  "reimbursementFeeTax": {
                    "type": "integer",
                    "description": "This field contains the VAT calculated for the IRF applicable to the transaction. It must not contain zeros.\n\nP2A: N/A\nP2W: N/A\nP2C: This field is mandatory for Mexico NNSS transactions, that is, if the parent object transactionDetail.nationalNetData is present in the request, and originatorDetail.bankCountryCode contains the 3-digit ISO code for Mexico.\n\n Note: reimbursement fee should be numeric. No decimal point appears in this field, the decimal place is implicit based on the currency. Refer to SMS POS Visa & Visa Electron Technical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should contain “10099”. If the amount is $100.00 then this field should contain “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should contain “10000”."
                  },
                  "taxAmountConsumption": {
                    "type": "integer",
                    "description": "Indicates the National consumption tax amount.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  },
                  "emvTransactionIndicator": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains one of the below valid values: \n0 - Does not apply to EMV \n1 - EMV transaction  \n2 - Fallback transaction.\n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)",
                    "enum": [
                      "0",
                      "1",
                      "2"
                    ]
                  },
                  "costTransactionIndicator": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "Contains one of the below valid values: \n0 - Not a cost inquiry amount \n1 - Cost inquiry transaction.\n\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (if countryCode is Colombia)",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "netReimbursementFeeBaseAmount": {
                    "type": "integer",
                    "description": "The client supplied interchange reimbursement amount expressed in the transaction currency. This must be less than the transaction amount.\nFormat: Minimum Value: 0 Maximum value: 999999999.999 \nAllowed fractional digits: 3. Note: If a currency has three decimal places, the last digit of this field must be zero.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Conditional (Mandatory if countryCode is Colombia)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
                  }
                }
              },
              "purposeOfPayment": {
                "maxLength": 12,
                "minLength": 1,
                "type": "string",
                "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nISO20022 field name: Purpose of Payment\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: Optional"
              },
              "clientReferenceId": {
                "maxLength": 35,
                "minLength": 1,
                "type": "string",
                "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - Transaction Identification\nP2A: Optional\nP2W: Optional\nP2C: N/A"
              },
              "messageReasonCode": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "transactionAmount": {
                "type": "integer",
                "description": "The transaction amount to be paid out to the recipient bank account or card.  Expressed in the currency specified in transaction currency code. \n\nISO20022 field name:  Transaction Information And Status - Instructed Amount\nP2A: Mandatory \nP2A: Mandatory \nP2C: Mandatory\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to the Payouts Endpoint Guide for P2A on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the amount is $100.99, then this field should populate “10099”. If the amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”."
              },
              "purchaseIdentifier": {
                "required": [
                  "referenceNumber",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string",
                    "description": "This field should be populated with one of the following values: <br>1 - if referenceNumber holds the Request to Pay ID<br>6 - If businessApplicationId holds <b>RP<b> or <b>BP<b>. It will be used for C2B use case in the CEMEA region where payee initiates the OCT to the payer.<br>"
                  },
                  "referenceNumber": {
                    "maxLength": 25,
                    "minLength": 25,
                    "type": "string",
                    "description": "Populate this field with the reference identifier for which the payment is being sent. For example, a request to pay ID or other unique ID related to this payment.<br>This field will carry R2P ID/RTX generated request ID for BP and RP BAI. It will be used for C2B use case in the CEMEA region where payee initiates the OCT to the payer."
                  }
                },
                "description": "This is the invoice number or some other reference for billing purposes.</br>e.g. For Airtime top up, this should contain the mobile number (MSISDN) that is being topped up."
              },
              "sourceCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "3-character alpha or numeric currency code for currency of the sourceAmount field. Refer to ISO Codes for list of currency codes.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "statementNarrative": {
                "maxLength": 140,
                "minLength": 1,
                "type": "string",
                "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment.\nText will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account (depends on recipient bank's process)\n\nISO20022 field name: Remittance Information Unstructured\nP2A: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2W: Conditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nP2C: N/A"
              },
              "feeProgramIndicator": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "Contains the fee program indicator, which is used to assess the Interchange Fee Amount in certain scenarios\n\nISO20022 field name: n/a\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "businessApplicationId": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.<br>For R2P feature, businessApplicationId will carry a new BAI value \"RP\" or existing value \"BP\" for C2B domestic OCTs.\n\nValid BAI for Push to Accounts:\n-\tMoney transfer: AA, PP; \n-\tNon-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n \nValid BAI for Push to Cards:\n-\tMoney transfer: AA, PP, BI, FT, WT; \n-\tNon-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD, TU, RP;\n\nISO20022 field name: Payment Category Purpose\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory\n"
              },
              "serviceProcessingType": {
                "required": [
                  "requestType"
                ],
                "type": "object",
                "properties": {
                  "requestType": {
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "description": "Reserved for future use.</br></br>P2A: N/A P2W: N/A P2C: Optional"
                  }
                },
                "description": "This field will contain values that identify the type of service the transaction should be processed."
              },
              "transactionIdentifier": {
                "maxLength": 15,
                "minLength": 15,
                "type": "string",
                "description": "Visa-generated Transaction Identifier that is unique for each original authorization and financial request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing records. If an AFT has been previously sent, corresponding to the Push to Card transaction, this field must include the VisaNet transaction identifier returned in the AFT response.\n\nISO20022 field name: N/A\nP2A: N/A\nP2W: N/A\nP2C: Optional"
              },
              "systemTraceAuditNumber": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set\n\nISO20022 field name: N/A\n"
              },
              "transactionCurrencyCode": {
                "maxLength": 3,
                "minLength": 3,
                "type": "string",
                "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nISO20022 field name:  Transaction Information And Status - Instructed Amount Currency Code\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              },
              "localTransactionDateTime": {
                "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d",
                "type": "string",
                "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n"
              },
              "retrievalReferenceNumber": {
                "maxLength": 12,
                "minLength": 12,
                "pattern": "\\^d{12}$",
                "type": "string",
                "description": "This is a unique identifier generated by the Originating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C.\n\nThe format is recommended to be ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Transaction Information And Status - Original Instruction Identification\nP2A: Mandatory \nP2W: Mandatory \nP2C: Mandatory"
              }
            }
          }
        }
      },
      "NonPayoutFieldDefinition": {
        "required": [
          "$ref",
          "name"
        ],
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "This refers to a JSON Schema definition within the document"
          },
          "name": {
            "type": "string",
            "description": "Name of a field that is only present in Metadata API request. It is not a payout field."
          }
        }
      },
      "PayoutCancelStatus": {
        "type": "string",
        "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n",
        "example": "CANCELLED",
        "enum": [
          "PENDING_CANCELLATION",
          "CANCELLED"
        ]
      },
      "ValidPayoutResponse-1": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds.\n",
            "enum": [
              "VALID"
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "SenderAccountNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional - This field is Mandatory if a senderReferenceNumber is not sent. <br />\nNote:\nClient should provide either a sender reference number or a sender account number but not both.\nClient should not send any PANs in this field for payout.         \n",
        "example": "A42434234S324234"
      },
      "NotificationsErrorResponse": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "description": "Reserved for future use.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "StructuredReferenceValue": {
        "maxLength": 100,
        "minLength": 1,
        "type": "string",
        "description": "SRI Value of the field."
      },
      "BeneficiaryRelationship": {
        "maxLength": 30,
        "minLength": 1,
        "type": "string",
        "description": "Sender's relationship with recipient"
      },
      "PayoutFieldDefinitionForCurrencyCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutFieldDefinition"
          },
          {
            "type": "object",
            "properties": {
              "currencyExponent": {
                "pattern": "^(0|2|3|4)$",
                "type": "string",
                "description": "This field will only be present when the \"name\" parameter in this object contains the value \"currencyCode\" or contains the JSONPath that points to a currency code field in Send Payout API. If present, this field will state the number of decimal places or minor-units allowed (per ISO 4217) for the referenced currency code."
              }
            }
          }
        ]
      },
      "WalletTransactionDetail-7": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-2"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "NotCondition": {
        "required": [
          "id",
          "not"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "It defines an unique 'id' value of a condition"
          },
          "not": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BooleanExpression"
              },
              {
                "$ref": "#/components/schemas/ConditionById"
              }
            ]
          }
        }
      },
      "PurposeOfPayment": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
        "example": "ISBEXP"
      },
      "ContactNumber-1": {
        "maxLength": 16,
        "minLength": 1,
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "Contact phone number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n(note, refer ISO spec E.164)\n"
      },
      "RecipientAdditionalData-1": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "OneOfFields": {
        "type": "array",
        "description": "Conditional:\n\n- It defines field's group. At least one of the 'fields'/'oneOfFields'/'anyOfFields' groups will be populated.\n",
        "items": {
          "required": [
            "fields"
          ],
          "type": "object",
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Field"
              }
            }
          }
        }
      },
      "BooleanExpression": {
        "required": [
          "fact",
          "operator",
          "value"
        ],
        "type": "object",
        "properties": {
          "fact": {
            "type": "string",
            "description": "JSON Path to a key field used in Send Payout API validations, the schema for which is defined in the routeDefiningFields[] or conditionDefiningFields[] section of this file."
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Array"
              },
              {
                "$ref": "#/components/schemas/FactObject"
              }
            ]
          },
          "operator": {
            "type": "string",
            "enum": [
              "equal",
              "in",
              "notEqual",
              "greaterThan",
              "greaterThanInclusive",
              "lessThan",
              "lessThanInclusive",
              "notIn",
              "contains",
              "doesNotContain"
            ]
          }
        }
      },
      "ContactNumber-2": {
        "maxLength": 16,
        "minLength": 1,
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "Contact phone number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n(note, refer ISO spec E.164)  \n"
      },
      "SenderIdentificationList-2": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nValid values : \n* P- Passport \n* D-Driving License\n* N-National Id\n* T-Tax Id\n* L-Legal Entity Registration Number\n* F-Foreign Id\n\nISO20022 field name: Ultimate Debtor Identification Code\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Identification\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Identification Issuer Country\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "SenderIdentificationList-1": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nValid values : \n* P- Passport \n* D-Driving License\n* N-National Id\n* T-Tax Id\n* L-Legal Entity Registration Number\n* F-Foreign Id\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification Code\" or \"Ultimate Debtor Organisation Identification Code\" <br> For 3rd party payments: \"Debtor Private Identification Code\" or \"Debtor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification\" or  \"Ultimate Debtor Organisation Identification\" <br> For 3rd party payments:\"Debtor Private Identification\" or\"Debtor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Private Identification Issuer\" or \"Ultimate Debtor Organisation Identification Issuer\" <br> For 3rd party payments: \"Debtor Private Identification Issuer\" or \"Debtor Organisation Identification Issuer\"\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "CountryCluster": {
        "type": "string",
        "description": "country cluster code.",
        "enum": [
          "SEPA",
          "CEMAC",
          "UEMOA"
        ]
      },
      "200TransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n",
        "enum": [
          "PAYMENT_RECEIVED"
        ]
      },
      "SenderReferenceNumber-1": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional: If the sender intends to fund the transaction with card or wallet and not a bank account, then a reference number unique to the sender is required. This field is required if senderAccountNumber is not sent. Client should not send any card PANs in this field for payout.\n",
        "example": "John"
      },
      "PayoutResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutFromOriginator500Response": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "ReturnedTransactionStatus": {
        "type": "string",
        "description": "- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "enum": [
          "RETURNED",
          "REJECTED"
        ]
      },
      "202AccountPayoutCreatedResponse-1": {
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "202AccountPayoutCreatedResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "Bank-1": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "recipient bank account Business Identifier Code (BIC)\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "recipient bank account bank code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "recipient bank account branch code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "recipient bank account name i.e. account holder name as recorded on recipient bank account\n\n(Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Vista\n* `5` - Loan\n* `6` - NRE\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "recipient bank account bank code type\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "recipient bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "recipient bank account number\n\n(Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber-1"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "recipient bank account number type. Valid values: \"IBAN\", \"ALIAS\" and \"DEFAULT\"\n\n(Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "ALIAS",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "Bank-2": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "beneficiary bank account Business Identifier Code (BIC)\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account bank code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account branch code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "beneficiary bank account name i.e. account holder name as recorded on beneficiary bank account\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Visa\n* `5` - Loan\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank account bank code type\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "beneficiary bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "AddressLine3": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 3rd line of address.",
        "example": "Building 4"
      },
      "RouteDefinitionChangePerCountryClusterAndCurrency": {
        "required": [
          "metadataVersion",
          "metadataVersionDate",
          "notificationId",
          "notificationType",
          "payoutMethod",
          "recipientCountryCluster",
          "recipientCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Payout method code. Valid value is B- bank.\n",
            "enum": [
              "B"
            ]
          },
          "notificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the notification.\n",
            "example": "58e0a7d7-eebc-11d8-9669-0800200c9a66"
          },
          "metadataVersion": {
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
            "type": "string",
            "description": "This is the version of the updated route definition. \nIt is in the format <major-version>.<minor-version>.<patch>.\n\n* patch updates are documentation updates only and should not influence the processing of a payout transaction. Example: changes to the description of Purpose of Payment code.\n\n* minor-version updates indicate backward compatible changes in the route validation rules on a payout transaction. Example: addition of a new Purpose of Payment code.\n\n* major-version updates indicate backward incompatible changes in the route validation rules on a payout transaction. Such changes are usually regulatory in nature or due to partner migration on Visa's backend. Example: Purpose of Payment code changing from a \"conditional\"/ \"recommended\" to a \"required\" field.\n",
            "example": "1.0.0"
          },
          "notificationType": {
            "type": "string",
            "description": "Notification Type. Valid value- LIVE_UPDATE, FUTURE_UPDATE (This ENUM is not currently supported. It is for future use.)",
            "enum": [
              "LIVE_UPDATE",
              "FUTURE_UPDATE"
            ]
          },
          "metadataVersionDate": {
            "type": "string",
            "description": "This is the date when the metadata version will go live.\n",
            "format": "date"
          },
          "recipientCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-4217 (Alpha-3) currency code\n",
            "example": "USD"
          },
          "recipientCountryCluster": {
            "type": "string",
            "description": "Country Cluster code-valid values are SEPA, CEMAC, UEMOA\n",
            "enum": [
              "SEPA",
              "CEMAC",
              "UEMOA"
            ]
          }
        }
      },
      "AddressLine2": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 2nd line of address."
      },
      "AddressLine1": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 1st line of address.",
        "example": "555 Dragon Drive"
      },
      "AllCondition": {
        "required": [
          "all",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "It defines an unique 'id' value of a condition"
          },
          "all": {
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BooleanExpression"
                },
                {
                  "$ref": "#/components/schemas/ConditionById"
                }
              ]
            }
          }
        }
      },
      "RecipientTransactorDetail-4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-4"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-3"
          }
        ]
      },
      "PayoutFromOriginator400Response": {
        "required": [
          "errorResponse"
        ],
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "RecipientTransactorDetail-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-2"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-1"
          }
        ]
      },
      "WalletTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientTransactorDetail-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-3"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-2"
          }
        ]
      },
      "RecipientTransactorDetail-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-1"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-1"
          }
        ]
      },
      "WalletTransactionDetail-6": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-2"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateAccountTransactionDetail": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "PurposeOfPaymentCodes-1": {
        "title": "PurposeOfPaymentCodes",
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PurposeOfPayment-1"
          },
          "description": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Description of purpose of payment code.",
            "example": "Salary/payroll"
          },
          "senderCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is a company."
          },
          "recipientCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is a company."
          },
          "senderIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is an individual."
          },
          "recipientIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is an individual."
          }
        }
      },
      "SendPayoutRequest-6": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-6"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-6"
          }
        ]
      },
      "ValidatePayoutWalletRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest"
          }
        ]
      },
      "SendPayoutRequest-7": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-7"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-7"
          }
        ]
      },
      "PayoutResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "SendPayoutRequest-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-2"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-2"
          }
        ]
      },
      "SendPayoutRequest-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-1"
          }
        ]
      },
      "PayoutResponse-7": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutResponse-6": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the recipient account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the recipient bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "WalletVerifyResponse": {
        "required": [
          "verificationId",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "verificationStatus": {
            "type": "string",
            "description": "Provides the status of verification request. * COMPLETED - Request was completed and result is available. * NOT_COMPLETED - Wallet Partner's end wallet operator or Wallet Operator not available.\n",
            "example": "COMPLETED",
            "enum": [
              "COMPLETED",
              "NOT_COMPLETED"
            ]
          },
          "walletVerificationDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletVerificationDetail"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        },
        "description": "This object is only present if verificationStatus is COMPLETED"
      },
      "ServiceDetail-1": {
        "properties": {
          "traceable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is traceable"
          },
          "recallable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is recallable"
          },
          "paymentRail": {
            "type": "string",
            "description": "Indicates the payment rail used for the payout transaction",
            "enum": [
              "ACH",
              "RTP",
              "RTGS",
              "SWIFT"
            ]
          },
          "isFinalStatus": {
            "type": "boolean",
            "description": "Only populated at PAYMENT_SENT status, indicates whether that is the final status provided by network partner."
          }
        }
      },
      "PurposeOfPayment-1": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
        "example": "ISBEXP"
      },
      "ExpectedPostingDateForValidate": {
        "maxLength": 10,
        "minLength": 10,
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds.\n\nIt is optional field, if exists, indicates expected posting date. \n\nThe EPD is a variable field that may alter between the responses of validate payout API and send payout API.\n\nISO20022 field name: Interbank Settlement Date\n",
        "format": "date",
        "example": "1980-02-01"
      },
      "SenderIdentificationList": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nValid values : \n* P- Passport \n* D-Driving License\n* N-National Id\n* T-Tax Id\n* L-Legal Entity Registration Number\n* F-Foreign Id\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification Code\" or \"Ultimate Debtor Organisation Identification Code\" <br> For 3rd party payments: \"Debtor Private Identification Code\" or \"Debtor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification\" or  \"Ultimate Debtor Organisation Identification\" <br> For 3rd party payments:\"Debtor Private Identification\" or\"Debtor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Private Identification Issuer\" or \"Ultimate Debtor Organisation Identification Issuer\" <br> For 3rd party payments: \"Debtor Private Identification Issuer\" or \"Debtor Organisation Identification Issuer\"\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "VplContact": {
        "type": "string",
        "description": "Contact information for VPL Client Support."
      },
      "RecipientIdentificationList-1": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification\" or \"Creditor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Issuer Country\" or \"Creditor Organisation Identification Issuer Country\"\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "RecipientIdentificationList-2": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Issuer Country\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "PayoutAccountRequest-1": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber-1"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-1"
              }
            ]
          }
        }
      },
      "MinTransactionAmountEquivalent": {
        "type": "array",
        "items": {
          "required": [
            "currencyOfMinAmount",
            "minAmountValue"
          ],
          "type": "object",
          "properties": {
            "condition": {
              "type": "string",
              "description": "It refers to an 'id' value in the conditions[] array."
            },
            "minAmountValue": {
              "type": "number",
              "description": "The minimum amount value allowed per transaction."
            },
            "currencyOfMinAmount": {
              "type": "string",
              "description": "The (Alpha-3) ISO-4217 currency code of the minimum amount value allowed per transaction. This could be in recipient bank currency or in a more common currency like USD, EUR or GBP."
            }
          }
        }
      },
      "PayoutAccountRequest-2": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber-1"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-2"
              }
            ]
          }
        }
      },
      "Type": {
        "type": "string",
        "description": "Identifies the type of sender or recipient - Individual or Company \n* I - Individual\n* C - Company\n",
        "example": "I",
        "enum": [
          "I",
          "C"
        ]
      },
      "ValidatePayoutRequest": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest"
          }
        ]
      },
      "SettlementOverdueDetails": {
        "required": [
          "currencyCode",
          "flexibleAccountFrozen",
          "originalDueDateTime",
          "totalAmountDue",
          "vplContact"
        ],
        "type": "object",
        "properties": {
          "vplContact": {
            "$ref": "#/components/schemas/VplContact"
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "totalAmountDue": {
            "$ref": "#/components/schemas/TotalAmountDue"
          },
          "originalDueDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "flexibleAccountFrozen": {
            "$ref": "#/components/schemas/FlexibleAccountFrozen"
          }
        }
      },
      "QuoteId-1": {
        "type": "integer",
        "description": "This is a unique FX quote ID generated by Visa for a payout currency pair.\n",
        "format": "int64",
        "example": 987654321
      },
      "PayoutAccountRequest-7": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-2"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-2"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-7"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-2"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-2"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-4"
              }
            ]
          }
        }
      },
      "PayoutAccountRequest-6": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-2"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-2"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData-1"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-3"
              }
            ]
          }
        }
      },
      "InitiatingPartyId-1": {
        "type": "integer",
        "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction\n\nISO20022 field name: <InitgPtyId> - InitiatingPartyIdentification, new identification of the initiating party. Visa uses integer instead of string(1-35) for uniformed value generation and presentation.\n",
        "format": "int64",
        "example": 100111
      },
      "S2AMetaData-1": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata-1"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata-1"
              }
            ]
          }
        }
      },
      "PayoutIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          {
            "$ref": "#/components/schemas/PayoutId"
          }
        ]
      },
      "ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            ]
          }
        }
      },
      "BalanceNotification-1": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance-1"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          }
        }
      },
      "TransactionRefWithCondition": {
        "required": [
          "$ref",
          "name",
          "presence"
        ],
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "this refers to a JSON Schema definition within the document"
          },
          "name": {
            "type": "string",
            "description": "If 'name' contains absolute JSON path (i.e. '$' at the beginning), it defines the JSON path of the field; otherwise, concatenate \\<path\\>+ \".\" +\\<name\\> to form an absolute JSON path."
          },
          "path": {
            "type": "string",
            "description": "If provided the \\<path\\> + \".\" + \\<name\\> will form a JSONPath string."
          },
          "presence": {
            "type": "string",
            "enum": [
              "required",
              "recommended",
              "conditional",
              "optional"
            ]
          },
          "condition": {
            "type": "string",
            "description": "This refers to a 'id' value of a condition within the document. This field will only be present, if the value in the \"presence\" parameter is \"conditional\""
          }
        }
      },
      "S2AMetaData-6": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata-2"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata-6"
              }
            ]
          }
        }
      },
      "FieldClientDriven": {
        "required": [
          "$ref",
          "name"
        ],
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "this refers to a JSON Schema definition within the document"
          },
          "name": {
            "type": "string",
            "description": "This field contains full JSON path (i.e. '$' at the beginning) of the field in Send Payout API."
          }
        }
      },
      "BalanceNotification-3": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "FundingStatus": {
        "type": "string",
        "description": "Indicates funding status of the payout transaction. This field is applicable for account payments only.\n",
        "enum": [
          "FUNDED",
          "NOT_FUNDED"
        ]
      },
      "BalanceNotification-2": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "$ref": "#/components/schemas/AmountWithZero-1"
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "IdentityGroup": {
        "title": "IdentityGroup",
        "required": [
          "groupLabel",
          "groupName",
          "identityFields",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the metadata element/enum.\nThis generic Identity Group object can represent either 'Beneficiary Identity Field Group object' or 'Bank Account Registration Field Group object' . \nEnum value signifies the particular metadata element. \n\nFor example : \n a) if enum is \"address\", this can contain array of 'IdentityField' object where each object can represent elements like addressLine1, addressLine2, city, countryCode, postalCode etc    \n\n b) enum can be \"identificationList\", which contains array of \"IdentityField' objects, one of the IdentityField object can have elementName=\"idType\" and inputType=\"list\", in this scenario array of IdentityListItem will have \n [\n   {\n     \"label\": \"Passport\",\n     \"value\": \"Passport\"\n   },\n   {\n     \"label\": \"National ID Card\",\n     \"value\": \"National ID Card\"\n   },\n   {\n     \"label\": \"Driving License\",\n     \"value\": \"Driving License\"\n   }\n ], \n second 'IdentityField' Object -> elementName as \"identificationNumber\" with inputType=\"text\" \n third 'IdentityField' Object -> elementName as \"identificationCountry\" with inputType=\"text\" \n fourth 'IdentityField' Object -> elementName as \"validFromDate\" with inputType=\"text\"\n fifth  'IdentityField' Object -> elementName as \"validToDate\" with inputType=\"text\" and so on.\n\n c) If enum is \"additionalData\",this will have array of two 'IdentityField' objects, one representing 'additionalDataKey' and other one 'additionalDataValue'.\n\n d) If enum is \"name\", \"middleName\" may be required for some countries (e.g. Africa). This can be accommodated by appending a space and then middleName to <firstName> \n",
            "enum": [
              "bank",
              "address",
              "name",
              "additionalData",
              "identificationList",
              "legalEntityIdentity",
              "contactInfo",
              "birthInfo"
            ]
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the identity group is mandatory."
          },
          "groupLabel": {
            "type": "string",
            "description": "Displays a label for this group of identity fields."
          },
          "identityFields": {
            "type": "array",
            "description": "This type defines a list of recipient identity fields.",
            "items": {
              "$ref": "#/components/schemas/IdentityField"
            }
          }
        },
        "description": "This type defines a recipient identity data group. Each group is normally represented as a section of fields on the UI. 'groupLabel' is the UI test to display as a name for this section. 'mandatory' indicates whether all section is mandatory. 'elementName' is the name of the element in the request for the corresponding section."
      },
      "ErrorResponseInNotificationForFailedRequest": {
        "required": [
          "reason",
          "status"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "items": {
              "required": [
                "code",
                "message"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "PostingDate-1": {
        "required": [
          "cutoffDateTime",
          "expectedPostingDate"
        ],
        "type": "object",
        "properties": {
          "cutoffDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDate-1"
              }
            ]
          }
        }
      },
      "ValidatePayoutRequest-1": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-1"
          }
        ]
      },
      "SenderIndividual": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender, conditionally required when firstName and lastName are not provided.<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameI"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Sender city of birth\n\nISO20022 field name: \"Ultimate Debtor City of Birth\" or \"Debtor City of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Ultimate Debtor Birth Date\" or \"Debtor Birth Date\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Sender country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: \"Ultimate Debtor Country of Birth\" or \"Debtor Country of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "ValidatePayoutRequest-2": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-2"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-2"
          }
        ]
      },
      "PayoutStatusesInProgress": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is applicable for all Wallet Payments and Account Payments only when provided by the Network Partner.\n- DELIVERED_TO_SCHEME: The payout has been submitted to the local country scheme for further processing. This status is applicable for Account Payments only when provided by the Network Partner.\n- DELIVERED_TO_RECIPIENT_BANK: The payout has been submitted to the recipient’s bank. This status is applicable for Account Payments only when provided by the Network Partner.\n<br />ISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED",
                  "DELIVERED_TO_SCHEME",
                  "DELIVERED_TO_RECIPIENT_BANK"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "deliveredDateTime": {
                "$ref": "#/components/schemas/DeliveredDateTime"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "localSchemeTransactionId": {
                "$ref": "#/components/schemas/LocalSchemeTransactionId"
              }
            }
          }
        }
      },
      "ValidatePayoutRequest-6": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-6"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-6"
          }
        ]
      },
      "ValidatePayoutRequest-7": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-7"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-7"
          }
        ]
      },
      "LedgerNotification": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "VerifyRecipientDetailResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WalletVerifyResponse"
          },
          {
            "$ref": "#/components/schemas/AccountVerifyResponse"
          }
        ]
      },
      "RecipientIdentificationList": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification\" or \"Creditor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Issuer Country\" or \"Creditor Organisation Identification Issuer Country\"\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "Schemas": {
        "type": "object",
        "description": "This section lists fields with common definition (e.g., same datatype and length) across all countries.\nIt contains valid JSON Schemas.\n"
      },
      "SenderAccountPayoutAddress-2": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "SenderAccountPayoutAddress-1": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Town Name\" <br> For 3rd party payments: \"Debtor Address Town Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Country Sub-division\" <br> For 3rd party payments: \"Debtor Address Country Sub-division\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Country\" <br> For 3rd party payments: \"Debtor Address Country\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: <br> For 4th  party payments: \"Ultimate Debtor Address Postal Code\" <br> For 3rd party payments: \"Debtor Address Postal Code\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Street Name\" <br> For 3rd party payments: \"Debtor Address Street Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Floor\" <br> For 3rd party payments: \"Debtor Address Floor\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "Province": {
        "maxLength": 25,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's address subdivision Major code, state or province",
        "example": "New Mexico"
      },
      "PayoutNotificationProcessRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "PurposeOfPaymentCodes": {
        "title": "PurposeOfPaymentCodes",
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PurposeOfPayment"
          },
          "description": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Description of purpose of payment code.",
            "example": "Salary/payroll"
          },
          "senderCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is a company."
          },
          "recipientCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is a company."
          },
          "senderIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is an individual."
          },
          "recipientIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is an individual."
          }
        }
      },
      "RouteDefinitionRecallPerCountryAndCurrency": {
        "required": [
          "metadataVersion",
          "metadataVersionDate",
          "notificationId",
          "notificationType",
          "payoutMethod",
          "recipientCountryCode",
          "recipientCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "type": "string",
            "description": "Payout method code. Valid values are B- Bank , W- Wallet (This ENUM is not currently supported. It is for future use.)\n",
            "enum": [
              "B",
              "w"
            ]
          },
          "notificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the notification. In case of a recall (i.e., when the notificationType is \"RECALL\"), this field will contain the notificationId of a previously sent notification that is being recalled.\n",
            "example": "58e0a7d7-eebc-11d8-9669-0800200c9a66"
          },
          "metadataVersion": {
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
            "type": "string",
            "description": "This is the version of the route definition recalled by VISA. \nIt is in the format <major-version>.<minor-version>.<patch>.\n\n* patch updates are documentation updates only and should not influence the processing of a payout transaction. Example: changes to the description of Purpose of Payment code.\n\n* minor-version updates indicate backward compatible changes in the route validation rules on a payout transaction. Example: addition of a new Purpose of Payment code.\n\n* major-version updates indicate backward incompatible changes in the route validation rules on a payout transaction. Such changes are usually regulatory in nature or due to partner migration on Visa's backend. Example: Purpose of Payment code changing from a \"conditional\"/ \"recommended\" to a \"required\" field.\n",
            "example": "1.0.0"
          },
          "notificationType": {
            "type": "string",
            "description": "Notification Type. Valid value- RECALL\n",
            "enum": [
              "RECALL"
            ]
          },
          "metadataVersionDate": {
            "type": "string",
            "description": "This was the expected go-live date of the recalled metadata version.",
            "format": "date"
          },
          "recipientCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-3166 (Alpha-3) country code\n",
            "example": "USA"
          },
          "recipientCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO-4217 (Alpha-3) currency code\n",
            "example": "USD"
          },
          "recipientWalletOperator": {
            "type": "string",
            "description": "Wallet operator enumerated names. This field will be present only when the payoutMethod is W. recipientWalletOperator is for future use as payoutMethod=W is not currently supported.\n",
            "example": "BKASH"
          }
        }
      },
      "PayoutMethod": {
        "type": "string",
        "description": "Originating Entity must indicate the payout method i.e. Account or Wallet\n\nValid values:\n- \"B\" Visa Direct Account\n- \"W\" Visa Direct Wallet\n",
        "enum": [
          "B",
          "W"
        ]
      },
      "TransactionIdType": {
        "type": "string",
        "description": "This field indicates the type of identifier\n- CLIENT_REFERENCE_ID is merchant's transaction reference ID\n- PAYOUT_ID is Visa's transaction reference ID \n",
        "enum": [
          "CLIENT_REFERENCE_ID",
          "PAYOUT_ID"
        ]
      },
      "ExpectedPostingDate": {
        "maxLength": 10,
        "minLength": 10,
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nIt is optional field, if exists, indicates expected posting date change\n\nISO20022 field name: Interbank Settlement Date\n",
        "format": "date",
        "example": "1980-02-01"
      },
      "500ErrorResponseObject": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 500
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "ReturnReasonDetails-1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode-1"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription-1"
          }
        }
      },
      "SourceOfFunds-1": {
        "type": "string",
        "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout.Valid values are:\nConditional - source of funds is required by some endpoints, please check for Visa Payment Guide for details  \n\n01 = Visa credit\n02 = Visa debit\n03 = Visa prepaid\n04 = Cash\n05 = Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 = Credit accounts other than those linked to a Visa card (includes credit cards and proprietary credit lines)\n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account.\n\nISO20022 field name: Debtor Account Type\n"
      },
      "ReturnReasonDetails-2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode-2"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription-1"
          }
        }
      },
      "SourceOfFunds-2": {
        "type": "string",
        "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout.Valid values are:\nConditional - source of funds is required by some endpoints, please check for Visa Payment Guide for details  \n\n01 = Visa credit\n02 = Visa debit\n03 = Visa prepaid\n04 = Cash\n05 = Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 = Credit accounts other than those linked to a Visa card (includes credit cards and proprietary credit lines)\n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account. This field is required for Money Transfers and Funds Disbursements.\n\nISO20022 field name: Debtor Account Type Source of Funds\n"
      },
      "PayoutNotificationProcessRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is applicable for all Wallet Payments and Account Payments only when provided by the Network Partner.\n<br />ISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "PostalCode": {
        "maxLength": 16,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's address postal code.",
        "example": "94320"
      },
      "PayoutNotificationProcessRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "TransactionalAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "PayoutNotificationProcessRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is applicable for all Wallet Payments and Account Payments only when provided by the Network Partner.\n- DELIVERED_TO_SCHEME: The payout has been submitted to the local country scheme for further processing. This status is applicable for Account Payments only when provided by the Network Partner.\n- DELIVERED_TO_RECIPIENT_BANK: The payout has been submitted to the recipient’s bank. This status is applicable for Account Payments only when provided by the Network Partner.\n<br />ISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED",
                  "DELIVERED_TO_SCHEME",
                  "DELIVERED_TO_RECIPIENT_BANK"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "deliveredDateTime": {
                "$ref": "#/components/schemas/DeliveredDateTime"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "localSchemeTransactionId": {
                "$ref": "#/components/schemas/LocalSchemeTransactionId"
              }
            }
          }
        }
      },
      "VerifyRecipientDetailResponse": {
        "required": [
          "verificationId",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "verificationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique verification identifier.",
            "example": "5003f6a0-2c44-11b2-aa57-47378ae53313"
          },
          "verificationStatus": {
            "type": "string",
            "description": "Provides the status of verification request.\n* COMPLETED - Request was completed and result is available.\n* NOT_COMPLETED - Wallet Partner's end wallet operator or Wallet Operator not available.\n",
            "example": "COMPLETED",
            "enum": [
              "COMPLETED",
              "NOT_COMPLETED"
            ]
          },
          "walletVerificationDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletVerificationDetail"
              }
            ]
          },
          "clientVerificationReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientVerificationReference"
              }
            ]
          }
        }
      },
      "FlexibleSettlementNotification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LimitReachedFlexibleSettlementNotification"
          },
          {
            "$ref": "#/components/schemas/EODFlexibleSettlementNotification"
          },
          {
            "$ref": "#/components/schemas/NearLimitReachedFlexibleSettlementNotification"
          },
          {
            "$ref": "#/components/schemas/SettlementOverdueFlexibleSettlementNotification"
          },
          {
            "$ref": "#/components/schemas/SettlementDueBreachedFlexibleSettlementNotification"
          },
          {
            "$ref": "#/components/schemas/ExposureInfoFlexibleSettlementNotification"
          }
        ]
      },
      "ReturnReasonCodeDescription": {
        "maxLength": 105,
        "minLength": 1,
        "type": "string",
        "description": "Indicates the PSP return description when the payout is returned. Refer to PSP Return Description (add link to VDP)\n\nISO20022 field name: Payment Return - PSP Return Description\n"
      },
      "ValidateWalletTransactionDetail-7": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-2"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateWalletTransactionDetail-6": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-2"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "PayoutId": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This is a globally unique identifier generated by Visa for a payout transaction\n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information\n",
        "example": "5003f6a0-2c44-11b2-aa57-47378ae53313_1"
      },
      "MiddleName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Optional middle name or middle initial when recipient is an individual.",
        "example": "A"
      },
      "Date": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "a Date",
        "format": "date"
      },
      "ValidateWalletTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData-1"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to recipient's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Visa Direct Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ExposureInfoDetails": {
        "required": [
          "currencyCode",
          "flexibleAmountLimit",
          "flexibleAmountRemaining",
          "flexibleAmountUtilized"
        ],
        "type": "object",
        "properties": {
          "dueDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/AlphaCurrencyCode"
          },
          "totalAmountDue": {
            "$ref": "#/components/schemas/TotalAmountDue"
          },
          "totalAmountOverdue": {
            "$ref": "#/components/schemas/TotalAmountOverdue"
          },
          "flexibleAmountLimit": {
            "$ref": "#/components/schemas/FlexibleAmountLimit"
          },
          "originalDueDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "flexibleAmountUtilized": {
            "$ref": "#/components/schemas/FlexibleAmountUtilized"
          },
          "flexibleAmountRemaining": {
            "$ref": "#/components/schemas/FlexibleAmountRemaining"
          }
        }
      },
      "ContactEmail": {
        "maxLength": 210,
        "minLength": 1,
        "type": "string",
        "description": "Contact Email."
      },
      "RecipientDetailMetadata-1": {
        "title": "RecipientDetail",
        "required": [
          "identityGroups"
        ],
        "type": "object",
        "properties": {
          "identityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityGroup-1"
            }
          }
        }
      },
      "CreateQuote": {
        "required": [
          "amount",
          "amountType",
          "buyCurrency",
          "initiatingPartyId",
          "sellCurrency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount value for the given amount type.",
            "format": "double",
            "example": 8000
          },
          "amountType": {
            "type": "string",
            "example": "BUY",
            "enum": [
              "BUY",
              "SELL"
            ]
          },
          "buyCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "INR"
          },
          "sellCurrency": {
            "type": "string",
            "description": "ISO-4217 (3-Alpha) currency code",
            "example": "USD"
          },
          "initiatingPartyId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "integer",
            "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction",
            "example": 476110
          }
        }
      },
      "RecipientDetailMetadata-2": {
        "title": "RecipientDetail",
        "required": [
          "identityGroups"
        ],
        "type": "object",
        "properties": {
          "identityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityGroup-2"
            }
          }
        }
      },
      "NearLimitReachedFlexibleSettlementNotification": {
        "required": [
          "accountId",
          "eventType",
          "initiatingPartyId",
          "limitReachedDetails",
          "notificationDateTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The accountId uniquely identifies the account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that triggered the notification.",
            "enum": [
              "NEAR_LIMIT_REACHED"
            ]
          },
          "initiatingPartyId": {
            "$ref": "#/components/schemas/InitiatingPartyId"
          },
          "limitReachedDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NearLimitReachedDetails"
            }
          },
          "notificationDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          }
        }
      },
      "SenderAdditionalData-1": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Visa Direct Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      }
    },
    "responses": {
      "401ErrorResponse-1": {
        "description": "Request is unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/401ErrorResponseWithKey"
            }
          }
        }
      },
      "500ErrorResponse-1": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {}
        }
      },
      "500ErrorResponse-2": {
        "description": "Internal Server Error",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/500ErrorResponseWithKey"
            }
          }
        }
      },
      "GetMetaDataResponse-4": {
        "description": "Returns the metadata of rules and conditions of the request (e.g. product, corridor).\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Combined"
            }
          }
        }
      },
      "QueryResponseAccount": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse"
                }
              ]
            }
          }
        }
      },
      "GetPostingCalendarResponse-1": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.\n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate"
                  }
                }
              }
            }
          }
        }
      },
      "QueryResponseAccount-9": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-9"
                }
              ]
            }
          }
        }
      },
      "400ErrorResponses": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "400NotificationsErrorResponse-1": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationsErrorResponseWithKey"
            }
          }
        }
      },
      "GetMetaDataResponse-1": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData-1"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447700123456 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "QueryResponseAccount-1": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-1"
                }
              ]
            }
          }
        }
      },
      "400ErrorResponse": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey"
            }
          }
        }
      },
      "QueryResponseAccount-7": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-7"
                }
              ]
            }
          }
        }
      },
      "GetMetaDataResponse-7": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.   \n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData-6"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447700123456 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetPostingCalendarResponse-2": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.   \n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate-1"
                  }
                }
              }
            }
          }
        }
      },
      "QueryResponseAccount-6": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-6"
                }
              ]
            }
          }
        }
      },
      "GetAccountBalanceResponse": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a list of balances for all the currencies the merchant may have or has transacted with.    \n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "202CreatedResponse": {
        "description": "Transaction is accepted and will be processed & notified status.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "properties": {
                "transactionalDetail": {
                  "required": [
                    "payoutId"
                  ],
                  "type": "object",
                  "properties": {
                    "payoutId": {
                      "$ref": "#/components/schemas/PayoutId"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CancelPayoutResponse": {
        "description": "cancel payout response",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "type": "object",
              "properties": {
                "transactionDetail": {
                  "required": [
                    "clientReferenceId",
                    "initiatingPartyId",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutCancelStatus"
                        }
                      ]
                    },
                    "payoutId": {
                      "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutId"
                        }
                      ]
                    },
                    "clientReferenceId": {
                      "$ref": "#/components/schemas/ClientReferenceId"
                    },
                    "initiatingPartyId": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/InitiatingPartyId"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409ErrorResponse": {
        "description": "Conflict",
        "content": {
          "application/problem+json": {}
        }
      },
      "400NotificationsErrorResponse": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationsErrorResponseWithKey"
            }
          }
        }
      },
      "503ErrorResponse-1": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {}
        }
      },
      "404ErrorResponse-1": {
        "description": "Resource not found",
        "content": {
          "application/json": {}
        }
      },
      "500ErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/problem+json": {}
        }
      },
      "403ErrorResponse-1": {
        "description": "Request is forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/403ErrorResponseWithKey"
            }
          }
        }
      },
      "403ErrorResponse": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/403ErrorResponseWithKey"
            }
          }
        }
      },
      "404ErrorResponse": {
        "description": "Resource not found",
        "content": {
          "application/problem+json": {}
        }
      },
      "202CreatedResponse-1": {
        "description": "Transaction is accepted and will be processed & notified status.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "properties": {
                "transactionDetail": {
                  "required": [
                    "payoutId"
                  ],
                  "type": "object",
                  "properties": {
                    "payoutId": {
                      "$ref": "#/components/schemas/PayoutId"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "429ErrorResponse": {
        "description": "Too Many Requests",
        "content": {
          "application/problem+json": {}
        }
      },
      "401ErrorResponse": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/401ErrorResponseWithKey"
            }
          }
        }
      },
      "400ErrorResponses-1": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      },
      "400ErrorResponses-2": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "403ErrorResponseNoBody": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {}
        }
      },
      "401ErrorResponseNoBody": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {}
        }
      },
      "429ErrorResponse-1": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {}
        }
      },
      "GetAccountBalanceResponse-1": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a list of balances for all the currencies the merchant may have or has transacted with.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp-1"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance-1"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "400ErrorResponse-1": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey"
            }
          }
        }
      },
      "400ErrorResponse-2": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-1"
            }
          }
        }
      },
      "CancelPayoutResponse-1": {
        "description": "cancel payout response",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "type": "object",
              "properties": {
                "transactionDetail": {
                  "required": [
                    "clientReferenceId",
                    "initiatingPartyId",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutCancelStatus"
                        }
                      ]
                    },
                    "payoutId": {
                      "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card.\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutId"
                        }
                      ]
                    },
                    "clientReferenceId": {
                      "$ref": "#/components/schemas/ClientReferenceId"
                    },
                    "initiatingPartyId": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/InitiatingPartyId"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409ErrorResponse-1": {
        "description": "Conflict",
        "content": {
          "application/json": {}
        }
      },
      "CancelPayoutResponse-2": {
        "description": "cancel payout response",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "type": "object",
              "properties": {
                "transactionDetail": {
                  "required": [
                    "clientReferenceId",
                    "initiatingPartyId",
                    "payoutId",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutCancelStatus"
                        }
                      ]
                    },
                    "payoutId": {
                      "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutId"
                        }
                      ]
                    },
                    "clientReferenceId": {
                      "$ref": "#/components/schemas/ClientReferenceId-1"
                    },
                    "initiatingPartyId": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/InitiatingPartyId-1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "503ErrorResponse": {
        "description": "Service Unavailable",
        "content": {
          "application/problem+json": {}
        }
      },
      "GetMetaDataResponse": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.   \n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447700123456 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetPostingCalendarResponse": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.   \n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "callbacks": {}
  },
  "x-tagGroups": [
    {
      "name": "API Reference",
      "tags": [
        "Managed Liquidity FX ",
        "Payouts Originator Receive API - Legacy",
        "Payouts Originator Send API - Legacy",
        "Visa Direct Account and Wallet Additional Services",
        "Visa Direct Account and Wallet Receive API",
        "Visa Direct Account and Wallet Send API"
      ]
    }
  ]
}